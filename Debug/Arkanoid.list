
Arkanoid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090dc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020a8  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b368  0800b368  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  0800b368  0800b368  0001b368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b370  0800b370  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b370  0800b370  0001b370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b374  0800b374  0001b374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  0800b378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d40  20000140  0800b4b8  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  0800b4b8  00020e80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1b0  00000000  00000000  00020169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cec  00000000  00000000  0003d319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00041008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  00042598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004341  00000000  00000000  000439a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ab8  00000000  00000000  00047ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb3d9  00000000  00000000  000617a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012cb7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ec0  00000000  00000000  0012cbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000140 	.word	0x20000140
 8000200:	00000000 	.word	0x00000000
 8000204:	080092a8 	.word	0x080092a8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000144 	.word	0x20000144
 8000220:	080092a8 	.word	0x080092a8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  JOYState_TypeDef JoyState = JOY_NONE;
 8000522:	2305      	movs	r3, #5
 8000524:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f003 fbe5 	bl	8003cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f893 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN 2 */
  
  /* Configure the Key push-button in GPIO Mode */

  /*## Initialize the LCD #################################################*/
  if (BSP_LCD_Init() != LCD_OK)
 800052e:	f002 ff37 	bl	80033a0 <BSP_LCD_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <main+0x20>
  {
	  Error_Handler();
 8000538:	f001 f80a 	bl	8001550 <Error_Handler>
  }

  if (BSP_JOY_Init(JOY_MODE_GPIO) != IO_OK)
 800053c:	2000      	movs	r0, #0
 800053e:	f002 fad5 	bl	8002aec <BSP_JOY_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d022      	beq.n	800058e <main+0x72>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000548:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800054c:	f002 ff9a 	bl	8003484 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000550:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000554:	f002 ff86 	bl	8003464 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font12);
 8000558:	4839      	ldr	r0, [pc, #228]	; (8000640 <main+0x124>)
 800055a:	f002 ffa3 	bl	80034a4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t *)"ERROR", CENTER_MODE);
 800055e:	f002 ff75 	bl	800344c <BSP_LCD_GetYSize>
 8000562:	4603      	mov	r3, r0
 8000564:	b29b      	uxth	r3, r3
 8000566:	3b5f      	subs	r3, #95	; 0x5f
 8000568:	b299      	uxth	r1, r3
 800056a:	2301      	movs	r3, #1
 800056c:	4a35      	ldr	r2, [pc, #212]	; (8000644 <main+0x128>)
 800056e:	2000      	movs	r0, #0
 8000570:	f003 f804 	bl	800357c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t *)"Joystick cannot be initialized", CENTER_MODE);
 8000574:	f002 ff6a 	bl	800344c <BSP_LCD_GetYSize>
 8000578:	4603      	mov	r3, r0
 800057a:	b29b      	uxth	r3, r3
 800057c:	3b50      	subs	r3, #80	; 0x50
 800057e:	b299      	uxth	r1, r3
 8000580:	2301      	movs	r3, #1
 8000582:	4a31      	ldr	r2, [pc, #196]	; (8000648 <main+0x12c>)
 8000584:	2000      	movs	r0, #0
 8000586:	f002 fff9 	bl	800357c <BSP_LCD_DisplayStringAt>
    Error_Handler();
 800058a:	f000 ffe1 	bl	8001550 <Error_Handler>
  }

  if (ADC1_Init() != HAL_OK)
 800058e:	f000 f8d3 	bl	8000738 <ADC1_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d022      	beq.n	80005de <main+0xc2>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000598:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800059c:	f002 ff72 	bl	8003484 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80005a0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80005a4:	f002 ff5e 	bl	8003464 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font12);
 80005a8:	4825      	ldr	r0, [pc, #148]	; (8000640 <main+0x124>)
 80005aa:	f002 ff7b 	bl	80034a4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t *)"ERROR", CENTER_MODE);
 80005ae:	f002 ff4d 	bl	800344c <BSP_LCD_GetYSize>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	3b5f      	subs	r3, #95	; 0x5f
 80005b8:	b299      	uxth	r1, r3
 80005ba:	2301      	movs	r3, #1
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <main+0x128>)
 80005be:	2000      	movs	r0, #0
 80005c0:	f002 ffdc 	bl	800357c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t *)"ADC1 cannot be initialized", CENTER_MODE);
 80005c4:	f002 ff42 	bl	800344c <BSP_LCD_GetYSize>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	3b50      	subs	r3, #80	; 0x50
 80005ce:	b299      	uxth	r1, r3
 80005d0:	2301      	movs	r3, #1
 80005d2:	4a1e      	ldr	r2, [pc, #120]	; (800064c <main+0x130>)
 80005d4:	2000      	movs	r0, #0
 80005d6:	f002 ffd1 	bl	800357c <BSP_LCD_DisplayStringAt>
    Error_Handler();
 80005da:	f000 ffb9 	bl	8001550 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005e2:	f002 ff6d 	bl	80034c0 <BSP_LCD_Clear>

	GeneratePlatform();
 80005e6:	f000 f8f1 	bl	80007cc <GeneratePlatform>
	DrawPlatform();
 80005ea:	f000 f921 	bl	8000830 <DrawPlatform>
	GenerateBricks();
 80005ee:	f000 fdeb 	bl	80011c8 <GenerateBricks>
	DrawBricks();
 80005f2:	f000 fe3f 	bl	8001274 <DrawBricks>
	GenerateBall();
 80005f6:	f000 f959 	bl	80008ac <GenerateBall>
	DrawBall();
 80005fa:	f000 f96f 	bl	80008dc <DrawBall>

	while (game_state == 0)
 80005fe:	e018      	b.n	8000632 <main+0x116>
	{
	  /* Get the Joystick State */
	  JoyState = BSP_JOY_GetState();
 8000600:	f002 fa8f 	bl	8002b22 <BSP_JOY_GetState>
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
	  BallMovement();
 8000608:	f000 fa2c 	bl	8000a64 <BallMovement>
	  switch(JoyState)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d002      	beq.n	8000618 <main+0xfc>
 8000612:	2b02      	cmp	r3, #2
 8000614:	d006      	beq.n	8000624 <main+0x108>
 8000616:	e00b      	b.n	8000630 <main+0x114>
	  {
	  case JOY_LEFT:
		  HAL_Delay(200);
 8000618:	20c8      	movs	r0, #200	; 0xc8
 800061a:	f003 fbcd 	bl	8003db8 <HAL_Delay>
		  MoveLeft();
 800061e:	f000 f9a1 	bl	8000964 <MoveLeft>
	      break;
 8000622:	e006      	b.n	8000632 <main+0x116>
	  case JOY_RIGHT:
		  HAL_Delay(200);
 8000624:	20c8      	movs	r0, #200	; 0xc8
 8000626:	f003 fbc7 	bl	8003db8 <HAL_Delay>
		  MoveRight();
 800062a:	f000 f9d9 	bl	80009e0 <MoveRight>
	      break;
 800062e:	e000      	b.n	8000632 <main+0x116>
	  default:
	      break;
 8000630:	bf00      	nop
	while (game_state == 0)
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <main+0x134>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0e2      	beq.n	8000600 <main+0xe4>
	  }

	}

	GameOver();
 800063a:	f000 fe9b 	bl	8001374 <GameOver>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800063e:	e7ce      	b.n	80005de <main+0xc2>
 8000640:	200000cc 	.word	0x200000cc
 8000644:	080092c0 	.word	0x080092c0
 8000648:	080092c8 	.word	0x080092c8
 800064c:	080092e8 	.word	0x080092e8
 8000650:	20000224 	.word	0x20000224

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	; 0x70
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800065e:	2238      	movs	r2, #56	; 0x38
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f008 f9de 	bl	8008a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2220      	movs	r2, #32
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f008 f9d0 	bl	8008a24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000684:	2305      	movs	r3, #5
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800068e:	2304      	movs	r3, #4
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800069a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fca8 	bl	8007018 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006ce:	f000 ff3f 	bl	8001550 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f006 ffa8 	bl	8007644 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006fa:	f000 ff29 	bl	8001550 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80006fe:	2313      	movs	r3, #19
 8000700:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000706:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f007 f977 	bl	8007a08 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000720:	f000 ff16 	bl	8001550 <Error_Handler>
  }

  // HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
  /** Configure the Systick interrupt time */
  __HAL_RCC_PLLI2S_ENABLE();
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <SystemClock_Config+0xe0>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3770      	adds	r7, #112	; 0x70
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	42420070 	.word	0x42420070

08000738 <ADC1_Init>:

/* USER CODE BEGIN 4 */
uint8_t ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b090      	sub	sp, #64	; 0x40
 800073c:	af00      	add	r7, sp, #0
  uint8_t ret = HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef hadc1 = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2230      	movs	r2, #48	; 0x30
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f008 f969 	bl	8008a24 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]

  /** Common configuration */
  hadc1.Instance = ADC1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <ADC1_Init+0x90>)
 800075e:	60fb      	str	r3, [r7, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	763b      	strb	r3, [r7, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	f887 3020 	strb.w	r3, [r7, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
  ret = HAL_ADC_Init(&hadc1);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fb3d 	bl	8003e00 <HAL_ADC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != HAL_OK)
 800078c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <ADC1_Init+0x62>
  {
    return ret;
 8000794:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000798:	e011      	b.n	80007be <ADC1_Init+0x86>
  }

  /** Configure regular channel group */
  sConfig.Channel = ADC_CHANNEL_7;
 800079a:	2307      	movs	r3, #7
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079e:	2301      	movs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007a2:	2307      	movs	r3, #7
 80007a4:	60bb      	str	r3, [r7, #8]
  ret = HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80007a6:	463a      	mov	r2, r7
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fbfe 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  return ret;
 80007ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3740      	adds	r7, #64	; 0x40
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40012400 	.word	0x40012400

080007cc <GeneratePlatform>:

void GeneratePlatform(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0


	for(int i=0; i < platform.y_size; i++){
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e010      	b.n	80007fa <GeneratePlatform+0x2e>
		game_board[platform.x][platform.y+i] = 1;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <GeneratePlatform+0x5c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <GeneratePlatform+0x5c>)
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	4619      	mov	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	440b      	add	r3, r1
 80007e8:	4910      	ldr	r1, [pc, #64]	; (800082c <GeneratePlatform+0x60>)
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	440a      	add	r2, r1
 80007ee:	4413      	add	r3, r2
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < platform.y_size; i++){
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3301      	adds	r3, #1
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <GeneratePlatform+0x5c>)
 80007fc:	795b      	ldrb	r3, [r3, #5]
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4293      	cmp	r3, r2
 8000804:	dbe8      	blt.n	80007d8 <GeneratePlatform+0xc>
	}
	platform.left_coordinate=platform.y;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <GeneratePlatform+0x5c>)
 8000808:	785a      	ldrb	r2, [r3, #1]
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <GeneratePlatform+0x5c>)
 800080c:	709a      	strb	r2, [r3, #2]
	platform.right_coordinate=platform.y+platform.y_size;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <GeneratePlatform+0x5c>)
 8000810:	785a      	ldrb	r2, [r3, #1]
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <GeneratePlatform+0x5c>)
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	4413      	add	r3, r2
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b03      	ldr	r3, [pc, #12]	; (8000828 <GeneratePlatform+0x5c>)
 800081c:	70da      	strb	r2, [r3, #3]

}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000000 	.word	0x20000000
 800082c:	2000015c 	.word	0x2000015c

08000830 <DrawPlatform>:

void DrawPlatform(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	int i = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
	int j = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]


	for (i= 0; i < M; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	e02a      	b.n	800089a <DrawPlatform+0x6a>
		{
			for (j = 0; j < N; j++)
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	e021      	b.n	800088e <DrawPlatform+0x5e>
			{
				if (game_board[i][j] == 1)
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <DrawPlatform+0x78>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	441a      	add	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	f993 3000 	ldrsb.w	r3, [r3]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d114      	bne.n	8000888 <DrawPlatform+0x58>
				{
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800085e:	201f      	movs	r0, #31
 8000860:	f002 fe00 	bl	8003464 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(j*SQUARE_SIZE, i*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b29b      	uxth	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	4413      	add	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	b298      	uxth	r0, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	b29b      	uxth	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	0092      	lsls	r2, r2, #2
 800087a:	4413      	add	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	b299      	uxth	r1, r3
 8000880:	2314      	movs	r3, #20
 8000882:	2214      	movs	r2, #20
 8000884:	f003 f84a 	bl	800391c <BSP_LCD_FillRect>
			for (j = 0; j < N; j++)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	ddda      	ble.n	800084a <DrawPlatform+0x1a>
	for (i= 0; i < M; i++)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b0b      	cmp	r3, #11
 800089e:	ddd1      	ble.n	8000844 <DrawPlatform+0x14>
				}
			}
		}
	return;
 80008a0:	bf00      	nop
}
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000015c 	.word	0x2000015c

080008ac <GenerateBall>:

void GenerateBall(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
	game_board[ball.x_pos][ball.y_pos] = 3;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <GenerateBall+0x28>)
 80008b2:	f993 3000 	ldrsb.w	r3, [r3]
 80008b6:	4618      	mov	r0, r3
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <GenerateBall+0x28>)
 80008ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80008be:	4619      	mov	r1, r3
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <GenerateBall+0x2c>)
 80008c2:	0103      	lsls	r3, r0, #4
 80008c4:	4413      	add	r3, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	2203      	movs	r2, #3
 80008ca:	701a      	strb	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000008 	.word	0x20000008
 80008d8:	2000015c 	.word	0x2000015c

080008dc <DrawBall>:


void DrawBall(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	int i = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
	int j = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]

	for (i= 0; i < M; i++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	e02f      	b.n	8000950 <DrawBall+0x74>
		{
			for (j = 0; j < N; j++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	e026      	b.n	8000944 <DrawBall+0x68>
			{
				if (game_board[i][j] == 3)
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <DrawBall+0x84>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	441a      	add	r2, r3
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	4413      	add	r3, r2
 8000902:	f993 3000 	ldrsb.w	r3, [r3]
 8000906:	2b03      	cmp	r3, #3
 8000908:	d119      	bne.n	800093e <DrawBall+0x62>
				{
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800090a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800090e:	f002 fda9 	bl	8003464 <BSP_LCD_SetTextColor>
					BSP_LCD_FillCircle(j*SQUARE_SIZE+10, i*SQUARE_SIZE+10, CIRCLE_SIZE);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b29b      	uxth	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	4413      	add	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	b29b      	uxth	r3, r3
 8000920:	330a      	adds	r3, #10
 8000922:	b298      	uxth	r0, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	b29b      	uxth	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	4413      	add	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	b29b      	uxth	r3, r3
 8000932:	330a      	adds	r3, #10
 8000934:	b29b      	uxth	r3, r3
 8000936:	220a      	movs	r2, #10
 8000938:	4619      	mov	r1, r3
 800093a:	f003 f819 	bl	8003970 <BSP_LCD_FillCircle>
			for (j = 0; j < N; j++)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b0f      	cmp	r3, #15
 8000948:	ddd5      	ble.n	80008f6 <DrawBall+0x1a>
	for (i= 0; i < M; i++)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3301      	adds	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b0b      	cmp	r3, #11
 8000954:	ddcc      	ble.n	80008f0 <DrawBall+0x14>
				}
			}
		}
	return;
 8000956:	bf00      	nop
}
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000015c 	.word	0x2000015c

08000964 <MoveLeft>:


void MoveLeft(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

	uint8_t head_y = platform.y;
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MoveLeft+0x74>)
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	71fb      	strb	r3, [r7, #7]
	uint8_t next_col = head_y-1;
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3b01      	subs	r3, #1
 8000974:	71bb      	strb	r3, [r7, #6]
	uint8_t tail_y = platform.y+platform.y_size-1;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MoveLeft+0x74>)
 8000978:	785a      	ldrb	r2, [r3, #1]
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MoveLeft+0x74>)
 800097c:	795b      	ldrb	r3, [r3, #5]
 800097e:	4413      	add	r3, r2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	3b01      	subs	r3, #1
 8000984:	717b      	strb	r3, [r7, #5]

	if (head_y == (0))
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d021      	beq.n	80009d0 <MoveLeft+0x6c>
	}

	else
	{

		game_board[M-1][tail_y] = 0;
 800098c:	797b      	ldrb	r3, [r7, #5]
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MoveLeft+0x78>)
 8000990:	4413      	add	r3, r2
 8000992:	2200      	movs	r2, #0
 8000994:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000998:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800099c:	f002 fd62 	bl	8003464 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect( (tail_y)*SQUARE_SIZE, (M-1)*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	b298      	uxth	r0, r3
 80009ae:	2314      	movs	r3, #20
 80009b0:	2214      	movs	r2, #20
 80009b2:	21dc      	movs	r1, #220	; 0xdc
 80009b4:	f002 ffb2 	bl	800391c <BSP_LCD_FillRect>

		platform.y = next_col;
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <MoveLeft+0x74>)
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	7053      	strb	r3, [r2, #1]

		game_board[M-1][next_col] = 1;
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	4a06      	ldr	r2, [pc, #24]	; (80009dc <MoveLeft+0x78>)
 80009c2:	4413      	add	r3, r2
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

		DrawPlatform();
 80009ca:	f7ff ff31 	bl	8000830 <DrawPlatform>
 80009ce:	e000      	b.n	80009d2 <MoveLeft+0x6e>
		return;
 80009d0:	bf00      	nop
	}
}
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	2000015c 	.word	0x2000015c

080009e0 <MoveRight>:

void MoveRight(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

	uint8_t head_y = platform.y+platform.y_size-1;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MoveRight+0x7c>)
 80009e8:	785a      	ldrb	r2, [r3, #1]
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MoveRight+0x7c>)
 80009ec:	795b      	ldrb	r3, [r3, #5]
 80009ee:	4413      	add	r3, r2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	3b01      	subs	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
	uint8_t next_col = head_y+1;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	3301      	adds	r3, #1
 80009fa:	71bb      	strb	r3, [r7, #6]
	uint8_t tail_y = platform.y;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MoveRight+0x7c>)
 80009fe:	785b      	ldrb	r3, [r3, #1]
 8000a00:	717b      	strb	r3, [r7, #5]

	if (head_y == (N-1))
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d024      	beq.n	8000a52 <MoveRight+0x72>
	}

	else
	{

		game_board[M-1][tail_y] = 0;
 8000a08:	797b      	ldrb	r3, [r7, #5]
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <MoveRight+0x80>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a18:	f002 fd24 	bl	8003464 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect( (tail_y)*SQUARE_SIZE, (M-1)*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);
 8000a1c:	797b      	ldrb	r3, [r7, #5]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	b298      	uxth	r0, r3
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	2214      	movs	r2, #20
 8000a2e:	21dc      	movs	r1, #220	; 0xdc
 8000a30:	f002 ff74 	bl	800391c <BSP_LCD_FillRect>

		platform.y += 1;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MoveRight+0x7c>)
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MoveRight+0x7c>)
 8000a3e:	705a      	strb	r2, [r3, #1]

		game_board[M-1][next_col] = 1;
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <MoveRight+0x80>)
 8000a44:	4413      	add	r3, r2
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

		DrawPlatform();
 8000a4c:	f7ff fef0 	bl	8000830 <DrawPlatform>
 8000a50:	e000      	b.n	8000a54 <MoveRight+0x74>
		return;
 8000a52:	bf00      	nop
	}
}
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	2000015c 	.word	0x2000015c

08000a64 <BallMovement>:

void BallMovement(void){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	uint8_t curr_x = ball.x_pos;
 8000a6a:	4bb9      	ldr	r3, [pc, #740]	; (8000d50 <BallMovement+0x2ec>)
 8000a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8000a70:	71fb      	strb	r3, [r7, #7]
	uint8_t curr_y = ball.y_pos;
 8000a72:	4bb7      	ldr	r3, [pc, #732]	; (8000d50 <BallMovement+0x2ec>)
 8000a74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a78:	71bb      	strb	r3, [r7, #6]

	if (bricks_counter == 0)
 8000a7a:	4bb6      	ldr	r3, [pc, #728]	; (8000d54 <BallMovement+0x2f0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <BallMovement+0x28>
	{
		game_state = 2;
 8000a82:	4bb5      	ldr	r3, [pc, #724]	; (8000d58 <BallMovement+0x2f4>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	701a      	strb	r2, [r3, #0]
		GameOver();
 8000a88:	f000 fc74 	bl	8001374 <GameOver>
	}

	if (ball.x_pos+ball.x_speed == M)
 8000a8c:	4bb0      	ldr	r3, [pc, #704]	; (8000d50 <BallMovement+0x2ec>)
 8000a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4bae      	ldr	r3, [pc, #696]	; (8000d50 <BallMovement+0x2ec>)
 8000a96:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2b0c      	cmp	r3, #12
 8000a9e:	d104      	bne.n	8000aaa <BallMovement+0x46>
	{
		game_state = 1;
 8000aa0:	4bad      	ldr	r3, [pc, #692]	; (8000d58 <BallMovement+0x2f4>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
		GameOver();
 8000aa6:	f000 fc65 	bl	8001374 <GameOver>
	}
	if (game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] == 1)
 8000aaa:	4ba9      	ldr	r3, [pc, #676]	; (8000d50 <BallMovement+0x2ec>)
 8000aac:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4ba7      	ldr	r3, [pc, #668]	; (8000d50 <BallMovement+0x2ec>)
 8000ab4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ab8:	441a      	add	r2, r3
 8000aba:	4ba5      	ldr	r3, [pc, #660]	; (8000d50 <BallMovement+0x2ec>)
 8000abc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4ba3      	ldr	r3, [pc, #652]	; (8000d50 <BallMovement+0x2ec>)
 8000ac4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000ac8:	440b      	add	r3, r1
 8000aca:	49a4      	ldr	r1, [pc, #656]	; (8000d5c <BallMovement+0x2f8>)
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	440a      	add	r2, r1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d108      	bne.n	8000aec <BallMovement+0x88>
	{
		ball.x_speed *= -1;
 8000ada:	4b9d      	ldr	r3, [pc, #628]	; (8000d50 <BallMovement+0x2ec>)
 8000adc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	b25a      	sxtb	r2, r3
 8000ae8:	4b99      	ldr	r3, [pc, #612]	; (8000d50 <BallMovement+0x2ec>)
 8000aea:	709a      	strb	r2, [r3, #2]
	}

	if (game_board[curr_x+1][curr_y] == 0 && game_board[curr_x-1][curr_y] == 0 && game_board[curr_x][curr_y+1] == 0 && game_board[curr_x][curr_y-1] == 0 && game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] == 2)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	499a      	ldr	r1, [pc, #616]	; (8000d5c <BallMovement+0x2f8>)
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	440a      	add	r2, r1
 8000af8:	4413      	add	r3, r2
 8000afa:	f993 3000 	ldrsb.w	r3, [r3]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d16d      	bne.n	8000bde <BallMovement+0x17a>
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	4994      	ldr	r1, [pc, #592]	; (8000d5c <BallMovement+0x2f8>)
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	440a      	add	r2, r1
 8000b0e:	4413      	add	r3, r2
 8000b10:	f993 3000 	ldrsb.w	r3, [r3]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d162      	bne.n	8000bde <BallMovement+0x17a>
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	498f      	ldr	r1, [pc, #572]	; (8000d5c <BallMovement+0x2f8>)
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	440a      	add	r2, r1
 8000b24:	4413      	add	r3, r2
 8000b26:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d157      	bne.n	8000bde <BallMovement+0x17a>
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	4989      	ldr	r1, [pc, #548]	; (8000d5c <BallMovement+0x2f8>)
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	440a      	add	r2, r1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14c      	bne.n	8000bde <BallMovement+0x17a>
 8000b44:	4b82      	ldr	r3, [pc, #520]	; (8000d50 <BallMovement+0x2ec>)
 8000b46:	f993 3000 	ldrsb.w	r3, [r3]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <BallMovement+0x2ec>)
 8000b4e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b7e      	ldr	r3, [pc, #504]	; (8000d50 <BallMovement+0x2ec>)
 8000b56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4b7c      	ldr	r3, [pc, #496]	; (8000d50 <BallMovement+0x2ec>)
 8000b5e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000b62:	440b      	add	r3, r1
 8000b64:	497d      	ldr	r1, [pc, #500]	; (8000d5c <BallMovement+0x2f8>)
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	440a      	add	r2, r1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d134      	bne.n	8000bde <BallMovement+0x17a>
	{
		game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] = 0;
 8000b74:	4b76      	ldr	r3, [pc, #472]	; (8000d50 <BallMovement+0x2ec>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b74      	ldr	r3, [pc, #464]	; (8000d50 <BallMovement+0x2ec>)
 8000b7e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b82:	441a      	add	r2, r3
 8000b84:	4b72      	ldr	r3, [pc, #456]	; (8000d50 <BallMovement+0x2ec>)
 8000b86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4b70      	ldr	r3, [pc, #448]	; (8000d50 <BallMovement+0x2ec>)
 8000b8e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000b92:	440b      	add	r3, r1
 8000b94:	4971      	ldr	r1, [pc, #452]	; (8000d5c <BallMovement+0x2f8>)
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	440a      	add	r2, r1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
		points++;
 8000ba0:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <BallMovement+0x2fc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a6e      	ldr	r2, [pc, #440]	; (8000d60 <BallMovement+0x2fc>)
 8000ba8:	6013      	str	r3, [r2, #0]
		bricks_counter--;
 8000baa:	4b6a      	ldr	r3, [pc, #424]	; (8000d54 <BallMovement+0x2f0>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b68      	ldr	r3, [pc, #416]	; (8000d54 <BallMovement+0x2f0>)
 8000bb4:	701a      	strb	r2, [r3, #0]
		EreaseBlocks();
 8000bb6:	f000 fb9d 	bl	80012f4 <EreaseBlocks>
		ball.x_speed *= -1;
 8000bba:	4b65      	ldr	r3, [pc, #404]	; (8000d50 <BallMovement+0x2ec>)
 8000bbc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <BallMovement+0x2ec>)
 8000bca:	709a      	strb	r2, [r3, #2]
		ball.y_speed *= -1;
 8000bcc:	4b60      	ldr	r3, [pc, #384]	; (8000d50 <BallMovement+0x2ec>)
 8000bce:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	4b5d      	ldr	r3, [pc, #372]	; (8000d50 <BallMovement+0x2ec>)
 8000bdc:	70da      	strb	r2, [r3, #3]

	}
	if (game_board[curr_x-1][curr_y] == 2 || game_board[curr_x+1][curr_y] == 2)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	79bb      	ldrb	r3, [r7, #6]
 8000be4:	495d      	ldr	r1, [pc, #372]	; (8000d5c <BallMovement+0x2f8>)
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	440a      	add	r2, r1
 8000bea:	4413      	add	r3, r2
 8000bec:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d00a      	beq.n	8000c0a <BallMovement+0x1a6>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	4958      	ldr	r1, [pc, #352]	; (8000d5c <BallMovement+0x2f8>)
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	440a      	add	r2, r1
 8000c00:	4413      	add	r3, r2
 8000c02:	f993 3000 	ldrsb.w	r3, [r3]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d14a      	bne.n	8000ca0 <BallMovement+0x23c>
	{
		ball.x_speed *= -1;
 8000c0a:	4b51      	ldr	r3, [pc, #324]	; (8000d50 <BallMovement+0x2ec>)
 8000c0c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	425b      	negs	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	b25a      	sxtb	r2, r3
 8000c18:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <BallMovement+0x2ec>)
 8000c1a:	709a      	strb	r2, [r3, #2]
		if (game_board[curr_x-1][curr_y] == 2)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	494e      	ldr	r1, [pc, #312]	; (8000d5c <BallMovement+0x2f8>)
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	440a      	add	r2, r1
 8000c28:	4413      	add	r3, r2
 8000c2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d115      	bne.n	8000c5e <BallMovement+0x1fa>
		{
			game_board[curr_x-1][curr_y] = 0;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	1e5a      	subs	r2, r3, #1
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	4948      	ldr	r1, [pc, #288]	; (8000d5c <BallMovement+0x2f8>)
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	440a      	add	r2, r1
 8000c3e:	4413      	add	r3, r2
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
			points++;
 8000c44:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <BallMovement+0x2fc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a45      	ldr	r2, [pc, #276]	; (8000d60 <BallMovement+0x2fc>)
 8000c4c:	6013      	str	r3, [r2, #0]
			bricks_counter--;
 8000c4e:	4b41      	ldr	r3, [pc, #260]	; (8000d54 <BallMovement+0x2f0>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <BallMovement+0x2f0>)
 8000c58:	701a      	strb	r2, [r3, #0]
			EreaseBlocks();
 8000c5a:	f000 fb4b 	bl	80012f4 <EreaseBlocks>
		}
		if (game_board[curr_x+1][curr_y] == 2)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	493d      	ldr	r1, [pc, #244]	; (8000d5c <BallMovement+0x2f8>)
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	440a      	add	r2, r1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d115      	bne.n	8000ca0 <BallMovement+0x23c>
		{
			game_board[curr_x+1][curr_y] = 0;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	4938      	ldr	r1, [pc, #224]	; (8000d5c <BallMovement+0x2f8>)
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	440a      	add	r2, r1
 8000c80:	4413      	add	r3, r2
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
			points++;
 8000c86:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <BallMovement+0x2fc>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a34      	ldr	r2, [pc, #208]	; (8000d60 <BallMovement+0x2fc>)
 8000c8e:	6013      	str	r3, [r2, #0]
			bricks_counter--;
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <BallMovement+0x2f0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <BallMovement+0x2f0>)
 8000c9a:	701a      	strb	r2, [r3, #0]
			EreaseBlocks();
 8000c9c:	f000 fb2a 	bl	80012f4 <EreaseBlocks>
		}
	}
	if ((ball.x_pos+ball.x_speed) == -1)
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <BallMovement+0x2ec>)
 8000ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <BallMovement+0x2ec>)
 8000caa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000cae:	4413      	add	r3, r2
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	f040 8097 	bne.w	8000de6 <BallMovement+0x382>
	{
		ball.x_speed *= -1;
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <BallMovement+0x2ec>)
 8000cba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	425b      	negs	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	b25a      	sxtb	r2, r3
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <BallMovement+0x2ec>)
 8000cc8:	709a      	strb	r2, [r3, #2]
		if (game_board[curr_x+1][curr_y] == 0 && game_board[curr_x][curr_y-1] == 0 && game_board[curr_x][curr_y+1] == 0 && game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] == 2)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	4922      	ldr	r1, [pc, #136]	; (8000d5c <BallMovement+0x2f8>)
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	440a      	add	r2, r1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d16e      	bne.n	8000dbe <BallMovement+0x35a>
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	79bb      	ldrb	r3, [r7, #6]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	491d      	ldr	r1, [pc, #116]	; (8000d5c <BallMovement+0x2f8>)
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	440a      	add	r2, r1
 8000cec:	4413      	add	r3, r2
 8000cee:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d163      	bne.n	8000dbe <BallMovement+0x35a>
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4917      	ldr	r1, [pc, #92]	; (8000d5c <BallMovement+0x2f8>)
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	440a      	add	r2, r1
 8000d02:	4413      	add	r3, r2
 8000d04:	f993 3000 	ldrsb.w	r3, [r3]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d158      	bne.n	8000dbe <BallMovement+0x35a>
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <BallMovement+0x2ec>)
 8000d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <BallMovement+0x2ec>)
 8000d16:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d1a:	441a      	add	r2, r3
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <BallMovement+0x2ec>)
 8000d1e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <BallMovement+0x2ec>)
 8000d26:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d2a:	440b      	add	r3, r1
 8000d2c:	490b      	ldr	r1, [pc, #44]	; (8000d5c <BallMovement+0x2f8>)
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	440a      	add	r2, r1
 8000d32:	4413      	add	r3, r2
 8000d34:	f993 3000 	ldrsb.w	r3, [r3]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d140      	bne.n	8000dbe <BallMovement+0x35a>
		{
			game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] = 0;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <BallMovement+0x2ec>)
 8000d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <BallMovement+0x2ec>)
 8000d46:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	e00a      	b.n	8000d64 <BallMovement+0x300>
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	2000021c 	.word	0x2000021c
 8000d58:	20000224 	.word	0x20000224
 8000d5c:	2000015c 	.word	0x2000015c
 8000d60:	20000220 	.word	0x20000220
 8000d64:	4bb6      	ldr	r3, [pc, #728]	; (8001040 <BallMovement+0x5dc>)
 8000d66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4bb4      	ldr	r3, [pc, #720]	; (8001040 <BallMovement+0x5dc>)
 8000d6e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d72:	440b      	add	r3, r1
 8000d74:	49b3      	ldr	r1, [pc, #716]	; (8001044 <BallMovement+0x5e0>)
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	440a      	add	r2, r1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			points++;
 8000d80:	4bb1      	ldr	r3, [pc, #708]	; (8001048 <BallMovement+0x5e4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4ab0      	ldr	r2, [pc, #704]	; (8001048 <BallMovement+0x5e4>)
 8000d88:	6013      	str	r3, [r2, #0]
			bricks_counter--;
 8000d8a:	4bb0      	ldr	r3, [pc, #704]	; (800104c <BallMovement+0x5e8>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4bae      	ldr	r3, [pc, #696]	; (800104c <BallMovement+0x5e8>)
 8000d94:	701a      	strb	r2, [r3, #0]
			EreaseBlocks();
 8000d96:	f000 faad 	bl	80012f4 <EreaseBlocks>
			ball.x_speed *= -1;
 8000d9a:	4ba9      	ldr	r3, [pc, #676]	; (8001040 <BallMovement+0x5dc>)
 8000d9c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	425b      	negs	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	b25a      	sxtb	r2, r3
 8000da8:	4ba5      	ldr	r3, [pc, #660]	; (8001040 <BallMovement+0x5dc>)
 8000daa:	709a      	strb	r2, [r3, #2]
			ball.y_speed *= -1;
 8000dac:	4ba4      	ldr	r3, [pc, #656]	; (8001040 <BallMovement+0x5dc>)
 8000dae:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	425b      	negs	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	b25a      	sxtb	r2, r3
 8000dba:	4ba1      	ldr	r3, [pc, #644]	; (8001040 <BallMovement+0x5dc>)
 8000dbc:	70da      	strb	r2, [r3, #3]
		}
		if ((ball.x_pos+ball.x_speed) == -1)
 8000dbe:	4ba0      	ldr	r3, [pc, #640]	; (8001040 <BallMovement+0x5dc>)
 8000dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b9e      	ldr	r3, [pc, #632]	; (8001040 <BallMovement+0x5dc>)
 8000dc8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000dcc:	4413      	add	r3, r2
 8000dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd2:	d108      	bne.n	8000de6 <BallMovement+0x382>
		{
			ball.x_speed *= -1;
 8000dd4:	4b9a      	ldr	r3, [pc, #616]	; (8001040 <BallMovement+0x5dc>)
 8000dd6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	425b      	negs	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	b25a      	sxtb	r2, r3
 8000de2:	4b97      	ldr	r3, [pc, #604]	; (8001040 <BallMovement+0x5dc>)
 8000de4:	709a      	strb	r2, [r3, #2]
		}

	}

	if ((ball.y_pos+ball.y_speed) == -1)
 8000de6:	4b96      	ldr	r3, [pc, #600]	; (8001040 <BallMovement+0x5dc>)
 8000de8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b94      	ldr	r3, [pc, #592]	; (8001040 <BallMovement+0x5dc>)
 8000df0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000df4:	4413      	add	r3, r2
 8000df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfa:	f040 808b 	bne.w	8000f14 <BallMovement+0x4b0>
			{
				ball.y_speed *= -1;
 8000dfe:	4b90      	ldr	r3, [pc, #576]	; (8001040 <BallMovement+0x5dc>)
 8000e00:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	425b      	negs	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b25a      	sxtb	r2, r3
 8000e0c:	4b8c      	ldr	r3, [pc, #560]	; (8001040 <BallMovement+0x5dc>)
 8000e0e:	70da      	strb	r2, [r3, #3]
				if (game_board[curr_x+1][curr_y] == 0 && game_board[curr_x-1][curr_y] == 0 && game_board[curr_x][curr_y+1] == 0 && game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] == 2)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	498b      	ldr	r1, [pc, #556]	; (8001044 <BallMovement+0x5e0>)
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	440a      	add	r2, r1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d162      	bne.n	8000eec <BallMovement+0x488>
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	1e5a      	subs	r2, r3, #1
 8000e2a:	79bb      	ldrb	r3, [r7, #6]
 8000e2c:	4985      	ldr	r1, [pc, #532]	; (8001044 <BallMovement+0x5e0>)
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	440a      	add	r2, r1
 8000e32:	4413      	add	r3, r2
 8000e34:	f993 3000 	ldrsb.w	r3, [r3]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d157      	bne.n	8000eec <BallMovement+0x488>
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4980      	ldr	r1, [pc, #512]	; (8001044 <BallMovement+0x5e0>)
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	440a      	add	r2, r1
 8000e48:	4413      	add	r3, r2
 8000e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d14c      	bne.n	8000eec <BallMovement+0x488>
 8000e52:	4b7b      	ldr	r3, [pc, #492]	; (8001040 <BallMovement+0x5dc>)
 8000e54:	f993 3000 	ldrsb.w	r3, [r3]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b79      	ldr	r3, [pc, #484]	; (8001040 <BallMovement+0x5dc>)
 8000e5c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000e60:	441a      	add	r2, r3
 8000e62:	4b77      	ldr	r3, [pc, #476]	; (8001040 <BallMovement+0x5dc>)
 8000e64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4b75      	ldr	r3, [pc, #468]	; (8001040 <BallMovement+0x5dc>)
 8000e6c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000e70:	440b      	add	r3, r1
 8000e72:	4974      	ldr	r1, [pc, #464]	; (8001044 <BallMovement+0x5e0>)
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	440a      	add	r2, r1
 8000e78:	4413      	add	r3, r2
 8000e7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d134      	bne.n	8000eec <BallMovement+0x488>
				{
					game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] = 0;
 8000e82:	4b6f      	ldr	r3, [pc, #444]	; (8001040 <BallMovement+0x5dc>)
 8000e84:	f993 3000 	ldrsb.w	r3, [r3]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b6d      	ldr	r3, [pc, #436]	; (8001040 <BallMovement+0x5dc>)
 8000e8c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000e90:	441a      	add	r2, r3
 8000e92:	4b6b      	ldr	r3, [pc, #428]	; (8001040 <BallMovement+0x5dc>)
 8000e94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4b69      	ldr	r3, [pc, #420]	; (8001040 <BallMovement+0x5dc>)
 8000e9c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000ea0:	440b      	add	r3, r1
 8000ea2:	4968      	ldr	r1, [pc, #416]	; (8001044 <BallMovement+0x5e0>)
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	440a      	add	r2, r1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
					points++;
 8000eae:	4b66      	ldr	r3, [pc, #408]	; (8001048 <BallMovement+0x5e4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a64      	ldr	r2, [pc, #400]	; (8001048 <BallMovement+0x5e4>)
 8000eb6:	6013      	str	r3, [r2, #0]
					bricks_counter--;
 8000eb8:	4b64      	ldr	r3, [pc, #400]	; (800104c <BallMovement+0x5e8>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b62      	ldr	r3, [pc, #392]	; (800104c <BallMovement+0x5e8>)
 8000ec2:	701a      	strb	r2, [r3, #0]
					EreaseBlocks();
 8000ec4:	f000 fa16 	bl	80012f4 <EreaseBlocks>
					ball.x_speed *= -1;
 8000ec8:	4b5d      	ldr	r3, [pc, #372]	; (8001040 <BallMovement+0x5dc>)
 8000eca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <BallMovement+0x5dc>)
 8000ed8:	709a      	strb	r2, [r3, #2]
					ball.y_speed *= -1;
 8000eda:	4b59      	ldr	r3, [pc, #356]	; (8001040 <BallMovement+0x5dc>)
 8000edc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	4b55      	ldr	r3, [pc, #340]	; (8001040 <BallMovement+0x5dc>)
 8000eea:	70da      	strb	r2, [r3, #3]
				}
				if ((ball.y_pos+ball.y_speed) == -1)
 8000eec:	4b54      	ldr	r3, [pc, #336]	; (8001040 <BallMovement+0x5dc>)
 8000eee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b52      	ldr	r3, [pc, #328]	; (8001040 <BallMovement+0x5dc>)
 8000ef6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000efa:	4413      	add	r3, r2
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d108      	bne.n	8000f14 <BallMovement+0x4b0>
					{
					ball.y_speed *= -1;
 8000f02:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <BallMovement+0x5dc>)
 8000f04:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	b25a      	sxtb	r2, r3
 8000f10:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <BallMovement+0x5dc>)
 8000f12:	70da      	strb	r2, [r3, #3]
					}

			}
	if ((ball.y_pos+ball.y_speed) == N)
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <BallMovement+0x5dc>)
 8000f16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b48      	ldr	r3, [pc, #288]	; (8001040 <BallMovement+0x5dc>)
 8000f1e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000f22:	4413      	add	r3, r2
 8000f24:	2b10      	cmp	r3, #16
 8000f26:	f040 8093 	bne.w	8001050 <BallMovement+0x5ec>
				{
					ball.y_speed *= -1;
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <BallMovement+0x5dc>)
 8000f2c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	425b      	negs	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	b25a      	sxtb	r2, r3
 8000f38:	4b41      	ldr	r3, [pc, #260]	; (8001040 <BallMovement+0x5dc>)
 8000f3a:	70da      	strb	r2, [r3, #3]
					if (game_board[curr_x+1][curr_y] == 0 && game_board[curr_x-1][curr_y] == 0 && game_board[curr_x][curr_y-1] == 0 && game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] == 2)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	4940      	ldr	r1, [pc, #256]	; (8001044 <BallMovement+0x5e0>)
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	440a      	add	r2, r1
 8000f48:	4413      	add	r3, r2
 8000f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d162      	bne.n	8001018 <BallMovement+0x5b4>
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	1e5a      	subs	r2, r3, #1
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	493a      	ldr	r1, [pc, #232]	; (8001044 <BallMovement+0x5e0>)
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	440a      	add	r2, r1
 8000f5e:	4413      	add	r3, r2
 8000f60:	f993 3000 	ldrsb.w	r3, [r3]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d157      	bne.n	8001018 <BallMovement+0x5b4>
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	4935      	ldr	r1, [pc, #212]	; (8001044 <BallMovement+0x5e0>)
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	440a      	add	r2, r1
 8000f74:	4413      	add	r3, r2
 8000f76:	f993 3000 	ldrsb.w	r3, [r3]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d14c      	bne.n	8001018 <BallMovement+0x5b4>
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <BallMovement+0x5dc>)
 8000f80:	f993 3000 	ldrsb.w	r3, [r3]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <BallMovement+0x5dc>)
 8000f88:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f8c:	441a      	add	r2, r3
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <BallMovement+0x5dc>)
 8000f90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <BallMovement+0x5dc>)
 8000f98:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000f9c:	440b      	add	r3, r1
 8000f9e:	4929      	ldr	r1, [pc, #164]	; (8001044 <BallMovement+0x5e0>)
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	440a      	add	r2, r1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d134      	bne.n	8001018 <BallMovement+0x5b4>
					{
						game_board[ball.x_pos+ball.x_speed][ball.y_pos+ball.y_speed] = 0;
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <BallMovement+0x5dc>)
 8000fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <BallMovement+0x5dc>)
 8000fb8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000fbc:	441a      	add	r2, r3
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <BallMovement+0x5dc>)
 8000fc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <BallMovement+0x5dc>)
 8000fc8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000fcc:	440b      	add	r3, r1
 8000fce:	491d      	ldr	r1, [pc, #116]	; (8001044 <BallMovement+0x5e0>)
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	440a      	add	r2, r1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
						points++;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <BallMovement+0x5e4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <BallMovement+0x5e4>)
 8000fe2:	6013      	str	r3, [r2, #0]
						bricks_counter--;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <BallMovement+0x5e8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <BallMovement+0x5e8>)
 8000fee:	701a      	strb	r2, [r3, #0]
						EreaseBlocks();
 8000ff0:	f000 f980 	bl	80012f4 <EreaseBlocks>
						ball.x_speed *= -1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <BallMovement+0x5dc>)
 8000ff6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	b25a      	sxtb	r2, r3
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <BallMovement+0x5dc>)
 8001004:	709a      	strb	r2, [r3, #2]
						ball.y_speed *= -1;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <BallMovement+0x5dc>)
 8001008:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	425b      	negs	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	b25a      	sxtb	r2, r3
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <BallMovement+0x5dc>)
 8001016:	70da      	strb	r2, [r3, #3]
					}
					if ((ball.y_pos+ball.y_speed) == N)
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <BallMovement+0x5dc>)
 800101a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800101e:	461a      	mov	r2, r3
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <BallMovement+0x5dc>)
 8001022:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001026:	4413      	add	r3, r2
 8001028:	2b10      	cmp	r3, #16
 800102a:	d111      	bne.n	8001050 <BallMovement+0x5ec>
					{
					ball.y_speed *= -1;
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <BallMovement+0x5dc>)
 800102e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	425b      	negs	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	b25a      	sxtb	r2, r3
 800103a:	4b01      	ldr	r3, [pc, #4]	; (8001040 <BallMovement+0x5dc>)
 800103c:	70da      	strb	r2, [r3, #3]
 800103e:	e007      	b.n	8001050 <BallMovement+0x5ec>
 8001040:	20000008 	.word	0x20000008
 8001044:	2000015c 	.word	0x2000015c
 8001048:	20000220 	.word	0x20000220
 800104c:	2000021c 	.word	0x2000021c
					}

				}
	if (game_board[curr_x][curr_y+1] == 2 || game_board[curr_x][curr_y-1] == 2)
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	3301      	adds	r3, #1
 8001056:	4958      	ldr	r1, [pc, #352]	; (80011b8 <BallMovement+0x754>)
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	440a      	add	r2, r1
 800105c:	4413      	add	r3, r2
 800105e:	f993 3000 	ldrsb.w	r3, [r3]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d00a      	beq.n	800107c <BallMovement+0x618>
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	3b01      	subs	r3, #1
 800106c:	4952      	ldr	r1, [pc, #328]	; (80011b8 <BallMovement+0x754>)
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	440a      	add	r2, r1
 8001072:	4413      	add	r3, r2
 8001074:	f993 3000 	ldrsb.w	r3, [r3]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d14a      	bne.n	8001112 <BallMovement+0x6ae>
	{
		ball.y_speed *= -1;
 800107c:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <BallMovement+0x758>)
 800107e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	425b      	negs	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b25a      	sxtb	r2, r3
 800108a:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <BallMovement+0x758>)
 800108c:	70da      	strb	r2, [r3, #3]
		if (game_board[curr_x][curr_y+1] == 2)
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	3301      	adds	r3, #1
 8001094:	4948      	ldr	r1, [pc, #288]	; (80011b8 <BallMovement+0x754>)
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	440a      	add	r2, r1
 800109a:	4413      	add	r3, r2
 800109c:	f993 3000 	ldrsb.w	r3, [r3]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d115      	bne.n	80010d0 <BallMovement+0x66c>
		{
			game_board[curr_x][curr_y+1] = 0;
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4943      	ldr	r1, [pc, #268]	; (80011b8 <BallMovement+0x754>)
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	440a      	add	r2, r1
 80010b0:	4413      	add	r3, r2
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
			points++;
 80010b6:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <BallMovement+0x75c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a40      	ldr	r2, [pc, #256]	; (80011c0 <BallMovement+0x75c>)
 80010be:	6013      	str	r3, [r2, #0]
			bricks_counter--;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <BallMovement+0x760>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <BallMovement+0x760>)
 80010ca:	701a      	strb	r2, [r3, #0]
			EreaseBlocks();
 80010cc:	f000 f912 	bl	80012f4 <EreaseBlocks>
		}
		if (game_board[curr_x][curr_y-1] == 2)
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4938      	ldr	r1, [pc, #224]	; (80011b8 <BallMovement+0x754>)
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	440a      	add	r2, r1
 80010dc:	4413      	add	r3, r2
 80010de:	f993 3000 	ldrsb.w	r3, [r3]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d115      	bne.n	8001112 <BallMovement+0x6ae>
		{
			game_board[curr_x][curr_y-1] = 0;
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4932      	ldr	r1, [pc, #200]	; (80011b8 <BallMovement+0x754>)
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	440a      	add	r2, r1
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
			points++;
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <BallMovement+0x75c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <BallMovement+0x75c>)
 8001100:	6013      	str	r3, [r2, #0]
			bricks_counter--;
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <BallMovement+0x760>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	3b01      	subs	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <BallMovement+0x760>)
 800110c:	701a      	strb	r2, [r3, #0]
			EreaseBlocks();
 800110e:	f000 f8f1 	bl	80012f4 <EreaseBlocks>
		}
	}

	ball.x_pos += ball.x_speed;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <BallMovement+0x758>)
 8001114:	f993 3000 	ldrsb.w	r3, [r3]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <BallMovement+0x758>)
 800111c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4413      	add	r3, r2
 8001124:	b2db      	uxtb	r3, r3
 8001126:	b25a      	sxtb	r2, r3
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <BallMovement+0x758>)
 800112a:	701a      	strb	r2, [r3, #0]
	ball.y_pos += ball.y_speed;
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <BallMovement+0x758>)
 800112e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <BallMovement+0x758>)
 8001136:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b25a      	sxtb	r2, r3
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <BallMovement+0x758>)
 8001144:	705a      	strb	r2, [r3, #1]

	game_board[curr_x][curr_y] = 0;
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	491b      	ldr	r1, [pc, #108]	; (80011b8 <BallMovement+0x754>)
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	440a      	add	r2, r1
 8001150:	4413      	add	r3, r2
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001156:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800115a:	f002 f983 	bl	8003464 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(curr_y*SQUARE_SIZE+10, curr_x*SQUARE_SIZE+10, CIRCLE_SIZE);
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	b29b      	uxth	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	b29b      	uxth	r3, r3
 800116c:	330a      	adds	r3, #10
 800116e:	b298      	uxth	r0, r3
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	b29b      	uxth	r3, r3
 800117e:	330a      	adds	r3, #10
 8001180:	b29b      	uxth	r3, r3
 8001182:	220a      	movs	r2, #10
 8001184:	4619      	mov	r1, r3
 8001186:	f002 fbf3 	bl	8003970 <BSP_LCD_FillCircle>

	game_board[ball.x_pos][ball.y_pos] = 3;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <BallMovement+0x758>)
 800118c:	f993 3000 	ldrsb.w	r3, [r3]
 8001190:	4618      	mov	r0, r3
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <BallMovement+0x758>)
 8001194:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001198:	4619      	mov	r1, r3
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <BallMovement+0x754>)
 800119c:	0103      	lsls	r3, r0, #4
 800119e:	4413      	add	r3, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	2203      	movs	r2, #3
 80011a4:	701a      	strb	r2, [r3, #0]
	DrawBall();
 80011a6:	f7ff fb99 	bl	80008dc <DrawBall>
	HAL_Delay(100);
 80011aa:	2064      	movs	r0, #100	; 0x64
 80011ac:	f002 fe04 	bl	8003db8 <HAL_Delay>
	return;
 80011b0:	bf00      	nop
}
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000015c 	.word	0x2000015c
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000220 	.word	0x20000220
 80011c4:	2000021c 	.word	0x2000021c

080011c8 <GenerateBricks>:

void GenerateBricks(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
	uint8_t i = 0, j = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	2300      	movs	r3, #0
 80011d4:	71bb      	strb	r3, [r7, #6]

	for (i= 0; i < M/4; i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	e023      	b.n	8001224 <GenerateBricks+0x5c>
	{
		for (j = 0; j < N; j++)
 80011dc:	2300      	movs	r3, #0
 80011de:	71bb      	strb	r3, [r7, #6]
 80011e0:	e01a      	b.n	8001218 <GenerateBricks+0x50>
		{
			if (game_board[i][j] == 0)
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	4921      	ldr	r1, [pc, #132]	; (800126c <GenerateBricks+0xa4>)
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	440a      	add	r2, r1
 80011ec:	4413      	add	r3, r2
 80011ee:	f993 3000 	ldrsb.w	r3, [r3]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <GenerateBricks+0x4a>
			{
				game_board[i][j] = 2;
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	491c      	ldr	r1, [pc, #112]	; (800126c <GenerateBricks+0xa4>)
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	440a      	add	r2, r1
 8001200:	4413      	add	r3, r2
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
				bricks_counter++;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <GenerateBricks+0xa8>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <GenerateBricks+0xa8>)
 8001210:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < N; j++)
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	3301      	adds	r3, #1
 8001216:	71bb      	strb	r3, [r7, #6]
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	d9e1      	bls.n	80011e2 <GenerateBricks+0x1a>
	for (i= 0; i < M/4; i++)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	3301      	adds	r3, #1
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d9d8      	bls.n	80011dc <GenerateBricks+0x14>
			}
		}
	}

	for (j = 4; j < 11; j++)
 800122a:	2304      	movs	r3, #4
 800122c:	71bb      	strb	r3, [r7, #6]
 800122e:	e015      	b.n	800125c <GenerateBricks+0x94>
	{
		if (game_board[3][j] == 0)
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <GenerateBricks+0xa4>)
 8001234:	4413      	add	r3, r2
 8001236:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <GenerateBricks+0x8e>
		{
			game_board[3][j] = 2;
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <GenerateBricks+0xa4>)
 8001242:	4413      	add	r3, r2
 8001244:	2202      	movs	r2, #2
 8001246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bricks_counter++;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <GenerateBricks+0xa8>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <GenerateBricks+0xa8>)
 8001254:	701a      	strb	r2, [r3, #0]
	for (j = 4; j < 11; j++)
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	3301      	adds	r3, #1
 800125a:	71bb      	strb	r3, [r7, #6]
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d9e6      	bls.n	8001230 <GenerateBricks+0x68>
		}
	}
	return;
 8001262:	bf00      	nop
}
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	2000015c 	.word	0x2000015c
 8001270:	2000021c 	.word	0x2000021c

08001274 <DrawBricks>:
void DrawBricks(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	uint8_t i = 0, j = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	2300      	movs	r3, #0
 8001280:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < M; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	e02b      	b.n	80012e0 <DrawBricks+0x6c>
		for (j = 0; j < N; j++)
 8001288:	2300      	movs	r3, #0
 800128a:	71bb      	strb	r3, [r7, #6]
 800128c:	e022      	b.n	80012d4 <DrawBricks+0x60>
		{
			if (game_board[i][j] == 2)
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	4917      	ldr	r1, [pc, #92]	; (80012f0 <DrawBricks+0x7c>)
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	440a      	add	r2, r1
 8001298:	4413      	add	r3, r2
 800129a:	f993 3000 	ldrsb.w	r3, [r3]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d115      	bne.n	80012ce <DrawBricks+0x5a>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80012a2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80012a6:	f002 f8dd 	bl	8003464 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(j*SQUARE_SIZE, i*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	b298      	uxth	r0, r3
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	b299      	uxth	r1, r3
 80012c6:	2314      	movs	r3, #20
 80012c8:	2214      	movs	r2, #20
 80012ca:	f002 fb27 	bl	800391c <BSP_LCD_FillRect>
		for (j = 0; j < N; j++)
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	3301      	adds	r3, #1
 80012d2:	71bb      	strb	r3, [r7, #6]
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	d9d9      	bls.n	800128e <DrawBricks+0x1a>
	for (i = 0; i < M; i++)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	3301      	adds	r3, #1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b0b      	cmp	r3, #11
 80012e4:	d9d0      	bls.n	8001288 <DrawBricks+0x14>
			}
		}
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000015c 	.word	0x2000015c

080012f4 <EreaseBlocks>:

void EreaseBlocks(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	uint8_t i = 0, j = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	2300      	movs	r3, #0
 8001300:	71bb      	strb	r3, [r7, #6]

		for (i = 0; i < M; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e02b      	b.n	8001360 <EreaseBlocks+0x6c>
			for (j = 0; j < N; j++)
 8001308:	2300      	movs	r3, #0
 800130a:	71bb      	strb	r3, [r7, #6]
 800130c:	e022      	b.n	8001354 <EreaseBlocks+0x60>
			{
				if (game_board[i][j] == 0)
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	4917      	ldr	r1, [pc, #92]	; (8001370 <EreaseBlocks+0x7c>)
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	440a      	add	r2, r1
 8001318:	4413      	add	r3, r2
 800131a:	f993 3000 	ldrsb.w	r3, [r3]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d115      	bne.n	800134e <EreaseBlocks+0x5a>
				{
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001322:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001326:	f002 f89d 	bl	8003464 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(j*SQUARE_SIZE, i*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	b29b      	uxth	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	b298      	uxth	r0, r3
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	b29b      	uxth	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	b299      	uxth	r1, r3
 8001346:	2314      	movs	r3, #20
 8001348:	2214      	movs	r2, #20
 800134a:	f002 fae7 	bl	800391c <BSP_LCD_FillRect>
			for (j = 0; j < N; j++)
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	3301      	adds	r3, #1
 8001352:	71bb      	strb	r3, [r7, #6]
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	d9d9      	bls.n	800130e <EreaseBlocks+0x1a>
		for (i = 0; i < M; i++)
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	3301      	adds	r3, #1
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b0b      	cmp	r3, #11
 8001364:	d9d0      	bls.n	8001308 <EreaseBlocks+0x14>
				}
			}
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000015c 	.word	0x2000015c

08001374 <GameOver>:

void GameOver(void)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800137a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800137e:	f002 f881 	bl	8003484 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001382:	201f      	movs	r0, #31
 8001384:	f002 f86e 	bl	8003464 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font12);
 8001388:	4866      	ldr	r0, [pc, #408]	; (8001524 <GameOver+0x1b0>)
 800138a:	f002 f88b 	bl	80034a4 <BSP_LCD_SetFont>
	char result1[10];
	char result2[10];
	sprintf(result1, "%d", points/10);
 800138e:	4b66      	ldr	r3, [pc, #408]	; (8001528 <GameOver+0x1b4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a66      	ldr	r2, [pc, #408]	; (800152c <GameOver+0x1b8>)
 8001394:	fb82 1203 	smull	r1, r2, r2, r3
 8001398:	1092      	asrs	r2, r2, #2
 800139a:	17db      	asrs	r3, r3, #31
 800139c:	1ad2      	subs	r2, r2, r3
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4963      	ldr	r1, [pc, #396]	; (8001530 <GameOver+0x1bc>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f007 fbfb 	bl	8008ba0 <siprintf>
	sprintf(result2, "%d", points%10);
 80013aa:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <GameOver+0x1b4>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b5f      	ldr	r3, [pc, #380]	; (800152c <GameOver+0x1b8>)
 80013b0:	fb83 1302 	smull	r1, r3, r3, r2
 80013b4:	1099      	asrs	r1, r3, #2
 80013b6:	17d3      	asrs	r3, r2, #31
 80013b8:	1ac9      	subs	r1, r1, r3
 80013ba:	460b      	mov	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	1ad1      	subs	r1, r2, r3
 80013c4:	463b      	mov	r3, r7
 80013c6:	460a      	mov	r2, r1
 80013c8:	4959      	ldr	r1, [pc, #356]	; (8001530 <GameOver+0x1bc>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f007 fbe8 	bl	8008ba0 <siprintf>


	if(game_state == 1){
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <GameOver+0x1c0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d14e      	bne.n	8001476 <GameOver+0x102>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t *)"GAME OVER", CENTER_MODE);
 80013d8:	f002 f838 	bl	800344c <BSP_LCD_GetYSize>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3b5f      	subs	r3, #95	; 0x5f
 80013e2:	b299      	uxth	r1, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	4a54      	ldr	r2, [pc, #336]	; (8001538 <GameOver+0x1c4>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f002 f8c7 	bl	800357c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t *)"You lost", CENTER_MODE);
 80013ee:	f002 f82d 	bl	800344c <BSP_LCD_GetYSize>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3b50      	subs	r3, #80	; 0x50
 80013f8:	b299      	uxth	r1, r3
 80013fa:	2301      	movs	r3, #1
 80013fc:	4a4f      	ldr	r2, [pc, #316]	; (800153c <GameOver+0x1c8>)
 80013fe:	2000      	movs	r0, #0
 8001400:	f002 f8bc 	bl	800357c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 65, (uint8_t *)"Your score:", CENTER_MODE);
 8001404:	f002 f822 	bl	800344c <BSP_LCD_GetYSize>
 8001408:	4603      	mov	r3, r0
 800140a:	b29b      	uxth	r3, r3
 800140c:	3b41      	subs	r3, #65	; 0x41
 800140e:	b299      	uxth	r1, r3
 8001410:	2301      	movs	r3, #1
 8001412:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <GameOver+0x1cc>)
 8001414:	2000      	movs	r0, #0
 8001416:	f002 f8b1 	bl	800357c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2-7, BSP_LCD_GetYSize()- 50, *result1);
 800141a:	f002 f80b 	bl	8003434 <BSP_LCD_GetXSize>
 800141e:	4603      	mov	r3, r0
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b07      	subs	r3, #7
 8001426:	b29c      	uxth	r4, r3
 8001428:	f002 f810 	bl	800344c <BSP_LCD_GetYSize>
 800142c:	4603      	mov	r3, r0
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b32      	subs	r3, #50	; 0x32
 8001432:	b29b      	uxth	r3, r3
 8001434:	7b3a      	ldrb	r2, [r7, #12]
 8001436:	4619      	mov	r1, r3
 8001438:	4620      	mov	r0, r4
 800143a:	f002 f875 	bl	8003528 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()- 50, *result2);
 800143e:	f001 fff9 	bl	8003434 <BSP_LCD_GetXSize>
 8001442:	4603      	mov	r3, r0
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	b29c      	uxth	r4, r3
 8001448:	f002 f800 	bl	800344c <BSP_LCD_GetYSize>
 800144c:	4603      	mov	r3, r0
 800144e:	b29b      	uxth	r3, r3
 8001450:	3b32      	subs	r3, #50	; 0x32
 8001452:	b29b      	uxth	r3, r3
 8001454:	783a      	ldrb	r2, [r7, #0]
 8001456:	4619      	mov	r1, r3
 8001458:	4620      	mov	r0, r4
 800145a:	f002 f865 	bl	8003528 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 35, (uint8_t *)"Press \"Reset\" to start new game", CENTER_MODE);
 800145e:	f001 fff5 	bl	800344c <BSP_LCD_GetYSize>
 8001462:	4603      	mov	r3, r0
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b23      	subs	r3, #35	; 0x23
 8001468:	b299      	uxth	r1, r3
 800146a:	2301      	movs	r3, #1
 800146c:	4a35      	ldr	r2, [pc, #212]	; (8001544 <GameOver+0x1d0>)
 800146e:	2000      	movs	r0, #0
 8001470:	f002 f884 	bl	800357c <BSP_LCD_DisplayStringAt>
		while(1);
 8001474:	e7fe      	b.n	8001474 <GameOver+0x100>
	}

	if(game_state == 2){
 8001476:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <GameOver+0x1c0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d14e      	bne.n	800151c <GameOver+0x1a8>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t *)"Congratulations!!!", CENTER_MODE);
 800147e:	f001 ffe5 	bl	800344c <BSP_LCD_GetYSize>
 8001482:	4603      	mov	r3, r0
 8001484:	b29b      	uxth	r3, r3
 8001486:	3b5f      	subs	r3, #95	; 0x5f
 8001488:	b299      	uxth	r1, r3
 800148a:	2301      	movs	r3, #1
 800148c:	4a2e      	ldr	r2, [pc, #184]	; (8001548 <GameOver+0x1d4>)
 800148e:	2000      	movs	r0, #0
 8001490:	f002 f874 	bl	800357c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t *)"You won", CENTER_MODE);
 8001494:	f001 ffda 	bl	800344c <BSP_LCD_GetYSize>
 8001498:	4603      	mov	r3, r0
 800149a:	b29b      	uxth	r3, r3
 800149c:	3b50      	subs	r3, #80	; 0x50
 800149e:	b299      	uxth	r1, r3
 80014a0:	2301      	movs	r3, #1
 80014a2:	4a2a      	ldr	r2, [pc, #168]	; (800154c <GameOver+0x1d8>)
 80014a4:	2000      	movs	r0, #0
 80014a6:	f002 f869 	bl	800357c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 65, (uint8_t *)"Your score:", CENTER_MODE);
 80014aa:	f001 ffcf 	bl	800344c <BSP_LCD_GetYSize>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b41      	subs	r3, #65	; 0x41
 80014b4:	b299      	uxth	r1, r3
 80014b6:	2301      	movs	r3, #1
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <GameOver+0x1cc>)
 80014ba:	2000      	movs	r0, #0
 80014bc:	f002 f85e 	bl	800357c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2-7, BSP_LCD_GetYSize()- 50, *result1);
 80014c0:	f001 ffb8 	bl	8003434 <BSP_LCD_GetXSize>
 80014c4:	4603      	mov	r3, r0
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b07      	subs	r3, #7
 80014cc:	b29c      	uxth	r4, r3
 80014ce:	f001 ffbd 	bl	800344c <BSP_LCD_GetYSize>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3b32      	subs	r3, #50	; 0x32
 80014d8:	b29b      	uxth	r3, r3
 80014da:	7b3a      	ldrb	r2, [r7, #12]
 80014dc:	4619      	mov	r1, r3
 80014de:	4620      	mov	r0, r4
 80014e0:	f002 f822 	bl	8003528 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()- 50, *result2);
 80014e4:	f001 ffa6 	bl	8003434 <BSP_LCD_GetXSize>
 80014e8:	4603      	mov	r3, r0
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	b29c      	uxth	r4, r3
 80014ee:	f001 ffad 	bl	800344c <BSP_LCD_GetYSize>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3b32      	subs	r3, #50	; 0x32
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	783a      	ldrb	r2, [r7, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4620      	mov	r0, r4
 8001500:	f002 f812 	bl	8003528 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 65, (uint8_t *)"Press \"Reset\" to start new game", CENTER_MODE);
 8001504:	f001 ffa2 	bl	800344c <BSP_LCD_GetYSize>
 8001508:	4603      	mov	r3, r0
 800150a:	b29b      	uxth	r3, r3
 800150c:	3b41      	subs	r3, #65	; 0x41
 800150e:	b299      	uxth	r1, r3
 8001510:	2301      	movs	r3, #1
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <GameOver+0x1d0>)
 8001514:	2000      	movs	r0, #0
 8001516:	f002 f831 	bl	800357c <BSP_LCD_DisplayStringAt>
		while(1);
 800151a:	e7fe      	b.n	800151a <GameOver+0x1a6>
	}
}
 800151c:	bf00      	nop
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	200000cc 	.word	0x200000cc
 8001528:	20000220 	.word	0x20000220
 800152c:	66666667 	.word	0x66666667
 8001530:	08009304 	.word	0x08009304
 8001534:	20000224 	.word	0x20000224
 8001538:	08009308 	.word	0x08009308
 800153c:	08009314 	.word	0x08009314
 8001540:	08009320 	.word	0x08009320
 8001544:	0800932c 	.word	0x0800932c
 8001548:	0800934c 	.word	0x0800934c
 800154c:	08009360 	.word	0x08009360

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  BSP_LED_On(LED_RED);
 8001554:	2002      	movs	r0, #2
 8001556:	f001 faaf 	bl	8002ab8 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155a:	b672      	cpsid	i
}
 800155c:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155e:	e7fe      	b.n	800155e <Error_Handler+0xe>

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_MspInit+0x5c>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a14      	ldr	r2, [pc, #80]	; (80015bc <HAL_MspInit+0x5c>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_MspInit+0x5c>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_MspInit+0x5c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_MspInit+0x5c>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_MspInit+0x5c>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_MspInit+0x60>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_MspInit+0x60>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010000 	.word	0x40010000

080015c4 <HAL_ADC_MspInit>:
* This function configures necessary hardware resources
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]

  if(hadc->Instance == ADC1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_ADC_MspInit+0x6c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d121      	bne.n	8001628 <HAL_ADC_MspInit+0x64>
  {
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_ADC_MspInit+0x70>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_ADC_MspInit+0x70>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_ADC_MspInit+0x70>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_ADC_MspInit+0x70>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <HAL_ADC_MspInit+0x70>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_ADC_MspInit+0x70>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

    // ADC1 GPIO Configuration:
    // PA7     ------> ADC1_IN7

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_ADC_MspInit+0x74>)
 8001624:	f003 f940 	bl	80048a8 <HAL_GPIO_Init>
  }
}
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40012400 	.word	0x40012400
 8001634:	40021000 	.word	0x40021000
 8001638:	40010800 	.word	0x40010800

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f002 fb7d 	bl	8003d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //CounterFunction();
  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <OTG_FS_IRQHandler+0x10>)
 8001692:	f003 fac7 	bl	8004c24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000bac 	.word	0x20000bac

080016a0 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f003 fa9b 	bl	8004be0 <HAL_GPIO_EXTI_IRQHandler>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}

080016ae <EXTI9_5_IRQHandler>:
  * @brief  This function handles External line 9 to 5 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 80016b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016b6:	f003 fa93 	bl	8004be0 <HAL_GPIO_EXTI_IRQHandler>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}

080016be <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 10 to 15 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(IOE_IT_PIN);
 80016c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016c6:	f003 fa8b 	bl	8004be0 <HAL_GPIO_EXTI_IRQHandler>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <DMA1_Channel5_IRQHandler>:
  * @brief  This function handles I2S DMA TX interrupt request.
  * @param  None
  * @retval None
  */
void I2SOUT_IRQHandler(void)
{ 
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <DMA1_Channel5_IRQHandler+0x14>)
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 fea9 	bl	8004430 <HAL_DMA_IRQHandler>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000b60 	.word	0x20000b60

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f007 f95a 	bl	80089d0 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20010000 	.word	0x20010000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000228 	.word	0x20000228
 8001750:	20000e80 	.word	0x20000e80

08001754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001760:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001762:	e003      	b.n	800176c <LoopCopyDataInit>

08001764 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001766:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001768:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800176a:	3104      	adds	r1, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001770:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001772:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001774:	d3f6      	bcc.n	8001764 <CopyDataInit>
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001778:	e002      	b.n	8001780 <LoopFillZerobss>

0800177a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800177c:	f842 3b04 	str.w	r3, [r2], #4

08001780 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001782:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001784:	d3f9      	bcc.n	800177a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001786:	f7ff ffe5 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f007 f927 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7fe fec5 	bl	800051c <main>
  bx lr
 8001792:	4770      	bx	lr
  ldr r3, =_sidata
 8001794:	0800b378 	.word	0x0800b378
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800179c:	20000140 	.word	0x20000140
  ldr r2, =_sbss
 80017a0:	20000140 	.word	0x20000140
  ldr r3, = _ebss
 80017a4:	20000e80 	.word	0x20000e80

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <ili9320_Init>:
  * @brief  Initialise the ILI9320 LCD Component.
  * @param  None
  * @retval None
  */
void ili9320_Init(void)
{  
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  if(Is_ili9320_Initialized == 0)
 80017b0:	4b7e      	ldr	r3, [pc, #504]	; (80019ac <ili9320_Init+0x200>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f040 80f0 	bne.w	800199a <ili9320_Init+0x1ee>
  {
    Is_ili9320_Initialized = 1;
 80017ba:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <ili9320_Init+0x200>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
    /* Initialise ILI9320 low level bus layer --------------------------------*/
    LCD_IO_Init();
 80017c0:	f001 fc70 	bl	80030a4 <LCD_IO_Init>
    
    /* Start Initial Sequence ------------------------------------------------*/
    ili9320_WriteReg(LCD_REG_229,0x8000); /* Set the internal vcore voltage */
 80017c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c8:	20e5      	movs	r0, #229	; 0xe5
 80017ca:	f000 f9ae 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_0,  0x0001); /* Start internal OSC. */
 80017ce:	2101      	movs	r1, #1
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 f9aa 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_1,  0x0100); /* set SS and SM bit */
 80017d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 f9a5 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_2,  0x0700); /* set 1 line inversion */
 80017e0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80017e4:	2002      	movs	r0, #2
 80017e6:	f000 f9a0 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_3,  0x1030); /* set GRAM write direction and BGR=1. */
 80017ea:	f241 0130 	movw	r1, #4144	; 0x1030
 80017ee:	2003      	movs	r0, #3
 80017f0:	f000 f99b 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_4,  0x0000); /* Resize register */
 80017f4:	2100      	movs	r1, #0
 80017f6:	2004      	movs	r0, #4
 80017f8:	f000 f997 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_8,  0x0202); /* set the back porch and front porch */
 80017fc:	f240 2102 	movw	r1, #514	; 0x202
 8001800:	2008      	movs	r0, #8
 8001802:	f000 f992 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_9,  0x0000); /* set non-display area refresh cycle ISC[3:0] */
 8001806:	2100      	movs	r1, #0
 8001808:	2009      	movs	r0, #9
 800180a:	f000 f98e 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 800180e:	2100      	movs	r1, #0
 8001810:	200a      	movs	r0, #10
 8001812:	f000 f98a 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8001816:	2100      	movs	r1, #0
 8001818:	200c      	movs	r0, #12
 800181a:	f000 f986 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 800181e:	2100      	movs	r1, #0
 8001820:	200d      	movs	r0, #13
 8001822:	f000 f982 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8001826:	2100      	movs	r1, #0
 8001828:	200f      	movs	r0, #15
 800182a:	f000 f97e 	bl	8001b2a <ili9320_WriteReg>

    /* Power On sequence -----------------------------------------------------*/
    ili9320_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800182e:	2100      	movs	r1, #0
 8001830:	2010      	movs	r0, #16
 8001832:	f000 f97a 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001836:	2100      	movs	r1, #0
 8001838:	2011      	movs	r0, #17
 800183a:	f000 f976 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800183e:	2100      	movs	r1, #0
 8001840:	2012      	movs	r0, #18
 8001842:	f000 f972 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8001846:	2100      	movs	r1, #0
 8001848:	2013      	movs	r0, #19
 800184a:	f000 f96e 	bl	8001b2a <ili9320_WriteReg>

    ili9320_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800184e:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8001852:	2010      	movs	r0, #16
 8001854:	f000 f969 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001858:	f240 1137 	movw	r1, #311	; 0x137
 800185c:	2011      	movs	r0, #17
 800185e:	f000 f964 	bl	8001b2a <ili9320_WriteReg>

    ili9320_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8001862:	f240 1139 	movw	r1, #313	; 0x139
 8001866:	2012      	movs	r0, #18
 8001868:	f000 f95f 	bl	8001b2a <ili9320_WriteReg>

    ili9320_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 800186c:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001870:	2013      	movs	r0, #19
 8001872:	f000 f95a 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8001876:	2113      	movs	r1, #19
 8001878:	2029      	movs	r0, #41	; 0x29
 800187a:	f000 f956 	bl	8001b2a <ili9320_WriteReg>

    ili9320_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 800187e:	2100      	movs	r1, #0
 8001880:	2020      	movs	r0, #32
 8001882:	f000 f952 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8001886:	2100      	movs	r1, #0
 8001888:	2021      	movs	r0, #33	; 0x21
 800188a:	f000 f94e 	bl	8001b2a <ili9320_WriteReg>

    /* Adjust the Gamma Curve ------------------------------------------------*/
    ili9320_WriteReg(LCD_REG_48, 0x0007);
 800188e:	2107      	movs	r1, #7
 8001890:	2030      	movs	r0, #48	; 0x30
 8001892:	f000 f94a 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_49, 0x0007);
 8001896:	2107      	movs	r1, #7
 8001898:	2031      	movs	r0, #49	; 0x31
 800189a:	f000 f946 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_50, 0x0007);
 800189e:	2107      	movs	r1, #7
 80018a0:	2032      	movs	r0, #50	; 0x32
 80018a2:	f000 f942 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_53, 0x0007);
 80018a6:	2107      	movs	r1, #7
 80018a8:	2035      	movs	r0, #53	; 0x35
 80018aa:	f000 f93e 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_54, 0x0007);
 80018ae:	2107      	movs	r1, #7
 80018b0:	2036      	movs	r0, #54	; 0x36
 80018b2:	f000 f93a 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_55, 0x0700);
 80018b6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80018ba:	2037      	movs	r0, #55	; 0x37
 80018bc:	f000 f935 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_56, 0x0700);
 80018c0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80018c4:	2038      	movs	r0, #56	; 0x38
 80018c6:	f000 f930 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_57, 0x0700);
 80018ca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80018ce:	2039      	movs	r0, #57	; 0x39
 80018d0:	f000 f92b 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_60, 0x0700);
 80018d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80018d8:	203c      	movs	r0, #60	; 0x3c
 80018da:	f000 f926 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_61, 0x1F00);
 80018de:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80018e2:	203d      	movs	r0, #61	; 0x3d
 80018e4:	f000 f921 	bl	8001b2a <ili9320_WriteReg>
  
    /* Set GRAM area ---------------------------------------------------------*/
    ili9320_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 80018e8:	2100      	movs	r1, #0
 80018ea:	2050      	movs	r0, #80	; 0x50
 80018ec:	f000 f91d 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 80018f0:	21ef      	movs	r1, #239	; 0xef
 80018f2:	2051      	movs	r0, #81	; 0x51
 80018f4:	f000 f919 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 80018f8:	2100      	movs	r1, #0
 80018fa:	2052      	movs	r0, #82	; 0x52
 80018fc:	f000 f915 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8001900:	f240 113f 	movw	r1, #319	; 0x13f
 8001904:	2053      	movs	r0, #83	; 0x53
 8001906:	f000 f910 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_96,  0x2700); /* Gate Scan Line */
 800190a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800190e:	2060      	movs	r0, #96	; 0x60
 8001910:	f000 f90b 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8001914:	2101      	movs	r1, #1
 8001916:	2061      	movs	r0, #97	; 0x61
 8001918:	f000 f907 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 800191c:	2100      	movs	r1, #0
 800191e:	206a      	movs	r0, #106	; 0x6a
 8001920:	f000 f903 	bl	8001b2a <ili9320_WriteReg>

    /* Partial Display Control -----------------------------------------------*/
    ili9320_WriteReg(LCD_REG_128, 0x0000);
 8001924:	2100      	movs	r1, #0
 8001926:	2080      	movs	r0, #128	; 0x80
 8001928:	f000 f8ff 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_129, 0x0000);
 800192c:	2100      	movs	r1, #0
 800192e:	2081      	movs	r0, #129	; 0x81
 8001930:	f000 f8fb 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_130, 0x0000);
 8001934:	2100      	movs	r1, #0
 8001936:	2082      	movs	r0, #130	; 0x82
 8001938:	f000 f8f7 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_131, 0x0000);
 800193c:	2100      	movs	r1, #0
 800193e:	2083      	movs	r0, #131	; 0x83
 8001940:	f000 f8f3 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_132, 0x0000);
 8001944:	2100      	movs	r1, #0
 8001946:	2084      	movs	r0, #132	; 0x84
 8001948:	f000 f8ef 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_133, 0x0000);
 800194c:	2100      	movs	r1, #0
 800194e:	2085      	movs	r0, #133	; 0x85
 8001950:	f000 f8eb 	bl	8001b2a <ili9320_WriteReg>

    /* Panel Control ---------------------------------------------------------*/
    ili9320_WriteReg(LCD_REG_144, 0x0010);
 8001954:	2110      	movs	r1, #16
 8001956:	2090      	movs	r0, #144	; 0x90
 8001958:	f000 f8e7 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_146, 0x0000);
 800195c:	2100      	movs	r1, #0
 800195e:	2092      	movs	r0, #146	; 0x92
 8001960:	f000 f8e3 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_147, 0x0003);
 8001964:	2103      	movs	r1, #3
 8001966:	2093      	movs	r0, #147	; 0x93
 8001968:	f000 f8df 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_149, 0x0110);
 800196c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001970:	2095      	movs	r0, #149	; 0x95
 8001972:	f000 f8da 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_151, 0x0000);
 8001976:	2100      	movs	r1, #0
 8001978:	2097      	movs	r0, #151	; 0x97
 800197a:	f000 f8d6 	bl	8001b2a <ili9320_WriteReg>
    ili9320_WriteReg(LCD_REG_152, 0x0000);
 800197e:	2100      	movs	r1, #0
 8001980:	2098      	movs	r0, #152	; 0x98
 8001982:	f000 f8d2 	bl	8001b2a <ili9320_WriteReg>

    /* Set GRAM write direction and BGR = 1 */
    /* I/D=01 (Horizontal : increment, Vertical : decrement) */
    /* AM=1 (address is updated in vertical writing direction) */
    ili9320_WriteReg(LCD_REG_3, 0x1018);
 8001986:	f241 0118 	movw	r1, #4120	; 0x1018
 800198a:	2003      	movs	r0, #3
 800198c:	f000 f8cd 	bl	8001b2a <ili9320_WriteReg>

    ili9320_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */    
 8001990:	f240 1173 	movw	r1, #371	; 0x173
 8001994:	2007      	movs	r0, #7
 8001996:	f000 f8c8 	bl	8001b2a <ili9320_WriteReg>
  }
  
  /* Set the Cursor */ 
  ili9320_SetCursor(0, 0);
 800199a:	2100      	movs	r1, #0
 800199c:	2000      	movs	r0, #0
 800199e:	f000 f873 	bl	8001a88 <ili9320_SetCursor>
    
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80019a2:	2022      	movs	r0, #34	; 0x22
 80019a4:	f001 fc00 	bl	80031a8 <LCD_IO_WriteReg>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000022c 	.word	0x2000022c

080019b0 <ili9320_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9320_DisplayOn(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Power On sequence ---------------------------------------------------------*/
  ili9320_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80019b4:	2100      	movs	r1, #0
 80019b6:	2010      	movs	r0, #16
 80019b8:	f000 f8b7 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80019bc:	2100      	movs	r1, #0
 80019be:	2011      	movs	r0, #17
 80019c0:	f000 f8b3 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80019c4:	2100      	movs	r1, #0
 80019c6:	2012      	movs	r0, #18
 80019c8:	f000 f8af 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80019cc:	2100      	movs	r1, #0
 80019ce:	2013      	movs	r0, #19
 80019d0:	f000 f8ab 	bl	8001b2a <ili9320_WriteReg>

  ili9320_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80019d4:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80019d8:	2010      	movs	r0, #16
 80019da:	f000 f8a6 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80019de:	f240 1137 	movw	r1, #311	; 0x137
 80019e2:	2011      	movs	r0, #17
 80019e4:	f000 f8a1 	bl	8001b2a <ili9320_WriteReg>

  ili9320_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 80019e8:	f240 1139 	movw	r1, #313	; 0x139
 80019ec:	2012      	movs	r0, #18
 80019ee:	f000 f89c 	bl	8001b2a <ili9320_WriteReg>

  ili9320_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 80019f2:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80019f6:	2013      	movs	r0, #19
 80019f8:	f000 f897 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 80019fc:	2113      	movs	r1, #19
 80019fe:	2029      	movs	r0, #41	; 0x29
 8001a00:	f000 f893 	bl	8001b2a <ili9320_WriteReg>
 
  /* Display On */
  ili9320_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8001a04:	f240 1173 	movw	r1, #371	; 0x173
 8001a08:	2007      	movs	r0, #7
 8001a0a:	f000 f88e 	bl	8001b2a <ili9320_WriteReg>
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <ili9320_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9320_DisplayOff(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* Power Off sequence ---------------------------------------------------------*/
  ili9320_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001a16:	2100      	movs	r1, #0
 8001a18:	2010      	movs	r0, #16
 8001a1a:	f000 f886 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2011      	movs	r0, #17
 8001a22:	f000 f882 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8001a26:	2100      	movs	r1, #0
 8001a28:	2012      	movs	r0, #18
 8001a2a:	f000 f87e 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2013      	movs	r0, #19
 8001a32:	f000 f87a 	bl	8001b2a <ili9320_WriteReg>
  
  ili9320_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 8001a36:	2100      	movs	r1, #0
 8001a38:	2029      	movs	r0, #41	; 0x29
 8001a3a:	f000 f876 	bl	8001b2a <ili9320_WriteReg>
  
  /* Display Off */
  ili9320_WriteReg(LCD_REG_7, 0x0); 
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2007      	movs	r0, #7
 8001a42:	f000 f872 	bl	8001b2a <ili9320_WriteReg>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <ili9320_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9320_GetLcdPixelWidth(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 8001a4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <ili9320_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9320_GetLcdPixelHeight(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8001a5e:	23f0      	movs	r3, #240	; 0xf0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <ili9320_ReadID>:
  * @brief  Get the ILI9320 ID.
  * @param  None
  * @retval The ILI9320 ID 
  */
uint16_t ili9320_ReadID(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  if(Is_ili9320_Initialized == 0)
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <ili9320_ReadID+0x1c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <ili9320_ReadID+0x10>
  {
    ili9320_Init();  
 8001a74:	f7ff fe9a 	bl	80017ac <ili9320_Init>
  }
  return (ili9320_ReadReg(0x00));
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 f86b 	bl	8001b54 <ili9320_ReadReg>
 8001a7e:	4603      	mov	r3, r0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000022c 	.word	0x2000022c

08001a88 <ili9320_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9320_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460a      	mov	r2, r1
 8001a92:	80fb      	strh	r3, [r7, #6]
 8001a94:	4613      	mov	r3, r2
 8001a96:	80bb      	strh	r3, [r7, #4]
  ili9320_WriteReg(LCD_REG_32, Ypos);
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2020      	movs	r0, #32
 8001a9e:	f000 f844 	bl	8001b2a <ili9320_WriteReg>
  ili9320_WriteReg(LCD_REG_33, (ILI9320_LCD_PIXEL_WIDTH - 1 - Xpos));      
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	2021      	movs	r0, #33	; 0x21
 8001ab0:	f000 f83b 	bl	8001b2a <ili9320_WriteReg>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <ili9320_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9320_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	80bb      	strh	r3, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9320_SetCursor(Xpos, Ypos);
 8001ace:	88ba      	ldrh	r2, [r7, #4]
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ffd7 	bl	8001a88 <ili9320_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001ada:	2022      	movs	r0, #34	; 0x22
 8001adc:	f001 fb64 	bl	80031a8 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8001ae0:	1cbb      	adds	r3, r7, #2
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f001 fb0f 	bl	8003108 <LCD_IO_WriteMultipleData>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <ili9320_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9320_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	460a      	mov	r2, r1
 8001afc:	80fb      	strh	r3, [r7, #6]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9320_SetCursor(Xpos, Ypos);
 8001b02:	88ba      	ldrh	r2, [r7, #4]
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ffbd 	bl	8001a88 <ili9320_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001b0e:	2022      	movs	r0, #34	; 0x22
 8001b10:	f001 fb4a 	bl	80031a8 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData(0x00);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f001 fb67 	bl	80031e8 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(0x00));
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f001 fb64 	bl	80031e8 <LCD_IO_ReadData>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <ili9320_WriteReg>:
  * @param  LCDReg:      address of the selected register.
  * @param  LCDRegValue: value to write to the selected register.
  * @retval None
  */
void ili9320_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	460a      	mov	r2, r1
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fb33 	bl	80031a8 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2102      	movs	r1, #2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fade 	bl	8003108 <LCD_IO_WriteMultipleData>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <ili9320_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9320_ReadReg(uint8_t LCDReg)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fb21 	bl	80031a8 <LCD_IO_WriteReg>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(0x00));
 8001b66:	2000      	movs	r0, #0
 8001b68:	f001 fb3e 	bl	80031e8 <LCD_IO_ReadData>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <ili9320_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9320_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001b76:	b590      	push	{r4, r7, lr}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	4608      	mov	r0, r1
 8001b80:	4611      	mov	r1, r2
 8001b82:	461a      	mov	r2, r3
 8001b84:	4623      	mov	r3, r4
 8001b86:	80fb      	strh	r3, [r7, #6]
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80bb      	strh	r3, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	803b      	strh	r3, [r7, #0]
  /* Horizontal GRAM Start Address */
  ili9320_WriteReg(LCD_REG_80, (Ypos));
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	4619      	mov	r1, r3
 8001b98:	2050      	movs	r0, #80	; 0x50
 8001b9a:	f7ff ffc6 	bl	8001b2a <ili9320_WriteReg>
  /* Horizontal GRAM End Address */
  ili9320_WriteReg(LCD_REG_81, (Ypos + Height - 1));
 8001b9e:	88ba      	ldrh	r2, [r7, #4]
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	2051      	movs	r0, #81	; 0x51
 8001bae:	f7ff ffbc 	bl	8001b2a <ili9320_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9320_WriteReg(LCD_REG_82, ILI9320_LCD_PIXEL_WIDTH - Xpos - Width);
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	2052      	movs	r0, #82	; 0x52
 8001bc4:	f7ff ffb1 	bl	8001b2a <ili9320_WriteReg>
  /* Vertical GRAM End Address */
  ili9320_WriteReg(LCD_REG_83, ILI9320_LCD_PIXEL_WIDTH - Xpos - 1);  
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	2053      	movs	r0, #83	; 0x53
 8001bd6:	f7ff ffa8 	bl	8001b2a <ili9320_WriteReg>
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd90      	pop	{r4, r7, pc}
	...

08001be4 <ili9320_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9320_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	80fb      	strh	r3, [r7, #6]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9320_SetCursor(Xpos, Ypos); 
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff3b 	bl	8001a88 <ili9320_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001c12:	2022      	movs	r0, #34	; 0x22
 8001c14:	f001 fac8 	bl	80031a8 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	81fb      	strh	r3, [r7, #14]
 8001c1c:	e007      	b.n	8001c2e <ili9320_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8001c1e:	89fb      	ldrh	r3, [r7, #14]
 8001c20:	490a      	ldr	r1, [pc, #40]	; (8001c4c <ili9320_DrawHLine+0x68>)
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001c28:	89fb      	ldrh	r3, [r7, #14]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	81fb      	strh	r3, [r7, #14]
 8001c2e:	89fa      	ldrh	r2, [r7, #14]
 8001c30:	883b      	ldrh	r3, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3f3      	bcc.n	8001c1e <ili9320_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001c36:	883b      	ldrh	r3, [r7, #0]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <ili9320_DrawHLine+0x68>)
 8001c3e:	f001 fa63 	bl	8003108 <LCD_IO_WriteMultipleData>
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000230 	.word	0x20000230

08001c50 <ili9320_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9320_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4604      	mov	r4, r0
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	80fb      	strh	r3, [r7, #6]
 8001c62:	4603      	mov	r3, r0
 8001c64:	80bb      	strh	r3, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9320_WriteReg(LCD_REG_3, 0x1010);
 8001c72:	f241 0110 	movw	r1, #4112	; 0x1010
 8001c76:	2003      	movs	r0, #3
 8001c78:	f7ff ff57 	bl	8001b2a <ili9320_WriteReg>
  
  /* Set Cursor */
  ili9320_SetCursor(Xpos, Ypos);
 8001c7c:	887a      	ldrh	r2, [r7, #2]
 8001c7e:	88bb      	ldrh	r3, [r7, #4]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff00 	bl	8001a88 <ili9320_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001c88:	2022      	movs	r0, #34	; 0x22
 8001c8a:	f001 fa8d 	bl	80031a8 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	81fb      	strh	r3, [r7, #14]
 8001c92:	e007      	b.n	8001ca4 <ili9320_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8001c94:	89fb      	ldrh	r3, [r7, #14]
 8001c96:	490d      	ldr	r1, [pc, #52]	; (8001ccc <ili9320_DrawVLine+0x7c>)
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	81fb      	strh	r3, [r7, #14]
 8001ca4:	89fa      	ldrh	r2, [r7, #14]
 8001ca6:	883b      	ldrh	r3, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3f3      	bcc.n	8001c94 <ili9320_DrawVLine+0x44>
  }
  
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001cac:	883b      	ldrh	r3, [r7, #0]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <ili9320_DrawVLine+0x7c>)
 8001cb4:	f001 fa28 	bl	8003108 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9320_WriteReg(LCD_REG_3, 0x1018);  
 8001cb8:	f241 0118 	movw	r1, #4120	; 0x1018
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f7ff ff34 	bl	8001b2a <ili9320_WriteReg>
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000230 	.word	0x20000230

08001cd0 <ili9320_DrawBitmap>:
  * @param  Xpos:  Bmp X position in the LCD
  * @param  Ypos:  Bmp Y position in the LCD    
  * @retval None
  */
void ili9320_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	603a      	str	r2, [r7, #0]
 8001cda:	80fb      	strh	r3, [r7, #6]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3302      	adds	r3, #2
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	330a      	adds	r3, #10
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	330c      	adds	r3, #12
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	085b      	lsrs	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9320_WriteReg(LCD_REG_3, 0x1008);
 8001d32:	f241 0108 	movw	r1, #4104	; 0x1008
 8001d36:	2003      	movs	r0, #3
 8001d38:	f7ff fef7 	bl	8001b2a <ili9320_WriteReg>

  /* Set Cursor */
  ili9320_SetCursor(Xpos, Ypos);  
 8001d3c:	88ba      	ldrh	r2, [r7, #4]
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fea0 	bl	8001a88 <ili9320_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001d48:	2022      	movs	r0, #34	; 0x22
 8001d4a:	f001 fa2d 	bl	80031a8 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4619      	mov	r1, r3
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f001 f9d7 	bl	8003108 <LCD_IO_WriteMultipleData>

  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9320_WriteReg(LCD_REG_3, 0x1018);
 8001d5a:	f241 0118 	movw	r1, #4120	; 0x1018
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f7ff fee3 	bl	8001b2a <ili9320_WriteReg>
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <ili9320_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9320_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4604      	mov	r4, r0
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	80fb      	strh	r3, [r7, #6]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80bb      	strh	r3, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	807b      	strh	r3, [r7, #2]
 8001d86:	4613      	mov	r3, r2
 8001d88:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	883a      	ldrh	r2, [r7, #0]
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9320_SetCursor(Xpos, Ypos);  
 8001d98:	88ba      	ldrh	r2, [r7, #4]
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fe72 	bl	8001a88 <ili9320_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001da4:	2022      	movs	r0, #34	; 0x22
 8001da6:	f001 f9ff 	bl	80031a8 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4619      	mov	r1, r3
 8001db0:	6a38      	ldr	r0, [r7, #32]
 8001db2:	f001 f9a9 	bl	8003108 <LCD_IO_WriteMultipleData>
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}

08001dbe <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001dc2:	f001 f96f 	bl	80030a4 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 f99f 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8001dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f000 f99a 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8001dd8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f000 f995 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8001de2:	f241 0118 	movw	r1, #4120	; 0x1018
 8001de6:	2003      	movs	r0, #3
 8001de8:	f000 f990 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8001dec:	2100      	movs	r1, #0
 8001dee:	2004      	movs	r0, #4
 8001df0:	f000 f98c 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8001df4:	f240 2102 	movw	r1, #514	; 0x202
 8001df8:	2008      	movs	r0, #8
 8001dfa:	f000 f987 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2009      	movs	r0, #9
 8001e02:	f000 f983 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8001e06:	2100      	movs	r1, #0
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f000 f97f 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8001e0e:	2100      	movs	r1, #0
 8001e10:	200c      	movs	r0, #12
 8001e12:	f000 f97b 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8001e16:	2100      	movs	r1, #0
 8001e18:	200d      	movs	r0, #13
 8001e1a:	f000 f977 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8001e1e:	2100      	movs	r1, #0
 8001e20:	200f      	movs	r0, #15
 8001e22:	f000 f973 	bl	800210c <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001e26:	2100      	movs	r1, #0
 8001e28:	2010      	movs	r0, #16
 8001e2a:	f000 f96f 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2011      	movs	r0, #17
 8001e32:	f000 f96b 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8001e36:	2100      	movs	r1, #0
 8001e38:	2012      	movs	r0, #18
 8001e3a:	f000 f967 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2013      	movs	r0, #19
 8001e42:	f000 f963 	bl	800210c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001e46:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8001e4a:	2010      	movs	r0, #16
 8001e4c:	f000 f95e 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001e50:	f240 1137 	movw	r1, #311	; 0x137
 8001e54:	2011      	movs	r0, #17
 8001e56:	f000 f959 	bl	800210c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8001e5a:	f240 1139 	movw	r1, #313	; 0x139
 8001e5e:	2012      	movs	r0, #18
 8001e60:	f000 f954 	bl	800210c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001e64:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001e68:	2013      	movs	r0, #19
 8001e6a:	f000 f94f 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8001e6e:	2113      	movs	r1, #19
 8001e70:	2029      	movs	r0, #41	; 0x29
 8001e72:	f000 f94b 	bl	800210c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8001e76:	2100      	movs	r1, #0
 8001e78:	2020      	movs	r0, #32
 8001e7a:	f000 f947 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2021      	movs	r0, #33	; 0x21
 8001e82:	f000 f943 	bl	800210c <ili9325_WriteReg>
  
  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8001e86:	2107      	movs	r1, #7
 8001e88:	2030      	movs	r0, #48	; 0x30
 8001e8a:	f000 f93f 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8001e8e:	f240 3102 	movw	r1, #770	; 0x302
 8001e92:	2031      	movs	r0, #49	; 0x31
 8001e94:	f000 f93a 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 8001e98:	f240 1105 	movw	r1, #261	; 0x105
 8001e9c:	2032      	movs	r0, #50	; 0x32
 8001e9e:	f000 f935 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8001ea2:	f240 2106 	movw	r1, #518	; 0x206
 8001ea6:	2035      	movs	r0, #53	; 0x35
 8001ea8:	f000 f930 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8001eac:	f640 0108 	movw	r1, #2056	; 0x808
 8001eb0:	2036      	movs	r0, #54	; 0x36
 8001eb2:	f000 f92b 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8001eb6:	f240 2106 	movw	r1, #518	; 0x206
 8001eba:	2037      	movs	r0, #55	; 0x37
 8001ebc:	f000 f926 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8001ec0:	f240 5104 	movw	r1, #1284	; 0x504
 8001ec4:	2038      	movs	r0, #56	; 0x38
 8001ec6:	f000 f921 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8001eca:	2107      	movs	r1, #7
 8001ecc:	2039      	movs	r0, #57	; 0x39
 8001ece:	f000 f91d 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8001ed2:	f240 1105 	movw	r1, #261	; 0x105
 8001ed6:	203c      	movs	r0, #60	; 0x3c
 8001ed8:	f000 f918 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8001edc:	f640 0108 	movw	r1, #2056	; 0x808
 8001ee0:	203d      	movs	r0, #61	; 0x3d
 8001ee2:	f000 f913 	bl	800210c <ili9325_WriteReg>
  
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2050      	movs	r0, #80	; 0x50
 8001eea:	f000 f90f 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8001eee:	21ef      	movs	r1, #239	; 0xef
 8001ef0:	2051      	movs	r0, #81	; 0x51
 8001ef2:	f000 f90b 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2052      	movs	r0, #82	; 0x52
 8001efa:	f000 f907 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8001efe:	f240 113f 	movw	r1, #319	; 0x13f
 8001f02:	2053      	movs	r0, #83	; 0x53
 8001f04:	f000 f902 	bl	800210c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8001f08:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8001f0c:	2060      	movs	r0, #96	; 0x60
 8001f0e:	f000 f8fd 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8001f12:	2101      	movs	r1, #1
 8001f14:	2061      	movs	r0, #97	; 0x61
 8001f16:	f000 f8f9 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	206a      	movs	r0, #106	; 0x6a
 8001f1e:	f000 f8f5 	bl	800210c <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 8001f22:	2100      	movs	r1, #0
 8001f24:	2080      	movs	r0, #128	; 0x80
 8001f26:	f000 f8f1 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2081      	movs	r0, #129	; 0x81
 8001f2e:	f000 f8ed 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 8001f32:	2100      	movs	r1, #0
 8001f34:	2082      	movs	r0, #130	; 0x82
 8001f36:	f000 f8e9 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2083      	movs	r0, #131	; 0x83
 8001f3e:	f000 f8e5 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 8001f42:	2100      	movs	r1, #0
 8001f44:	2084      	movs	r0, #132	; 0x84
 8001f46:	f000 f8e1 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2085      	movs	r0, #133	; 0x85
 8001f4e:	f000 f8dd 	bl	800210c <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 8001f52:	2110      	movs	r1, #16
 8001f54:	2090      	movs	r0, #144	; 0x90
 8001f56:	f000 f8d9 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2092      	movs	r0, #146	; 0x92
 8001f5e:	f000 f8d5 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 8001f62:	2103      	movs	r1, #3
 8001f64:	2093      	movs	r0, #147	; 0x93
 8001f66:	f000 f8d1 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 8001f6a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001f6e:	2095      	movs	r0, #149	; 0x95
 8001f70:	f000 f8cc 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8001f74:	2100      	movs	r1, #0
 8001f76:	2097      	movs	r0, #151	; 0x97
 8001f78:	f000 f8c8 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2098      	movs	r0, #152	; 0x98
 8001f80:	f000 f8c4 	bl	800210c <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 8001f84:	f241 0118 	movw	r1, #4120	; 0x1018
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f8bf 	bl	800210c <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 8001f8e:	f240 1173 	movw	r1, #371	; 0x173
 8001f92:	2007      	movs	r0, #7
 8001f94:	f000 f8ba 	bl	800210c <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f86b 	bl	8002076 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001fa0:	2022      	movs	r0, #34	; 0x22
 8001fa2:	f001 f901 	bl	80031a8 <LCD_IO_WriteReg>
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2010      	movs	r0, #16
 8001fb2:	f000 f8ab 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2011      	movs	r0, #17
 8001fba:	f000 f8a7 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2012      	movs	r0, #18
 8001fc2:	f000 f8a3 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2013      	movs	r0, #19
 8001fca:	f000 f89f 	bl	800210c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001fce:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8001fd2:	2010      	movs	r0, #16
 8001fd4:	f000 f89a 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001fd8:	f240 1137 	movw	r1, #311	; 0x137
 8001fdc:	2011      	movs	r0, #17
 8001fde:	f000 f895 	bl	800210c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8001fe2:	f240 1139 	movw	r1, #313	; 0x139
 8001fe6:	2012      	movs	r0, #18
 8001fe8:	f000 f890 	bl	800210c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001fec:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001ff0:	2013      	movs	r0, #19
 8001ff2:	f000 f88b 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8001ff6:	2113      	movs	r1, #19
 8001ff8:	2029      	movs	r0, #41	; 0x29
 8001ffa:	f000 f887 	bl	800210c <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8001ffe:	f240 1173 	movw	r1, #371	; 0x173
 8002002:	2007      	movs	r0, #7
 8002004:	f000 f882 	bl	800210c <ili9325_WriteReg>
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002010:	2100      	movs	r1, #0
 8002012:	2010      	movs	r0, #16
 8002014:	f000 f87a 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002018:	2100      	movs	r1, #0
 800201a:	2011      	movs	r0, #17
 800201c:	f000 f876 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8002020:	2100      	movs	r1, #0
 8002022:	2012      	movs	r0, #18
 8002024:	f000 f872 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8002028:	2100      	movs	r1, #0
 800202a:	2013      	movs	r0, #19
 800202c:	f000 f86e 	bl	800210c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 8002030:	2100      	movs	r1, #0
 8002032:	2029      	movs	r0, #41	; 0x29
 8002034:	f000 f86a 	bl	800210c <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 8002038:	2100      	movs	r1, #0
 800203a:	2007      	movs	r0, #7
 800203c:	f000 f866 	bl	800210c <ili9325_WriteReg>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 8002048:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8002058:	23f0      	movs	r3, #240	; 0xf0
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8002066:	f001 f81d 	bl	80030a4 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 800206a:	2000      	movs	r0, #0
 800206c:	f000 f863 	bl	8002136 <ili9325_ReadReg>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}

08002076 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	460a      	mov	r2, r1
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	4613      	mov	r3, r2
 8002084:	80bb      	strh	r3, [r7, #4]
  ili9325_WriteReg(LCD_REG_32, Ypos);
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	4619      	mov	r1, r3
 800208a:	2020      	movs	r0, #32
 800208c:	f000 f83e 	bl	800210c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));      
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002096:	3301      	adds	r3, #1
 8002098:	b29b      	uxth	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	2021      	movs	r0, #33	; 0x21
 800209e:	f000 f835 	bl	800210c <ili9325_WriteReg>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	80fb      	strh	r3, [r7, #6]
 80020b4:	460b      	mov	r3, r1
 80020b6:	80bb      	strh	r3, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80020bc:	88ba      	ldrh	r2, [r7, #4]
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ffd7 	bl	8002076 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80020c8:	2022      	movs	r0, #34	; 0x22
 80020ca:	f001 f86d 	bl	80031a8 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 80020ce:	1cbb      	adds	r3, r7, #2
 80020d0:	2102      	movs	r1, #2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 f818 	bl	8003108 <LCD_IO_WriteMultipleData>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	460a      	mov	r2, r1
 80020ea:	80fb      	strh	r3, [r7, #6]
 80020ec:	4613      	mov	r3, r2
 80020ee:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80020f0:	88ba      	ldrh	r2, [r7, #4]
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ffbd 	bl	8002076 <ili9325_SetCursor>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(LCD_REG_34));
 80020fc:	2022      	movs	r0, #34	; 0x22
 80020fe:	f001 f873 	bl	80031e8 <LCD_IO_ReadData>
 8002102:	4603      	mov	r3, r0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	460a      	mov	r2, r1
 8002116:	71fb      	strb	r3, [r7, #7]
 8002118:	4613      	mov	r3, r2
 800211a:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	4618      	mov	r0, r3
 8002120:	f001 f842 	bl	80031a8 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2102      	movs	r1, #2
 8002128:	4618      	mov	r0, r3
 800212a:	f000 ffed 	bl	8003108 <LCD_IO_WriteMultipleData>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(LCDReg));
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f001 f84f 	bl	80031e8 <LCD_IO_ReadData>
 800214a:	4603      	mov	r3, r0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4604      	mov	r4, r0
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	4623      	mov	r3, r4
 8002164:	80fb      	strh	r3, [r7, #6]
 8002166:	4603      	mov	r3, r0
 8002168:	80bb      	strh	r3, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	807b      	strh	r3, [r7, #2]
 800216e:	4613      	mov	r3, r2
 8002170:	803b      	strh	r3, [r7, #0]
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (Ypos));
 8002172:	88bb      	ldrh	r3, [r7, #4]
 8002174:	4619      	mov	r1, r3
 8002176:	2050      	movs	r0, #80	; 0x50
 8002178:	f7ff ffc8 	bl	800210c <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (Ypos + Height - 1));
 800217c:	88ba      	ldrh	r2, [r7, #4]
 800217e:	883b      	ldrh	r3, [r7, #0]
 8002180:	4413      	add	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29b      	uxth	r3, r3
 8002188:	4619      	mov	r1, r3
 800218a:	2051      	movs	r0, #81	; 0x51
 800218c:	f7ff ffbe 	bl	800210c <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
 8002190:	88fa      	ldrh	r2, [r7, #6]
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	4413      	add	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800219c:	b29b      	uxth	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	2052      	movs	r0, #82	; 0x52
 80021a2:	f7ff ffb3 	bl	800210c <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);  
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80021ac:	3301      	adds	r3, #1
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	2053      	movs	r0, #83	; 0x53
 80021b4:	f7ff ffaa 	bl	800210c <ili9325_WriteReg>
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}

080021c0 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4604      	mov	r4, r0
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	80fb      	strh	r3, [r7, #6]
 80021d2:	4603      	mov	r3, r0
 80021d4:	80bb      	strh	r3, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]
 80021da:	4613      	mov	r3, r2
 80021dc:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff44 	bl	8002076 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80021ee:	2022      	movs	r0, #34	; 0x22
 80021f0:	f000 ffda 	bl	80031a8 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	81fb      	strh	r3, [r7, #14]
 80021f8:	e007      	b.n	800220a <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 80021fa:	89fb      	ldrh	r3, [r7, #14]
 80021fc:	490a      	ldr	r1, [pc, #40]	; (8002228 <ili9325_DrawHLine+0x68>)
 80021fe:	88fa      	ldrh	r2, [r7, #6]
 8002200:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	3301      	adds	r3, #1
 8002208:	81fb      	strh	r3, [r7, #14]
 800220a:	89fa      	ldrh	r2, [r7, #14]
 800220c:	883b      	ldrh	r3, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3f3      	bcc.n	80021fa <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8002212:	883b      	ldrh	r3, [r7, #0]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4619      	mov	r1, r3
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <ili9325_DrawHLine+0x68>)
 800221a:	f000 ff75 	bl	8003108 <LCD_IO_WriteMultipleData>
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	bf00      	nop
 8002228:	200004b0 	.word	0x200004b0

0800222c <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	80fb      	strh	r3, [r7, #6]
 800223e:	4603      	mov	r3, r0
 8002240:	80bb      	strh	r3, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
 8002246:	4613      	mov	r3, r2
 8002248:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1010);
 800224e:	f241 0110 	movw	r1, #4112	; 0x1010
 8002252:	2003      	movs	r0, #3
 8002254:	f7ff ff5a 	bl	800210c <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8002258:	887a      	ldrh	r2, [r7, #2]
 800225a:	88bb      	ldrh	r3, [r7, #4]
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff09 	bl	8002076 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002264:	2022      	movs	r0, #34	; 0x22
 8002266:	f000 ff9f 	bl	80031a8 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800226a:	2300      	movs	r3, #0
 800226c:	81fb      	strh	r3, [r7, #14]
 800226e:	e007      	b.n	8002280 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8002270:	89fb      	ldrh	r3, [r7, #14]
 8002272:	490d      	ldr	r1, [pc, #52]	; (80022a8 <ili9325_DrawVLine+0x7c>)
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 800227a:	89fb      	ldrh	r3, [r7, #14]
 800227c:	3301      	adds	r3, #1
 800227e:	81fb      	strh	r3, [r7, #14]
 8002280:	89fa      	ldrh	r2, [r7, #14]
 8002282:	883b      	ldrh	r3, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3f3      	bcc.n	8002270 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8002288:	883b      	ldrh	r3, [r7, #0]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4619      	mov	r1, r3
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <ili9325_DrawVLine+0x7c>)
 8002290:	f000 ff3a 	bl	8003108 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);  
 8002294:	f241 0118 	movw	r1, #4120	; 0x1018
 8002298:	2003      	movs	r0, #3
 800229a:	f7ff ff37 	bl	800210c <ili9325_WriteReg>
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200004b0 	.word	0x200004b0

080022ac <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	603a      	str	r2, [r7, #0]
 80022b6:	80fb      	strh	r3, [r7, #6]
 80022b8:	460b      	mov	r3, r1
 80022ba:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3302      	adds	r3, #2
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3304      	adds	r3, #4
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	330a      	adds	r3, #10
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	330c      	adds	r3, #12
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	461a      	mov	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1008);
 800230e:	f241 0108 	movw	r1, #4104	; 0x1008
 8002312:	2003      	movs	r0, #3
 8002314:	f7ff fefa 	bl	800210c <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8002318:	88ba      	ldrh	r2, [r7, #4]
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fea9 	bl	8002076 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002324:	2022      	movs	r0, #34	; 0x22
 8002326:	f000 ff3f 	bl	80031a8 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4619      	mov	r1, r3
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	f000 fee9 	bl	8003108 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 8002336:	f241 0118 	movw	r1, #4120	; 0x1018
 800233a:	2003      	movs	r0, #3
 800233c:	f7ff fee6 	bl	800210c <ili9325_WriteReg>
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	4623      	mov	r3, r4
 8002358:	80fb      	strh	r3, [r7, #6]
 800235a:	4603      	mov	r3, r0
 800235c:	80bb      	strh	r3, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]
 8002362:	4613      	mov	r3, r2
 8002364:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	883a      	ldrh	r2, [r7, #0]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8002374:	88ba      	ldrh	r2, [r7, #4]
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fe7b 	bl	8002076 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002380:	2022      	movs	r0, #34	; 0x22
 8002382:	f000 ff11 	bl	80031a8 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4619      	mov	r1, r3
 800238c:	6a38      	ldr	r0, [r7, #32]
 800238e:	f000 febb 	bl	8003108 <LCD_IO_WriteMultipleData>
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
	...

0800239c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fb63 	bl	8002a74 <stmpe811_GetInstance>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2bff      	cmp	r3, #255	; 0xff
 80023b6:	d112      	bne.n	80023de <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 fb5b 	bl	8002a74 <stmpe811_GetInstance>
 80023be:	4603      	mov	r3, r0
 80023c0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80023c2:	7bbb      	ldrb	r3, [r7, #14]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d80a      	bhi.n	80023de <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	b2d1      	uxtb	r1, r2
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <stmpe811_Init+0x4c>)
 80023d0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80023d2:	f000 fe27 	bl	8003024 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f807 	bl	80023ec <stmpe811_Reset>
    }
  }
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000730 	.word	0x20000730

080023ec <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2202      	movs	r2, #2
 80023fc:	2103      	movs	r1, #3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fe1c 	bl	800303c <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002404:	200a      	movs	r0, #10
 8002406:	f000 fe41 	bl	800308c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2200      	movs	r2, #0
 8002410:	2103      	movs	r1, #3
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fe12 	bl	800303c <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002418:	2002      	movs	r0, #2
 800241a:	f000 fe37 	bl	800308c <IOE_Delay>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002426:	b590      	push	{r4, r7, lr}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002430:	f000 fdf8 	bl	8003024 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fe12 	bl	8003064 <IOE_Read>
 8002440:	4603      	mov	r3, r0
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fe09 	bl	8003064 <IOE_Read>
 8002452:	4603      	mov	r3, r0
 8002454:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002456:	4323      	orrs	r3, r4
 8002458:	b21b      	sxth	r3, r3
 800245a:	b29b      	uxth	r3, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2109      	movs	r1, #9
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fdf3 	bl	8003064 <IOE_Read>
 800247e:	4603      	mov	r3, r0
 8002480:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	2109      	movs	r1, #9
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fdd2 	bl	800303c <IOE_Write>
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2109      	movs	r1, #9
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fdd5 	bl	8003064 <IOE_Read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	2109      	movs	r1, #9
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fdb4 	bl	800303c <IOE_Write>
    
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	460a      	mov	r2, r1
 80024e6:	80fb      	strh	r3, [r7, #6]
 80024e8:	4613      	mov	r3, r2
 80024ea:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	210a      	movs	r1, #10
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fdb4 	bl	8003064 <IOE_Read>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	797b      	ldrb	r3, [r7, #5]
 8002504:	4313      	orrs	r3, r2
 8002506:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	210a      	movs	r1, #10
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fd93 	bl	800303c <IOE_Write>
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	460a      	mov	r2, r1
 8002528:	80fb      	strh	r3, [r7, #6]
 800252a:	4613      	mov	r3, r2
 800252c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	210a      	movs	r1, #10
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fd93 	bl	8003064 <IOE_Read>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002542:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002546:	43db      	mvns	r3, r3
 8002548:	b25a      	sxtb	r2, r3
 800254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254e:	4013      	ands	r3, r2
 8002550:	b25b      	sxtb	r3, r3
 8002552:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	210a      	movs	r1, #10
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fd6d 	bl	800303c <IOE_Write>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <stmpe811_SetITPolarity>:
  *   @arg  STMPE811_POLARITY_LOW: Interrupt line is active Low/Falling edge      
  *   @arg  STMPE811_POLARITY_HIGH: Interrupt line is active High/Rising edge              
  * @retval None
  */
void stmpe811_SetITPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	460a      	mov	r2, r1
 8002574:	80fb      	strh	r3, [r7, #6]
 8002576:	4613      	mov	r3, r2
 8002578:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */ 
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2109      	movs	r1, #9
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fd6d 	bl	8003064 <IOE_Read>
 800258a:	4603      	mov	r3, r0
 800258c:	73fb      	strb	r3, [r7, #15]
  
  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x04;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	73fb      	strb	r3, [r7, #15]
    
  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	797b      	ldrb	r3, [r7, #5]
 800259a:	4313      	orrs	r3, r2
 800259c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	2109      	movs	r1, #9
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fd48 	bl	800303c <IOE_Write>
 
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <stmpe811_SetITType>:
  *   @arg  STMPE811_TYPE_LEVEL: Interrupt line is active in level model         
  *   @arg  STMPE811_TYPE_EDGE: Interrupt line is active in edge model           
  * @retval None
  */
void stmpe811_SetITType(uint16_t DeviceAddr, uint8_t Type)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	460a      	mov	r2, r1
 80025be:	80fb      	strh	r3, [r7, #6]
 80025c0:	4613      	mov	r3, r2
 80025c2:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */ 
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2109      	movs	r1, #9
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd48 	bl	8003064 <IOE_Read>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
  
  /* Mask the type bits */
  tmp &= ~(uint8_t)0x02;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	f023 0302 	bic.w	r3, r3, #2
 80025de:	73fb      	strb	r3, [r7, #15]
    
  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	797b      	ldrb	r3, [r7, #5]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	2109      	movs	r1, #9
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fd23 	bl	800303c <IOE_Write>
 
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	460a      	mov	r2, r1
 8002608:	80fb      	strh	r3, [r7, #6]
 800260a:	4613      	mov	r3, r2
 800260c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	797a      	ldrb	r2, [r7, #5]
 8002614:	210b      	movs	r1, #11
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fd10 	bl	800303c <IOE_Write>
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <stmpe811_IO_Start>:
  *         of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7.
  * @retval None
  */
void stmpe811_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2104      	movs	r1, #4
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fd14 	bl	8003064 <IOE_Read>
 800263c:	4603      	mov	r3, r0
 800263e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Disabled */    
  mode &= ~(STMPE811_IO_FCT | STMPE811_ADC_FCT);  
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	f023 0305 	bic.w	r3, r3, #5
 8002646:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	2104      	movs	r1, #4
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fcf3 	bl	800303c <IOE_Write>

  /* Disable AF for the selected IO pin(s) */
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f8d2 	bl	800280a <stmpe811_IO_DisableAF>
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <stmpe811_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL
  *   @arg  IO_MODE_IT_HIGH_LEVEL            
  * @retval 0 if no error, IO_Mode if error
  */
uint8_t stmpe811_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	80fb      	strh	r3, [r7, #6]
 800267c:	4613      	mov	r3, r2
 800267e:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8002684:	797b      	ldrb	r3, [r7, #5]
 8002686:	2b05      	cmp	r3, #5
 8002688:	f200 8088 	bhi.w	800279c <stmpe811_IO_Config+0x12c>
 800268c:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <stmpe811_IO_Config+0x24>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080026ad 	.word	0x080026ad
 8002698:	080026bb 	.word	0x080026bb
 800269c:	080026c9 	.word	0x080026c9
 80026a0:	080026ff 	.word	0x080026ff
 80026a4:	08002735 	.word	0x08002735
 80026a8:	08002769 	.word	0x08002769
  {
  case IO_MODE_INPUT: /* Input mode */
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN);
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	2200      	movs	r2, #0
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f87a 	bl	80027ac <stmpe811_IO_InitPin>
    break;
 80026b8:	e073      	b.n	80027a2 <stmpe811_IO_Config+0x132>
    
  case IO_MODE_OUTPUT: /* Output mode */
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	2201      	movs	r2, #1
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 f873 	bl	80027ac <stmpe811_IO_InitPin>
    break;
 80026c6:	e06c      	b.n	80027a2 <stmpe811_IO_Config+0x132>
  
  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    stmpe811_IO_EnableIT(DeviceAddr);
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f947 	bl	800295e <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	6839      	ldr	r1, [r7, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f968 	bl	80029aa <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2200      	movs	r2, #0
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f863 	bl	80027ac <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);      
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff62 	bl	80025b4 <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_RISING); 
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	2202      	movs	r2, #2
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f8a7 	bl	800284a <stmpe811_IO_SetEdgeMode>
    break;
 80026fc:	e051      	b.n	80027a2 <stmpe811_IO_Config+0x132>
  
  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    stmpe811_IO_EnableIT(DeviceAddr);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f92c 	bl	800295e <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f94d 	bl	80029aa <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	2200      	movs	r2, #0
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f848 	bl	80027ac <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);    
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	2102      	movs	r1, #2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff47 	bl	80025b4 <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2201      	movs	r2, #1
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f88c 	bl	800284a <stmpe811_IO_SetEdgeMode>
    break;
 8002732:	e036      	b.n	80027a2 <stmpe811_IO_Config+0x132>
  
  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    stmpe811_IO_EnableIT(DeviceAddr);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f911 	bl	800295e <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f932 	bl	80029aa <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2200      	movs	r2, #0
 800274a:	6839      	ldr	r1, [r7, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f82d 	bl	80027ac <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff2c 	bl	80025b4 <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_LOW);      
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff02 	bl	800256a <stmpe811_SetITPolarity>
    break;
 8002766:	e01c      	b.n	80027a2 <stmpe811_IO_Config+0x132>
    
  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    stmpe811_IO_EnableIT(DeviceAddr);
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f8f7 	bl	800295e <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f918 	bl	80029aa <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2200      	movs	r2, #0
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f813 	bl	80027ac <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff12 	bl	80025b4 <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	2104      	movs	r1, #4
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fee8 	bl	800256a <stmpe811_SetITPolarity>
    break;    
 800279a:	e002      	b.n	80027a2 <stmpe811_IO_Config+0x132>

  default:
    error_code = (uint8_t) IO_Mode;
 800279c:	797b      	ldrb	r3, [r7, #5]
 800279e:	73fb      	strb	r3, [r7, #15]
    break;
 80027a0:	bf00      	nop
  } 
  return error_code;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <stmpe811_IO_InitPin>:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.   
  * @param  Direction: could be STMPE811_DIRECTION_IN or STMPE811_DIRECTION_OUT.      
  * @retval None
  */
void stmpe811_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	80fb      	strh	r3, [r7, #6]
 80027b8:	4613      	mov	r3, r2
 80027ba:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;   
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
  
  /* Get all the Pins direction */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2113      	movs	r1, #19
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fc4c 	bl	8003064 <IOE_Read>
 80027cc:	4603      	mov	r3, r0
 80027ce:	73fb      	strb	r3, [r7, #15]
  
  /* Set the selected pin direction */
  if (Direction != STMPE811_DIRECTION_IN)
 80027d0:	797b      	ldrb	r3, [r7, #5]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <stmpe811_IO_InitPin+0x36>
  {
    tmp |= (uint8_t)IO_Pin;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	4313      	orrs	r3, r2
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e008      	b.n	80027f4 <stmpe811_IO_InitPin+0x48>
  }  
  else 
  {
    tmp &= ~(uint8_t)IO_Pin;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	b25a      	sxtb	r2, r3
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4013      	ands	r3, r2
 80027f0:	b25b      	sxtb	r3, r3
 80027f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write the register new value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	2113      	movs	r1, #19
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fc1d 	bl	800303c <IOE_Write>
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <stmpe811_IO_DisableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.        
  * @retval None
  */
void stmpe811_IO_DisableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	6039      	str	r1, [r7, #0]
 8002814:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the IO_AF register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2117      	movs	r1, #23
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fc1f 	bl	8003064 <IOE_Read>
 8002826:	4603      	mov	r3, r0
 8002828:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */
  tmp |= (uint8_t)IO_Pin;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	4313      	orrs	r3, r2
 8002832:	73fb      	strb	r3, [r7, #15]

  /* Write back the new value in IO AF register */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	2117      	movs	r1, #23
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fbfd 	bl	800303c <IOE_Write>
  
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <stmpe811_IO_SetEdgeMode>:
  * @param  Edge: The edge which will be detected. This parameter can be one or
  *         a combination of following values: STMPE811_EDGE_FALLING and STMPE811_EDGE_RISING .
  * @retval None
  */
void stmpe811_IO_SetEdgeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Edge)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	6039      	str	r1, [r7, #0]
 8002854:	80fb      	strh	r3, [r7, #6]
 8002856:	4613      	mov	r3, r2
 8002858:	717b      	strb	r3, [r7, #5]
  uint8_t tmp1 = 0, tmp2 = 0;   
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	2300      	movs	r3, #0
 8002860:	73bb      	strb	r3, [r7, #14]
  
  /* Get the current registers values */
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2116      	movs	r1, #22
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fbfb 	bl	8003064 <IOE_Read>
 800286e:	4603      	mov	r3, r0
 8002870:	73fb      	strb	r3, [r7, #15]
  tmp2 = IOE_Read(DeviceAddr, STMPE811_REG_IO_RE);
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2115      	movs	r1, #21
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fbf3 	bl	8003064 <IOE_Read>
 800287e:	4603      	mov	r3, r0
 8002880:	73bb      	strb	r3, [r7, #14]

  /* Disable the Falling Edge */
  tmp1 &= ~(uint8_t)IO_Pin;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b25b      	sxtb	r3, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	b25a      	sxtb	r2, r3
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4013      	ands	r3, r2
 8002890:	b25b      	sxtb	r3, r3
 8002892:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the Falling Edge */
  tmp2 &= ~(uint8_t)IO_Pin;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b25b      	sxtb	r3, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	b25a      	sxtb	r2, r3
 800289c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028a0:	4013      	ands	r3, r2
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	73bb      	strb	r3, [r7, #14]

  /* Enable the Falling edge if selected */
  if (Edge & STMPE811_EDGE_FALLING)
 80028a6:	797b      	ldrb	r3, [r7, #5]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <stmpe811_IO_SetEdgeMode+0x70>
  {
    tmp1 |= (uint8_t)IO_Pin;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the Rising edge if selected */
  if (Edge & STMPE811_EDGE_RISING)
 80028ba:	797b      	ldrb	r3, [r7, #5]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <stmpe811_IO_SetEdgeMode+0x84>
  {
    tmp2 |= (uint8_t)IO_Pin;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	73bb      	strb	r3, [r7, #14]
  }

  /* Write back the new registers values */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	2116      	movs	r1, #22
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fbb0 	bl	800303c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	7bba      	ldrb	r2, [r7, #14]
 80028e2:	2115      	movs	r1, #21
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fba9 	bl	800303c <IOE_Write>
}
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <stmpe811_IO_WritePin>:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @param PinState: The new IO pin state.
  * @retval None
  */
void stmpe811_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	6039      	str	r1, [r7, #0]
 80028fc:	80fb      	strh	r3, [r7, #6]
 80028fe:	4613      	mov	r3, r2
 8002900:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8002902:	797b      	ldrb	r3, [r7, #5]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <stmpe811_IO_WritePin+0x28>
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	2110      	movs	r1, #16
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fb92 	bl	800303c <IOE_Write>
  else
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
  } 
}
 8002918:	e007      	b.n	800292a <stmpe811_IO_WritePin+0x38>
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	2111      	movs	r1, #17
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fb89 	bl	800303c <IOE_Write>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <stmpe811_IO_ReadPin>:
  *        of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @retval IO pin(s) state.
  */
uint32_t stmpe811_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	6039      	str	r1, [r7, #0]
 800293c:	80fb      	strh	r3, [r7, #6]
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2112      	movs	r1, #18
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fb8d 	bl	8003064 <IOE_Read>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4013      	ands	r3, r2
 8002954:	b2db      	uxtb	r3, r3
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <stmpe811_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_IO_EnableIT(uint16_t DeviceAddr)
{ 
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002968:	f000 fb62 	bl	8003030 <IOE_ITConfig>
  
  /* Enable global IO IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_GIT_IO);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fdb3 	bl	80024dc <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fd73 	bl	8002464 <stmpe811_EnableGlobalIT>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <stmpe811_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.   
  * @retval None
  */
void stmpe811_IO_DisableIT(uint16_t DeviceAddr)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	80fb      	strh	r3, [r7, #6]
  /* Disable the global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fd84 	bl	80024a0 <stmpe811_DisableGlobalIT>
  
  /* Disable global IO IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2180      	movs	r1, #128	; 0x80
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fdbe 	bl	800251e <stmpe811_DisableITSource>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <stmpe811_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7.
  * @retval None
  */
void stmpe811_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	6039      	str	r1, [r7, #0]
 80029b4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the IO interrupt state */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	210c      	movs	r1, #12
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fb4f 	bl	8003064 <IOE_Read>
 80029c6:	4603      	mov	r3, r0
 80029c8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the interrupts to be enabled */    
  tmp |= (uint8_t)IO_Pin;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the register new value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	210c      	movs	r1, #12
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fb2d 	bl	800303c <IOE_Write>
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <stmpe811_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  STMPE811_PIN_x Where x can be from 0 to 7.             
  * @retval Status of the checked IO pin(s).
  */
uint32_t stmpe811_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	6039      	str	r1, [r7, #0]
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	210d      	movs	r1, #13
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fb31 	bl	8003064 <IOE_Read>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	b2db      	uxtb	r3, r3
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <stmpe811_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.            
  * @retval None
  */
void stmpe811_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	6039      	str	r1, [r7, #0]
 8002a20:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IO IT pending bit */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fde9 	bl	80025fe <stmpe811_ClearGlobalIT>
  
  /* Clear the IO IT pending bit(s) */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	210d      	movs	r1, #13
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fb00 	bl	800303c <IOE_Write>
  
  /* Clear the Edge detection pending bit*/
  IOE_Write(DeviceAddr, STMPE811_REG_IO_ED, (uint8_t)IO_Pin);
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	2114      	movs	r1, #20
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 faf8 	bl	800303c <IOE_Write>
  
  /* Clear the Rising edge pending bit */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, (uint8_t)IO_Pin);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	2115      	movs	r1, #21
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 faf0 	bl	800303c <IOE_Write>
  
  /* Clear the Falling edge pending bit */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	2116      	movs	r1, #22
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fae8 	bl	800303c <IOE_Write>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	e00b      	b.n	8002aa0 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <stmpe811_GetInstance+0x40>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d101      	bne.n	8002a9a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	e006      	b.n	8002aa8 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d9f0      	bls.n	8002a88 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002aa6:	23ff      	movs	r3, #255	; 0xff
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000730 	.word	0x20000730

08002ab8 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <BSP_LED_On+0x2c>)
 8002ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <BSP_LED_On+0x30>)
 8002ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f002 f86b 	bl	8004bb0 <HAL_GPIO_WritePin>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200000ac 	.word	0x200000ac
 8002ae8:	080093a0 	.word	0x080093a0

08002aec <BSP_JOY_Init>:
  *            @arg  JOY_MODE_EXTI: Joystick pins will be connected to EXTI line 
  *                                 with interrupt generation capability  
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_JOY_Init(JOYMode_TypeDef Joy_Mode)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  
  /* Initialize the IO functionalities */
  ret = BSP_IO_Init();
 8002afa:	f000 fba9 	bl	8003250 <BSP_IO_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	73fb      	strb	r3, [r7, #15]
  
  /* Configure joystick pins in IT mode */
  if((ret == IO_OK) && (Joy_Mode == JOY_MODE_EXTI))
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d107      	bne.n	8002b18 <BSP_JOY_Init+0x2c>
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d104      	bne.n	8002b18 <BSP_JOY_Init+0x2c>
  {
    /* Configure joystick pins in IT mode */
    BSP_IO_ConfigPin(JOY_ALL_PINS, IO_MODE_IT_FALLING_EDGE);
 8002b0e:	2103      	movs	r1, #3
 8002b10:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002b14:	f000 fbe0 	bl	80032d8 <BSP_IO_ConfigPin>
  }

  return ret; 
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <BSP_JOY_GetState>:
  *            @arg  JOY_LEFT
  *            @arg  JOY_RIGHT
  *            @arg  JOY_UP
  */
JOYState_TypeDef BSP_JOY_GetState(void)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
  uint32_t tmp = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	607b      	str	r3, [r7, #4]
  
  /* Read the status joystick pins */
  tmp = BSP_IO_ReadPin(JOY_ALL_PINS);
 8002b2c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002b30:	f000 fc00 	bl	8003334 <BSP_IO_ReadPin>
 8002b34:	6078      	str	r0, [r7, #4]
  /* Check the pressed keys */  
  if((tmp & JOY_NONE_PIN) == JOY_NONE)
  {
    return(JOYState_TypeDef) JOY_NONE;
  }
  else if(!(tmp & JOY_SEL_PIN))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <BSP_JOY_GetState+0x22>
  {
    return(JOYState_TypeDef) JOY_SEL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e01c      	b.n	8002b7e <BSP_JOY_GetState+0x5c>
  }
  else if(!(tmp & JOY_DOWN_PIN))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <BSP_JOY_GetState+0x30>
  {
    return(JOYState_TypeDef) JOY_DOWN;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e015      	b.n	8002b7e <BSP_JOY_GetState+0x5c>
  } 
  else if(!(tmp & JOY_LEFT_PIN))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <BSP_JOY_GetState+0x3e>
  {
    return(JOYState_TypeDef) JOY_LEFT;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e00e      	b.n	8002b7e <BSP_JOY_GetState+0x5c>
  }
  else if(!(tmp & JOY_RIGHT_PIN))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <BSP_JOY_GetState+0x4c>
  {
    return(JOYState_TypeDef) JOY_RIGHT;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e007      	b.n	8002b7e <BSP_JOY_GetState+0x5c>
  }
  else if(!(tmp & JOY_UP_PIN))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <BSP_JOY_GetState+0x5a>
  {
    return(JOYState_TypeDef) JOY_UP;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	e000      	b.n	8002b7e <BSP_JOY_GetState+0x5c>
  }
  else
  { 
    return(JOYState_TypeDef) JOY_NONE;
 8002b7c:	2305      	movs	r3, #5
  }  
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <I2Cx_MspInit>:
/**
  * @brief Eval I2Cx MSP Initialization
  * @param hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};  
 8002b90:	f107 0318 	add.w	r3, r7, #24
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]

  if (hi2c->Instance == EVAL_I2Cx)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a32      	ldr	r2, [pc, #200]	; (8002c6c <I2Cx_MspInit+0xe4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d15d      	bne.n	8002c64 <I2Cx_MspInit+0xdc>
  {
    /*## Configure the GPIOs ################################################*/  

    /* Enable GPIO clock */
    EVAL_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002bae:	f043 0308 	orr.w	r3, r3, #8
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
    EVAL_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002bc6:	f043 0308 	orr.w	r3, r3, #8
 8002bca:	6193      	str	r3, [r2, #24]
 8002bcc:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]
      
    /* Configure I2C Tx as alternate function  */
    gpioinitstruct.Pin       = EVAL_I2Cx_SCL_PIN;
 8002bd8:	2340      	movs	r3, #64	; 0x40
 8002bda:	61bb      	str	r3, [r7, #24]
    gpioinitstruct.Mode      = GPIO_MODE_AF_OD;
 8002bdc:	2312      	movs	r3, #18
 8002bde:	61fb      	str	r3, [r7, #28]
    gpioinitstruct.Pull      = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
    gpioinitstruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EVAL_I2Cx_SCL_GPIO_PORT, &gpioinitstruct);
 8002be8:	f107 0318 	add.w	r3, r7, #24
 8002bec:	4619      	mov	r1, r3
 8002bee:	4821      	ldr	r0, [pc, #132]	; (8002c74 <I2Cx_MspInit+0xec>)
 8002bf0:	f001 fe5a 	bl	80048a8 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    gpioinitstruct.Pin = EVAL_I2Cx_SDA_PIN;
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(EVAL_I2Cx_SDA_GPIO_PORT, &gpioinitstruct);
 8002bf8:	f107 0318 	add.w	r3, r7, #24
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	481d      	ldr	r0, [pc, #116]	; (8002c74 <I2Cx_MspInit+0xec>)
 8002c00:	f001 fe52 	bl	80048a8 <HAL_GPIO_Init>
    
    /*## Configure the Eval I2Cx peripheral #######################################*/ 
    /* Enable Eval_I2Cx clock */
    EVAL_I2Cx_CLK_ENABLE();
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c0e:	61d3      	str	r3, [r2, #28]
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]

    /* Add delay related to RCC workaround */
    while (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) != RCC_APB1ENR_I2C1EN) {};
 8002c1c:	bf00      	nop
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c2a:	d1f8      	bne.n	8002c1e <I2Cx_MspInit+0x96>
    
    /* Force the I2C Periheral Clock Reset */  
    EVAL_I2Cx_FORCE_RESET();
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c36:	6113      	str	r3, [r2, #16]
      
    /* Release the I2C Periheral Clock Reset */  
    EVAL_I2Cx_RELEASE_RESET(); 
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <I2Cx_MspInit+0xe8>)
 8002c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c42:	6113      	str	r3, [r2, #16]
    
    /* Enable and set Eval I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(EVAL_I2Cx_EV_IRQn, 0xE, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	210e      	movs	r1, #14
 8002c48:	201f      	movs	r0, #31
 8002c4a:	f001 fbba 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EVAL_I2Cx_EV_IRQn);
 8002c4e:	201f      	movs	r0, #31
 8002c50:	f001 fbd3 	bl	80043fa <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Eval I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(EVAL_I2Cx_ER_IRQn, 0xE, 0);
 8002c54:	2200      	movs	r2, #0
 8002c56:	210e      	movs	r1, #14
 8002c58:	2020      	movs	r0, #32
 8002c5a:	f001 fbb2 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EVAL_I2Cx_ER_IRQn);  
 8002c5e:	2020      	movs	r0, #32
 8002c60:	f001 fbcb 	bl	80043fa <HAL_NVIC_EnableIRQ>
  }
}
 8002c64:	bf00      	nop
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40005400 	.word	0x40005400
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40010c00 	.word	0x40010c00

08002c78 <I2Cx_Init>:

/**
  * @brief Eval I2Cx Bus initialization
  */
static void I2Cx_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
 8002c7c:	4814      	ldr	r0, [pc, #80]	; (8002cd0 <I2Cx_Init+0x58>)
 8002c7e:	f003 fe63 	bl	8006948 <HAL_I2C_GetState>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d121      	bne.n	8002ccc <I2Cx_Init+0x54>
  {
    heval_I2c.Instance              = EVAL_I2Cx;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <I2Cx_Init+0x58>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <I2Cx_Init+0x5c>)
 8002c8c:	601a      	str	r2, [r3, #0]
    heval_I2c.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <I2Cx_Init+0x58>)
 8002c90:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <I2Cx_Init+0x60>)
 8002c92:	605a      	str	r2, [r3, #4]
    heval_I2c.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <I2Cx_Init+0x58>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
    heval_I2c.Init.OwnAddress1      = 0;
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <I2Cx_Init+0x58>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
    heval_I2c.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <I2Cx_Init+0x58>)
 8002ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ca6:	611a      	str	r2, [r3, #16]
    heval_I2c.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <I2Cx_Init+0x58>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
    heval_I2c.Init.OwnAddress2      = 0;
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <I2Cx_Init+0x58>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
    heval_I2c.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <I2Cx_Init+0x58>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
    heval_I2c.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;  
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <I2Cx_Init+0x58>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&heval_I2c);
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <I2Cx_Init+0x58>)
 8002cc2:	f7ff ff61 	bl	8002b88 <I2Cx_MspInit>
    HAL_I2C_Init(&heval_I2c);
 8002cc6:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <I2Cx_Init+0x58>)
 8002cc8:	f003 f956 	bl	8005f78 <HAL_I2C_Init>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000b0c 	.word	0x20000b0c
 8002cd4:	40005400 	.word	0x40005400
 8002cd8:	00061a80 	.word	0x00061a80

08002cdc <I2Cx_ITConfig>:

/**
  * @brief  Configures I2C Interrupt.
  */
static void I2Cx_ITConfig(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
  static uint8_t I2C_IT_Enabled = 0;  
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
  
  if(I2C_IT_Enabled == 0)
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <I2Cx_ITConfig+0x70>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d125      	bne.n	8002d44 <I2Cx_ITConfig+0x68>
  {
    I2C_IT_Enabled = 1;  
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <I2Cx_ITConfig+0x70>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
    
    /* Enable the GPIO EXTI clock */
    IOE_IT_GPIO_CLK_ENABLE();
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <I2Cx_ITConfig+0x74>)
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <I2Cx_ITConfig+0x74>)
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	6193      	str	r3, [r2, #24]
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <I2Cx_ITConfig+0x74>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
    
    gpioinitstruct.Pin   = IOE_IT_PIN;
 8002d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d1a:	60bb      	str	r3, [r7, #8]
    gpioinitstruct.Pull  = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d20:	2303      	movs	r3, #3
 8002d22:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode  = GPIO_MODE_IT_FALLING;
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <I2Cx_ITConfig+0x78>)
 8002d26:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(IOE_IT_GPIO_PORT, &gpioinitstruct);
 8002d28:	f107 0308 	add.w	r3, r7, #8
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	480a      	ldr	r0, [pc, #40]	; (8002d58 <I2Cx_ITConfig+0x7c>)
 8002d30:	f001 fdba 	bl	80048a8 <HAL_GPIO_Init>
    
    /* Set priority and Enable GPIO EXTI Interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(IOE_IT_EXTI_IRQn), 0xE, 0);
 8002d34:	2200      	movs	r2, #0
 8002d36:	210e      	movs	r1, #14
 8002d38:	2028      	movs	r0, #40	; 0x28
 8002d3a:	f001 fb42 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(IOE_IT_EXTI_IRQn));
 8002d3e:	2028      	movs	r0, #40	; 0x28
 8002d40:	f001 fb5b 	bl	80043fa <HAL_NVIC_EnableIRQ>
  }
}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000078c 	.word	0x2000078c
 8002d50:	40021000 	.word	0x40021000
 8002d54:	10210000 	.word	0x10210000
 8002d58:	40010c00 	.word	0x40010c00

08002d5c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af04      	add	r7, sp, #16
 8002d62:	4603      	mov	r3, r0
 8002d64:	80fb      	strh	r3, [r7, #6]
 8002d66:	460b      	mov	r3, r1
 8002d68:	717b      	strb	r3, [r7, #5]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&heval_I2c, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8002d72:	797b      	ldrb	r3, [r7, #5]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <I2Cx_WriteData+0x50>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	88f9      	ldrh	r1, [r7, #6]
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	2301      	movs	r3, #1
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2301      	movs	r3, #1
 8002d88:	4809      	ldr	r0, [pc, #36]	; (8002db0 <I2Cx_WriteData+0x54>)
 8002d8a:	f003 fa7b 	bl	8006284 <HAL_I2C_Mem_Write>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 f837 	bl	8002e10 <I2Cx_Error>
  }
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200000c0 	.word	0x200000c0
 8002db0:	20000b0c 	.word	0x20000b0c

08002db4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af04      	add	r7, sp, #16
 8002dba:	4603      	mov	r3, r0
 8002dbc:	460a      	mov	r2, r1
 8002dbe:	80fb      	strh	r3, [r7, #6]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&heval_I2c, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002dcc:	797b      	ldrb	r3, [r7, #5]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <I2Cx_ReadData+0x54>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	88f9      	ldrh	r1, [r7, #6]
 8002dd6:	9302      	str	r3, [sp, #8]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	f107 030e 	add.w	r3, r7, #14
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	4809      	ldr	r0, [pc, #36]	; (8002e0c <I2Cx_ReadData+0x58>)
 8002de6:	f003 fb47 	bl	8006478 <HAL_I2C_Mem_Read>
 8002dea:	4603      	mov	r3, r0
 8002dec:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <I2Cx_ReadData+0x4a>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f809 	bl	8002e10 <I2Cx_Error>
  
  }
  return value;
 8002dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200000c0 	.word	0x200000c0
 8002e0c:	20000b0c 	.word	0x20000b0c

08002e10 <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2Cx_Error(uint8_t Addr)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the IOE comunication BUS */
  HAL_I2C_DeInit(&heval_I2c);
 8002e1a:	4804      	ldr	r0, [pc, #16]	; (8002e2c <I2Cx_Error+0x1c>)
 8002e1c:	f003 f9f0 	bl	8006200 <HAL_I2C_DeInit>
  
  /* Re-Initiaize the IOE comunication BUS */
  I2Cx_Init();  
 8002e20:	f7ff ff2a 	bl	8002c78 <I2Cx_Init>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000b0c 	.word	0x20000b0c

08002e30 <SPIx_MspInit>:
#ifdef HAL_SPI_MODULE_ENABLED
/**
  * @brief  Initializes SPI MSP.
  */
static void SPIx_MspInit(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  EVAL_SPIx_SCK_GPIO_CLK_ENABLE();
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a2e      	ldr	r2, [pc, #184]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e4a:	f043 0310 	orr.w	r3, r3, #16
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]
  EVAL_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8002e5c:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e62:	f043 0310 	orr.w	r3, r3, #16
 8002e66:	6193      	str	r3, [r2, #24]
 8002e68:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6193      	str	r3, [r2, #24]
 8002e80:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_AFIO_REMAP_SPI3_ENABLE();
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <SPIx_MspInit+0xd8>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea2:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <SPIx_MspInit+0xd8>)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	6053      	str	r3, [r2, #4]
  
  /* configure SPI SCK */
  gpioinitstruct.Pin        = EVAL_SPIx_SCK_PIN;
 8002ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eac:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EVAL_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4812      	ldr	r0, [pc, #72]	; (8002f0c <SPIx_MspInit+0xdc>)
 8002ec2:	f001 fcf1 	bl	80048a8 <HAL_GPIO_Init>

  /* configure SPI MISO and MOSI */
  gpioinitstruct.Pin        = (EVAL_SPIx_MISO_PIN | EVAL_SPIx_MOSI_PIN);
 8002ec6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002eca:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_HIGH;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EVAL_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	480b      	ldr	r0, [pc, #44]	; (8002f0c <SPIx_MspInit+0xdc>)
 8002ee0:	f001 fce2 	bl	80048a8 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 
  /* Enable SPI clock */
  EVAL_SPIx_CLK_ENABLE();
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	4a06      	ldr	r2, [pc, #24]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eee:	61d3      	str	r3, [r2, #28]
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <SPIx_MspInit+0xd4>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
}
 8002efc:	bf00      	nop
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40011000 	.word	0x40011000

08002f10 <SPIx_Init>:

/**
  * @brief  Initializes SPI HAL.
  */
static void SPIx_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* DeInitializes the SPI peripheral */
  heval_Spi.Instance = EVAL_SPIx;
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <SPIx_Init+0x6c>)
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <SPIx_Init+0x70>)
 8002f18:	601a      	str	r2, [r3, #0]
  HAL_SPI_DeInit(&heval_Spi);
 8002f1a:	4818      	ldr	r0, [pc, #96]	; (8002f7c <SPIx_Init+0x6c>)
 8002f1c:	f004 ff2a 	bl	8007d74 <HAL_SPI_DeInit>

  /* SPI Config */
  /* SPI baudrate is set to 9 MHz (PCLK2/SPI_BaudRatePrescaler = 72/8 = 9 MHz) */
  heval_Spi.Init.BaudRatePrescaler  = SPI_BAUDRATEPRESCALER_8;
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <SPIx_Init+0x6c>)
 8002f22:	2210      	movs	r2, #16
 8002f24:	61da      	str	r2, [r3, #28]
  heval_Spi.Init.Direction          = SPI_DIRECTION_2LINES;
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <SPIx_Init+0x6c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  heval_Spi.Init.CLKPhase           = SPI_PHASE_2EDGE;
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <SPIx_Init+0x6c>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	615a      	str	r2, [r3, #20]
  heval_Spi.Init.CLKPolarity        = SPI_POLARITY_HIGH;
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <SPIx_Init+0x6c>)
 8002f34:	2202      	movs	r2, #2
 8002f36:	611a      	str	r2, [r3, #16]
  heval_Spi.Init.CRCCalculation     = SPI_CRCCALCULATION_DISABLE;
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <SPIx_Init+0x6c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
  heval_Spi.Init.CRCPolynomial      = 7;
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <SPIx_Init+0x6c>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
  heval_Spi.Init.DataSize           = SPI_DATASIZE_8BIT;
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <SPIx_Init+0x6c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  heval_Spi.Init.FirstBit           = SPI_FIRSTBIT_MSB;
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <SPIx_Init+0x6c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]
  heval_Spi.Init.NSS                = SPI_NSS_SOFT;
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <SPIx_Init+0x6c>)
 8002f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f56:	619a      	str	r2, [r3, #24]
  heval_Spi.Init.TIMode             = SPI_TIMODE_DISABLE;
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <SPIx_Init+0x6c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
  heval_Spi.Init.Mode               = SPI_MODE_MASTER;
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <SPIx_Init+0x6c>)
 8002f60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f64:	605a      	str	r2, [r3, #4]
  
  SPIx_MspInit();
 8002f66:	f7ff ff63 	bl	8002e30 <SPIx_MspInit>
  if (HAL_SPI_Init(&heval_Spi) != HAL_OK)
 8002f6a:	4804      	ldr	r0, [pc, #16]	; (8002f7c <SPIx_Init+0x6c>)
 8002f6c:	f004 fe7e 	bl	8007c6c <HAL_SPI_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d000      	beq.n	8002f78 <SPIx_Init+0x68>
  {
    /* Should not occur */
    while(1) {};
 8002f76:	e7fe      	b.n	8002f76 <SPIx_Init+0x66>
  }
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000734 	.word	0x20000734
 8002f80:	40003c00 	.word	0x40003c00

08002f84 <SPIx_Read>:
/**
  * @brief SPI Read 4 bytes from device
  * @retval Read data
*/
static uint32_t SPIx_Read(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t          readvalue = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
  uint32_t          writevalue = 0xFFFFFFFF;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295
 8002f96:	607b      	str	r3, [r7, #4]
  
  status = HAL_SPI_TransmitReceive(&heval_Spi, (uint8_t*) &writevalue, (uint8_t*) &readvalue, 1, SpixTimeout);
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <SPIx_Read+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f107 0208 	add.w	r2, r7, #8
 8002fa0:	1d39      	adds	r1, r7, #4
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	4808      	ldr	r0, [pc, #32]	; (8002fc8 <SPIx_Read+0x44>)
 8002fa8:	f004 ff1e 	bl	8007de8 <HAL_SPI_TransmitReceive>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <SPIx_Read+0x36>
  {
    /* Execute user timeout callback */
    SPIx_Error();
 8002fb6:	f000 f829 	bl	800300c <SPIx_Error>
  }

  return readvalue;
 8002fba:	68bb      	ldr	r3, [r7, #8]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200000bc 	.word	0x200000bc
 8002fc8:	20000734 	.word	0x20000734

08002fcc <SPIx_Write>:
/**
  * @brief  SPI Write a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint8_t Value)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  status = HAL_SPI_TransmitReceive(&heval_Spi, (uint8_t*) &Value, &data, 1, SpixTimeout);
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <SPIx_Write+0x38>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f107 020e 	add.w	r2, r7, #14
 8002fe2:	1df9      	adds	r1, r7, #7
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4807      	ldr	r0, [pc, #28]	; (8003008 <SPIx_Write+0x3c>)
 8002fea:	f004 fefd 	bl	8007de8 <HAL_SPI_TransmitReceive>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	73fb      	strb	r3, [r7, #15]
    
  /* Check the communication status */
  if(status != HAL_OK)
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <SPIx_Write+0x30>
  {
    /* Execute user timeout callback */
    SPIx_Error();
 8002ff8:	f000 f808 	bl	800300c <SPIx_Error>
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200000bc 	.word	0x200000bc
 8003008:	20000734 	.word	0x20000734

0800300c <SPIx_Error>:
/**
  * @brief  SPI error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&heval_Spi);
 8003010:	4803      	ldr	r0, [pc, #12]	; (8003020 <SPIx_Error+0x14>)
 8003012:	f004 feaf 	bl	8007d74 <HAL_SPI_DeInit>

  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8003016:	f7ff ff7b 	bl	8002f10 <SPIx_Init>
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000734 	.word	0x20000734

08003024 <IOE_Init>:

/**
  * @brief  Initializes IOE low level.
  */
void IOE_Init(void) 
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003028:	f7ff fe26 	bl	8002c78 <I2Cx_Init>
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}

08003030 <IOE_ITConfig>:

/**
  * @brief  Configures IOE low level Interrupt.
  */
void IOE_ITConfig(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003034:	f7ff fe52 	bl	8002cdc <I2Cx_ITConfig>
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <IOE_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
 8003046:	460b      	mov	r3, r1
 8003048:	71bb      	strb	r3, [r7, #6]
 800304a:	4613      	mov	r3, r2
 800304c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	b29b      	uxth	r3, r3
 8003052:	797a      	ldrb	r2, [r7, #5]
 8003054:	79b9      	ldrb	r1, [r7, #6]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fe80 	bl	8002d5c <I2Cx_WriteData>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <IOE_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	460a      	mov	r2, r1
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	4613      	mov	r3, r2
 8003072:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	b29b      	uxth	r3, r3
 8003078:	79ba      	ldrb	r2, [r7, #6]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fe99 	bl	8002db4 <I2Cx_ReadData>
 8003082:	4603      	mov	r3, r0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <IOE_Delay>:
/**
  * @brief  IOE delay. 
  * @param  Delay: Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fe8f 	bl	8003db8 <HAL_Delay>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpioinitstruct;

  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_NCS_GPIO_CLK_ENABLE();
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <LCD_IO_Init+0x5c>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	4a14      	ldr	r2, [pc, #80]	; (8003100 <LCD_IO_Init+0x5c>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6193      	str	r3, [r2, #24]
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <LCD_IO_Init+0x5c>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
    
  /* Configure NCS in Output Push-Pull mode */
  gpioinitstruct.Pin     = LCD_NCS_PIN;
 80030c2:	2304      	movs	r3, #4
 80030c4:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Mode    = GPIO_MODE_OUTPUT_PP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Pull    = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Speed   = GPIO_SPEED_FREQ_HIGH;
 80030ce:	2303      	movs	r3, #3
 80030d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &gpioinitstruct);
 80030d2:	f107 0308 	add.w	r3, r7, #8
 80030d6:	4619      	mov	r1, r3
 80030d8:	480a      	ldr	r0, [pc, #40]	; (8003104 <LCD_IO_Init+0x60>)
 80030da:	f001 fbe5 	bl	80048a8 <HAL_GPIO_Init>
    
  /* Set or Reset the control line */
  LCD_CS_LOW();
 80030de:	2200      	movs	r2, #0
 80030e0:	2104      	movs	r1, #4
 80030e2:	4808      	ldr	r0, [pc, #32]	; (8003104 <LCD_IO_Init+0x60>)
 80030e4:	f001 fd64 	bl	8004bb0 <HAL_GPIO_WritePin>
  LCD_CS_HIGH();
 80030e8:	2201      	movs	r2, #1
 80030ea:	2104      	movs	r1, #4
 80030ec:	4805      	ldr	r0, [pc, #20]	; (8003104 <LCD_IO_Init+0x60>)
 80030ee:	f001 fd5f 	bl	8004bb0 <HAL_GPIO_WritePin>

  SPIx_Init();
 80030f2:	f7ff ff0d 	bl	8002f10 <SPIx_Init>
}
 80030f6:	bf00      	nop
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	40010c00 	.word	0x40010c00

08003108 <LCD_IO_WriteMultipleData>:
  * @brief  Write register value.
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]

  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003116:	2200      	movs	r2, #0
 8003118:	2104      	movs	r1, #4
 800311a:	4821      	ldr	r0, [pc, #132]	; (80031a0 <LCD_IO_WriteMultipleData+0x98>)
 800311c:	f001 fd48 	bl	8004bb0 <HAL_GPIO_WritePin>

  /* Send Start Byte */
  SPIx_Write(START_BYTE | LCD_WRITE_REG);
 8003120:	2072      	movs	r0, #114	; 0x72
 8003122:	f7ff ff53 	bl	8002fcc <SPIx_Write>

  for (counter = Size; counter != 0; counter--)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e024      	b.n	8003176 <LCD_IO_WriteMultipleData+0x6e>
  {
    while(((heval_Spi.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 800312c:	bf00      	nop
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <LCD_IO_WriteMultipleData+0x9c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d1f8      	bne.n	800312e <LCD_IO_WriteMultipleData+0x26>
    {
    }  
    /* Need to invert bytes for LCD*/
    *((__IO uint8_t*)&heval_Spi.Instance->DR) = *(pData+1);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <LCD_IO_WriteMultipleData+0x9c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	330c      	adds	r3, #12
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	7852      	ldrb	r2, [r2, #1]
 8003146:	701a      	strb	r2, [r3, #0]
  
    while(((heval_Spi.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8003148:	bf00      	nop
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <LCD_IO_WriteMultipleData+0x9c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d1f8      	bne.n	800314a <LCD_IO_WriteMultipleData+0x42>
    {
    }  
    *((__IO uint8_t*)&heval_Spi.Instance->DR) = *pData;
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <LCD_IO_WriteMultipleData+0x9c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]
    counter--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3b01      	subs	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
    pData += 2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3302      	adds	r3, #2
 800316e:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3b01      	subs	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1d7      	bne.n	800312c <LCD_IO_WriteMultipleData+0x24>
  }

  /* Wait until the bus is ready before releasing Chip select */ 
  while(((heval_Spi.Instance->SR) & SPI_FLAG_BSY) != RESET)
 800317c:	bf00      	nop
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <LCD_IO_WriteMultipleData+0x9c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f8      	bne.n	800317e <LCD_IO_WriteMultipleData+0x76>
  {
  }  

  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_HIGH();
 800318c:	2201      	movs	r2, #1
 800318e:	2104      	movs	r1, #4
 8003190:	4803      	ldr	r0, [pc, #12]	; (80031a0 <LCD_IO_WriteMultipleData+0x98>)
 8003192:	f001 fd0d 	bl	8004bb0 <HAL_GPIO_WritePin>
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40010c00 	.word	0x40010c00
 80031a4:	20000734 	.word	0x20000734

080031a8 <LCD_IO_WriteReg>:
/**
  * @brief  register address.
  * @param  Reg
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80031b2:	2200      	movs	r2, #0
 80031b4:	2104      	movs	r1, #4
 80031b6:	480b      	ldr	r0, [pc, #44]	; (80031e4 <LCD_IO_WriteReg+0x3c>)
 80031b8:	f001 fcfa 	bl	8004bb0 <HAL_GPIO_WritePin>
  
  /* Send Start Byte */
  SPIx_Write(START_BYTE | SET_INDEX);
 80031bc:	2070      	movs	r0, #112	; 0x70
 80031be:	f7ff ff05 	bl	8002fcc <SPIx_Write>
  
  /* Write 16-bit Reg Index (High Byte is 0) */
  SPIx_Write(0x00);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7ff ff02 	bl	8002fcc <SPIx_Write>
  SPIx_Write(Reg);
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fefe 	bl	8002fcc <SPIx_Write>
  
  /* Deselect : Chip Select high */
 LCD_CS_HIGH();
 80031d0:	2201      	movs	r2, #1
 80031d2:	2104      	movs	r1, #4
 80031d4:	4803      	ldr	r0, [pc, #12]	; (80031e4 <LCD_IO_WriteReg+0x3c>)
 80031d6:	f001 fceb 	bl	8004bb0 <HAL_GPIO_WritePin>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40010c00 	.word	0x40010c00

080031e8 <LCD_IO_ReadData>:
/**
  * @brief  Read register value.
  * @param  Reg
  */
uint16_t LCD_IO_ReadData(uint16_t Reg) 
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	80fb      	strh	r3, [r7, #6]
  uint32_t readvalue = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Send Reg value to Read */
  LCD_IO_WriteReg(Reg);
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ffd4 	bl	80031a8 <LCD_IO_WriteReg>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003200:	2200      	movs	r2, #0
 8003202:	2104      	movs	r1, #4
 8003204:	4811      	ldr	r0, [pc, #68]	; (800324c <LCD_IO_ReadData+0x64>)
 8003206:	f001 fcd3 	bl	8004bb0 <HAL_GPIO_WritePin>
  
  /* Send Start Byte */
  SPIx_Write(START_BYTE | LCD_READ_REG);
 800320a:	2073      	movs	r0, #115	; 0x73
 800320c:	f7ff fede 	bl	8002fcc <SPIx_Write>
  /* Read Upper Byte */
  SPIx_Write(0xFF);
 8003210:	20ff      	movs	r0, #255	; 0xff
 8003212:	f7ff fedb 	bl	8002fcc <SPIx_Write>
  readvalue = SPIx_Read();
 8003216:	f7ff feb5 	bl	8002f84 <SPIx_Read>
 800321a:	60f8      	str	r0, [r7, #12]
  readvalue = readvalue << 8;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	60fb      	str	r3, [r7, #12]
  readvalue |= SPIx_Read();
 8003222:	f7ff feaf 	bl	8002f84 <SPIx_Read>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  
  HAL_Delay(10);
 800322e:	200a      	movs	r0, #10
 8003230:	f000 fdc2 	bl	8003db8 <HAL_Delay>

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8003234:	2201      	movs	r2, #1
 8003236:	2104      	movs	r1, #4
 8003238:	4804      	ldr	r0, [pc, #16]	; (800324c <LCD_IO_ReadData+0x64>)
 800323a:	f001 fcb9 	bl	8004bb0 <HAL_GPIO_WritePin>
  return readvalue;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	b29b      	uxth	r3, r3
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40010c00 	.word	0x40010c00

08003250 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	71fb      	strb	r3, [r7, #7]
  
  /* Initialize IO Expander 1*/
  if(stmpe811_io_drv.ReadID(IO1_I2C_ADDRESS) == STMPE811_ID)
 800325a:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <BSP_IO_Init+0x7c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2082      	movs	r0, #130	; 0x82
 8003260:	4798      	blx	r3
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	f640 0311 	movw	r3, #2065	; 0x811
 800326a:	429a      	cmp	r2, r3
 800326c:	d10f      	bne.n	800328e <BSP_IO_Init+0x3e>
  {  
    /* Initialize the IO Expander 1 driver structure */
    io1_driver = &stmpe811_io_drv;
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <BSP_IO_Init+0x80>)
 8003270:	4a16      	ldr	r2, [pc, #88]	; (80032cc <BSP_IO_Init+0x7c>)
 8003272:	601a      	str	r2, [r3, #0]

    io1_driver->Init(IO1_I2C_ADDRESS);
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <BSP_IO_Init+0x80>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2082      	movs	r0, #130	; 0x82
 800327c:	4798      	blx	r3
    io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <BSP_IO_Init+0x80>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	21ff      	movs	r1, #255	; 0xff
 8003286:	2082      	movs	r0, #130	; 0x82
 8003288:	4798      	blx	r3

    ret = IO_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Initialize IO Expander 2*/
  if(stmpe811_io_drv.ReadID(IO2_I2C_ADDRESS) == STMPE811_ID)
 800328e:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <BSP_IO_Init+0x7c>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2088      	movs	r0, #136	; 0x88
 8003294:	4798      	blx	r3
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	f640 0311 	movw	r3, #2065	; 0x811
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10f      	bne.n	80032c2 <BSP_IO_Init+0x72>
  {  
    /* Initialize the IO Expander 2 driver structure */
    io2_driver = &stmpe811_io_drv;
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <BSP_IO_Init+0x84>)
 80032a4:	4a09      	ldr	r2, [pc, #36]	; (80032cc <BSP_IO_Init+0x7c>)
 80032a6:	601a      	str	r2, [r3, #0]

    io2_driver->Init(IO2_I2C_ADDRESS);
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <BSP_IO_Init+0x84>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2088      	movs	r0, #136	; 0x88
 80032b0:	4798      	blx	r3
    io2_driver->Start(IO2_I2C_ADDRESS, IO2_PIN_ALL >> IO2_PIN_OFFSET);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <BSP_IO_Init+0x84>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	21ff      	movs	r1, #255	; 0xff
 80032ba:	2088      	movs	r0, #136	; 0x88
 80032bc:	4798      	blx	r3

    ret = IO_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 80032c2:	79fb      	ldrb	r3, [r7, #7]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000080 	.word	0x20000080
 80032d0:	20000790 	.word	0x20000790
 80032d4:	20000794 	.word	0x20000794

080032d8 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL 
  * @retval IO_OK: if all initializations are OK. Other value if error.  
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
  uint32_t io2_pin = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  
  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	60fb      	str	r3, [r7, #12]
  io2_pin = (IO_Pin & IO2_PIN_ALL) >> IO2_PIN_OFFSET;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	60bb      	str	r3, [r7, #8]

  if (io1_pin != 0)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <BSP_IO_ConfigPin+0x36>
  {
    /* Configure the selected IO Expander 1 pin(s) mode */
    io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);    
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <BSP_IO_ConfigPin+0x54>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	2082      	movs	r0, #130	; 0x82
 800330c:	4798      	blx	r3
  }  

  if (io2_pin != 0)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <BSP_IO_ConfigPin+0x4a>
  {
    /* Configure the selected IO Expander 2 pin(s) mode */
    io2_driver->Config(IO2_I2C_ADDRESS, io2_pin, IO_Mode);    
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <BSP_IO_ConfigPin+0x58>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	2088      	movs	r0, #136	; 0x88
 8003320:	4798      	blx	r3
  }

  return IO_OK;  
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000790 	.word	0x20000790
 8003330:	20000794 	.word	0x20000794

08003334 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pins to read. 
  *          This parameter can be any combination of the IO pins. 
  * @retval The current pins state 
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t pin_state = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  uint32_t io1_pin = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
  uint32_t io2_pin = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  
  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	613b      	str	r3, [r7, #16]
  io2_pin = (IO_Pin & IO2_PIN_ALL) >> IO2_PIN_OFFSET;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	b2db      	uxtb	r3, r3
 8003354:	60fb      	str	r3, [r7, #12]

  if (io1_pin != 0)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <BSP_IO_ReadPin+0x3c>
  {
    /* Gets the IO Expander 1 selected pins current state */
    pin_state |= (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin)) << IO1_PIN_OFFSET;
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <BSP_IO_ReadPin+0x64>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	6939      	ldr	r1, [r7, #16]
 8003364:	2082      	movs	r0, #130	; 0x82
 8003366:	4798      	blx	r3
 8003368:	4602      	mov	r2, r0
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
  }

  if (io2_pin != 0)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <BSP_IO_ReadPin+0x58>
  {
    /* Gets the IO Expander 2 selected pins current state */
    pin_state |= (io2_driver->ReadPin(IO2_I2C_ADDRESS, io2_pin)) << IO2_PIN_OFFSET;
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <BSP_IO_ReadPin+0x68>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	68f9      	ldr	r1, [r7, #12]
 800337e:	2088      	movs	r0, #136	; 0x88
 8003380:	4798      	blx	r3
 8003382:	4603      	mov	r3, r0
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }
  
  return pin_state;
 800338c:	697b      	ldr	r3, [r7, #20]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000790 	.word	0x20000790
 800339c:	20000794 	.word	0x20000794

080033a0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <BSP_LCD_Init+0x80>)
 80033ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b0:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 80033b2:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <BSP_LCD_Init+0x80>)
 80033b4:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <BSP_LCD_Init+0x84>)
 80033b6:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <BSP_LCD_Init+0x80>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
  
  if(ili9320_drv.ReadID() == ILI9320_ID)
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <BSP_LCD_Init+0x88>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4798      	blx	r3
 80033c4:	4603      	mov	r3, r0
 80033c6:	461a      	mov	r2, r3
 80033c8:	f249 3320 	movw	r3, #37664	; 0x9320
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d10c      	bne.n	80033ea <BSP_LCD_Init+0x4a>
  {
    lcd_drv = &ili9320_drv;
 80033d0:	4b16      	ldr	r3, [pc, #88]	; (800342c <BSP_LCD_Init+0x8c>)
 80033d2:	4a15      	ldr	r2, [pc, #84]	; (8003428 <BSP_LCD_Init+0x88>)
 80033d4:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <BSP_LCD_Init+0x8c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80033de:	4811      	ldr	r0, [pc, #68]	; (8003424 <BSP_LCD_Init+0x84>)
 80033e0:	f000 f860 	bl	80034a4 <BSP_LCD_SetFont>

    ret = LCD_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	71fb      	strb	r3, [r7, #7]
 80033e8:	e014      	b.n	8003414 <BSP_LCD_Init+0x74>
  }
  else if(ili9325_drv.ReadID() == ILI9325_ID)
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <BSP_LCD_Init+0x90>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4798      	blx	r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	f249 3325 	movw	r3, #37669	; 0x9325
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d10b      	bne.n	8003414 <BSP_LCD_Init+0x74>
  {
    lcd_drv = &ili9325_drv;
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <BSP_LCD_Init+0x8c>)
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <BSP_LCD_Init+0x90>)
 8003400:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <BSP_LCD_Init+0x8c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800340a:	4806      	ldr	r0, [pc, #24]	; (8003424 <BSP_LCD_Init+0x84>)
 800340c:	f000 f84a 	bl	80034a4 <BSP_LCD_SetFont>

    ret = LCD_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8003414:	79fb      	ldrb	r3, [r7, #7]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000b9c 	.word	0x20000b9c
 8003424:	200000c4 	.word	0x200000c4
 8003428:	20000010 	.word	0x20000010
 800342c:	20000798 	.word	0x20000798
 8003430:	20000048 	.word	0x20000048

08003434 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <BSP_LCD_GetXSize+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	4798      	blx	r3
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000798 	.word	0x20000798

0800344c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <BSP_LCD_GetYSize+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	4798      	blx	r3
 8003458:	4603      	mov	r3, r0
}
 800345a:	4618      	mov	r0, r3
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000798 	.word	0x20000798

08003464 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	4a03      	ldr	r2, [pc, #12]	; (8003480 <BSP_LCD_SetTextColor+0x1c>)
 8003472:	6013      	str	r3, [r2, #0]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000b9c 	.word	0x20000b9c

08003484 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	4a03      	ldr	r2, [pc, #12]	; (80034a0 <BSP_LCD_SetBackColor+0x1c>)
 8003492:	6053      	str	r3, [r2, #4]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000b9c 	.word	0x20000b9c

080034a4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 80034ac:	4a03      	ldr	r2, [pc, #12]	; (80034bc <BSP_LCD_SetFont+0x18>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6093      	str	r3, [r2, #8]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	20000b9c 	.word	0x20000b9c

080034c0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <BSP_LCD_Clear+0x64>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <BSP_LCD_Clear+0x64>)
 80034d8:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e00d      	b.n	80034fc <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	b29c      	uxth	r4, r3
 80034e4:	f7ff ffa6 	bl	8003434 <BSP_LCD_GetXSize>
 80034e8:	4603      	mov	r3, r0
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	4621      	mov	r1, r4
 80034f0:	2000      	movs	r0, #0
 80034f2:	f000 f8d1 	bl	8003698 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3301      	adds	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	f7ff ffa6 	bl	800344c <BSP_LCD_GetYSize>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4293      	cmp	r3, r2
 8003506:	d3eb      	bcc.n	80034e0 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 8003508:	4a06      	ldr	r2, [pc, #24]	; (8003524 <BSP_LCD_Clear+0x64>)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <BSP_LCD_Clear+0x64>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ffa5 	bl	8003464 <BSP_LCD_SetTextColor>
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bd90      	pop	{r4, r7, pc}
 8003522:	bf00      	nop
 8003524:	20000b9c 	.word	0x20000b9c

08003528 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
 8003532:	460b      	mov	r3, r1
 8003534:	80bb      	strh	r3, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <BSP_LCD_DisplayChar+0x50>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003544:	490c      	ldr	r1, [pc, #48]	; (8003578 <BSP_LCD_DisplayChar+0x50>)
 8003546:	6889      	ldr	r1, [r1, #8]
 8003548:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800354a:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <BSP_LCD_DisplayChar+0x50>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	889b      	ldrh	r3, [r3, #4]
 8003554:	3307      	adds	r3, #7
 8003556:	2b00      	cmp	r3, #0
 8003558:	da00      	bge.n	800355c <BSP_LCD_DisplayChar+0x34>
 800355a:	3307      	adds	r3, #7
 800355c:	10db      	asrs	r3, r3, #3
 800355e:	fb03 f301 	mul.w	r3, r3, r1
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003562:	441a      	add	r2, r3
 8003564:	88b9      	ldrh	r1, [r7, #4]
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 faaf 	bl	8003acc <LCD_DrawChar>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000b9c 	.word	0x20000b9c

0800357c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60ba      	str	r2, [r7, #8]
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	81fb      	strh	r3, [r7, #14]
 800358a:	460b      	mov	r3, r1
 800358c:	81bb      	strh	r3, [r7, #12]
 800358e:	4613      	mov	r3, r2
 8003590:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 8003592:	2301      	movs	r3, #1
 8003594:	83fb      	strh	r3, [r7, #30]
 8003596:	2300      	movs	r3, #0
 8003598:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80035a6:	e002      	b.n	80035ae <BSP_LCD_DisplayStringAt+0x32>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	617a      	str	r2, [r7, #20]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f6      	bne.n	80035a8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80035ba:	f7ff ff3b 	bl	8003434 <BSP_LCD_GetXSize>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <BSP_LCD_DisplayStringAt+0x118>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	889b      	ldrh	r3, [r3, #4]
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d014      	beq.n	80035fc <BSP_LCD_DisplayStringAt+0x80>
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	dc23      	bgt.n	800361e <BSP_LCD_DisplayStringAt+0xa2>
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <BSP_LCD_DisplayStringAt+0x64>
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d011      	beq.n	8003602 <BSP_LCD_DisplayStringAt+0x86>
 80035de:	e01e      	b.n	800361e <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <BSP_LCD_DisplayStringAt+0x118>)
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	8892      	ldrh	r2, [r2, #4]
 80035ec:	fb02 f303 	mul.w	r3, r2, r3
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	89fb      	ldrh	r3, [r7, #14]
 80035f6:	4413      	add	r3, r2
 80035f8:	83fb      	strh	r3, [r7, #30]
      break;
 80035fa:	e013      	b.n	8003624 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80035fc:	89fb      	ldrh	r3, [r7, #14]
 80035fe:	83fb      	strh	r3, [r7, #30]
      break;
 8003600:	e010      	b.n	8003624 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	b29b      	uxth	r3, r3
 800360a:	4a22      	ldr	r2, [pc, #136]	; (8003694 <BSP_LCD_DisplayStringAt+0x118>)
 800360c:	6892      	ldr	r2, [r2, #8]
 800360e:	8892      	ldrh	r2, [r2, #4]
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	b29a      	uxth	r2, r3
 8003616:	89fb      	ldrh	r3, [r7, #14]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	83fb      	strh	r3, [r7, #30]
      break;
 800361c:	e002      	b.n	8003624 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	83fb      	strh	r3, [r7, #30]
      break;
 8003622:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003624:	e012      	b.n	800364c <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	89b9      	ldrh	r1, [r7, #12]
 800362c:	8bfb      	ldrh	r3, [r7, #30]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ff7a 	bl	8003528 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <BSP_LCD_DisplayStringAt+0x118>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	889a      	ldrh	r2, [r3, #4]
 800363a:	8bfb      	ldrh	r3, [r7, #30]
 800363c:	4413      	add	r3, r2
 800363e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3301      	adds	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
    counter++;
 8003646:	8bbb      	ldrh	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2dc      	uxtb	r4, r3
 800365a:	f7ff feeb 	bl	8003434 <BSP_LCD_GetXSize>
 800365e:	4601      	mov	r1, r0
 8003660:	8bbb      	ldrh	r3, [r7, #28]
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <BSP_LCD_DisplayStringAt+0x118>)
 8003664:	6892      	ldr	r2, [r2, #8]
 8003666:	8892      	ldrh	r2, [r2, #4]
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	1acb      	subs	r3, r1, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	4a08      	ldr	r2, [pc, #32]	; (8003694 <BSP_LCD_DisplayStringAt+0x118>)
 8003672:	6892      	ldr	r2, [r2, #8]
 8003674:	8892      	ldrh	r2, [r2, #4]
 8003676:	4293      	cmp	r3, r2
 8003678:	bf2c      	ite	cs
 800367a:	2301      	movcs	r3, #1
 800367c:	2300      	movcc	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4023      	ands	r3, r4
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ce      	bne.n	8003626 <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	bf00      	nop
 8003694:	20000b9c 	.word	0x20000b9c

08003698 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
 80036a2:	460b      	mov	r3, r1
 80036a4:	80bb      	strh	r3, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <BSP_LCD_DrawHLine+0x6c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <BSP_LCD_DrawHLine+0x6c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a1c      	ldr	r4, [r3, #32]
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <BSP_LCD_DrawHLine+0x70>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b298      	uxth	r0, r3
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	88ba      	ldrh	r2, [r7, #4]
 80036c8:	88f9      	ldrh	r1, [r7, #6]
 80036ca:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80036cc:	e015      	b.n	80036fa <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e00e      	b.n	80036f2 <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	4413      	add	r3, r2
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <BSP_LCD_DrawHLine+0x70>)
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	b292      	uxth	r2, r2
 80036e4:	88b9      	ldrh	r1, [r7, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f9d4 	bl	8003a94 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3ec      	bcc.n	80036d4 <BSP_LCD_DrawHLine+0x3c>
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd90      	pop	{r4, r7, pc}
 8003702:	bf00      	nop
 8003704:	20000798 	.word	0x20000798
 8003708:	20000b9c 	.word	0x20000b9c

0800370c <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	80fb      	strh	r3, [r7, #6]
 8003716:	460b      	mov	r3, r1
 8003718:	80bb      	strh	r3, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	f1c3 0303 	rsb	r3, r3, #3
 8003726:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8003730:	e09a      	b.n	8003868 <BSP_LCD_DrawCircle+0x15c>
  {
    LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	b29a      	uxth	r2, r3
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4413      	add	r3, r2
 800373a:	b298      	uxth	r0, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	b29b      	uxth	r3, r3
 8003740:	88ba      	ldrh	r2, [r7, #4]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	b29b      	uxth	r3, r3
 8003746:	4a4d      	ldr	r2, [pc, #308]	; (800387c <BSP_LCD_DrawCircle+0x170>)
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	b292      	uxth	r2, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f000 f9a1 	bl	8003a94 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	b29b      	uxth	r3, r3
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	b298      	uxth	r0, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	b29b      	uxth	r3, r3
 8003760:	88ba      	ldrh	r2, [r7, #4]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	b29b      	uxth	r3, r3
 8003766:	4a45      	ldr	r2, [pc, #276]	; (800387c <BSP_LCD_DrawCircle+0x170>)
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	b292      	uxth	r2, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f000 f991 	bl	8003a94 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	b29a      	uxth	r2, r3
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	4413      	add	r3, r2
 800377a:	b298      	uxth	r0, r3
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	b29b      	uxth	r3, r3
 8003780:	88ba      	ldrh	r2, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	b29b      	uxth	r3, r3
 8003786:	4a3d      	ldr	r2, [pc, #244]	; (800387c <BSP_LCD_DrawCircle+0x170>)
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	b292      	uxth	r2, r2
 800378c:	4619      	mov	r1, r3
 800378e:	f000 f981 	bl	8003a94 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	b29b      	uxth	r3, r3
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	b298      	uxth	r0, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	88ba      	ldrh	r2, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	4a35      	ldr	r2, [pc, #212]	; (800387c <BSP_LCD_DrawCircle+0x170>)
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	b292      	uxth	r2, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f000 f971 	bl	8003a94 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	4413      	add	r3, r2
 80037ba:	b298      	uxth	r0, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	b29a      	uxth	r2, r3
 80037c0:	88bb      	ldrh	r3, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <BSP_LCD_DrawCircle+0x170>)
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	b292      	uxth	r2, r2
 80037cc:	4619      	mov	r1, r3
 80037ce:	f000 f961 	bl	8003a94 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	b298      	uxth	r0, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	b29a      	uxth	r2, r3
 80037e0:	88bb      	ldrh	r3, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4a25      	ldr	r2, [pc, #148]	; (800387c <BSP_LCD_DrawCircle+0x170>)
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	b292      	uxth	r2, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	f000 f951 	bl	8003a94 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	4413      	add	r3, r2
 80037fa:	b298      	uxth	r0, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	88bb      	ldrh	r3, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <BSP_LCD_DrawCircle+0x170>)
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	b292      	uxth	r2, r2
 800380c:	4619      	mov	r1, r3
 800380e:	f000 f941 	bl	8003a94 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	b29b      	uxth	r3, r3
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	b298      	uxth	r0, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	b29a      	uxth	r2, r3
 8003820:	88bb      	ldrh	r3, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <BSP_LCD_DrawCircle+0x170>)
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	b292      	uxth	r2, r2
 800382c:	4619      	mov	r1, r3
 800382e:	f000 f931 	bl	8003a94 <LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003832:	4813      	ldr	r0, [pc, #76]	; (8003880 <BSP_LCD_DrawCircle+0x174>)
 8003834:	f7ff fe36 	bl	80034a4 <BSP_LCD_SetFont>

    if (D < 0)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	da06      	bge.n	800384c <BSP_LCD_DrawCircle+0x140>
    { 
      D += (CurX << 2) + 6;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	009a      	lsls	r2, r3, #2
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	4413      	add	r3, r2
 8003846:	3306      	adds	r3, #6
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e00a      	b.n	8003862 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	009a      	lsls	r2, r3, #2
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4413      	add	r3, r2
 8003858:	330a      	adds	r3, #10
 800385a:	617b      	str	r3, [r7, #20]
      CurY--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3b01      	subs	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	3301      	adds	r3, #1
 8003866:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	f67f af60 	bls.w	8003732 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000b9c 	.word	0x20000b9c
 8003880:	200000c4 	.word	0x200000c4

08003884 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	603a      	str	r2, [r7, #0]
 800388e:	80fb      	strh	r3, [r7, #6]
 8003890:	460b      	mov	r3, r1
 8003892:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	3312      	adds	r3, #18
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	3316      	adds	r3, #22
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	3318      	adds	r3, #24
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	88b9      	ldrh	r1, [r7, #4]
 80038d6:	88f8      	ldrh	r0, [r7, #6]
 80038d8:	f000 f9ea 	bl	8003cb0 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <BSP_LCD_DrawBitmap+0x94>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <BSP_LCD_DrawBitmap+0x94>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	88b9      	ldrh	r1, [r7, #4]
 80038ee:	88f8      	ldrh	r0, [r7, #6]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80038f4:	f7ff fd9e 	bl	8003434 <BSP_LCD_GetXSize>
 80038f8:	4603      	mov	r3, r0
 80038fa:	b29c      	uxth	r4, r3
 80038fc:	f7ff fda6 	bl	800344c <BSP_LCD_GetYSize>
 8003900:	4603      	mov	r3, r0
 8003902:	b29b      	uxth	r3, r3
 8003904:	4622      	mov	r2, r4
 8003906:	2100      	movs	r1, #0
 8003908:	2000      	movs	r0, #0
 800390a:	f000 f9d1 	bl	8003cb0 <LCD_SetDisplayWindow>
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}
 8003916:	bf00      	nop
 8003918:	20000798 	.word	0x20000798

0800391c <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4623      	mov	r3, r4
 800392c:	80fb      	strh	r3, [r7, #6]
 800392e:	4603      	mov	r3, r0
 8003930:	80bb      	strh	r3, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	807b      	strh	r3, [r7, #2]
 8003936:	4613      	mov	r3, r2
 8003938:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <BSP_LCD_FillRect+0x50>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fd8f 	bl	8003464 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8003946:	88bb      	ldrh	r3, [r7, #4]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	80ba      	strh	r2, [r7, #4]
 800394c:	887a      	ldrh	r2, [r7, #2]
 800394e:	88f8      	ldrh	r0, [r7, #6]
 8003950:	4619      	mov	r1, r3
 8003952:	f7ff fea1 	bl	8003698 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8003956:	883b      	ldrh	r3, [r7, #0]
 8003958:	1e5a      	subs	r2, r3, #1
 800395a:	803a      	strh	r2, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f2      	bne.n	8003946 <BSP_LCD_FillRect+0x2a>
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bd90      	pop	{r4, r7, pc}
 800396a:	bf00      	nop
 800396c:	20000b9c 	.word	0x20000b9c

08003970 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	80fb      	strh	r3, [r7, #6]
 800397a:	460b      	mov	r3, r1
 800397c:	80bb      	strh	r3, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8003982:	887b      	ldrh	r3, [r7, #2]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	f1c3 0303 	rsb	r3, r3, #3
 800398a:	617b      	str	r3, [r7, #20]

  CurX = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8003990:	887b      	ldrh	r3, [r7, #2]
 8003992:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003994:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <BSP_LCD_FillCircle+0x120>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fd62 	bl	8003464 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 80039a0:	e061      	b.n	8003a66 <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d021      	beq.n	80039ec <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	b298      	uxth	r0, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	88bb      	ldrh	r3, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	b299      	uxth	r1, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	f7ff fe67 	bl	8003698 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	b298      	uxth	r0, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	88ba      	ldrh	r2, [r7, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b299      	uxth	r1, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7ff fe56 	bl	8003698 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d021      	beq.n	8003a36 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	b298      	uxth	r0, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	88ba      	ldrh	r2, [r7, #4]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	b299      	uxth	r1, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f7ff fe42 	bl	8003698 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	b298      	uxth	r0, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	88bb      	ldrh	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	b299      	uxth	r1, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	f7ff fe31 	bl	8003698 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da06      	bge.n	8003a4a <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4413      	add	r3, r2
 8003a44:	3306      	adds	r3, #6
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e00a      	b.n	8003a60 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	009a      	lsls	r2, r3, #2
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4413      	add	r3, r2
 8003a56:	330a      	adds	r3, #10
 8003a58:	617b      	str	r3, [r7, #20]
      CurY--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	3301      	adds	r3, #1
 8003a64:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d999      	bls.n	80039a2 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <BSP_LCD_FillCircle+0x120>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fcf5 	bl	8003464 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	88b9      	ldrh	r1, [r7, #4]
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fe43 	bl	800370c <BSP_LCD_DrawCircle>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000b9c 	.word	0x20000b9c

08003a94 <LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	80fb      	strh	r3, [r7, #6]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	80bb      	strh	r3, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <LCD_DrawPixel+0x34>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d006      	beq.n	8003abe <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <LCD_DrawPixel+0x34>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	88b9      	ldrh	r1, [r7, #4]
 8003aba:	88f8      	ldrh	r0, [r7, #6]
 8003abc:	4798      	blx	r3
  }
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000798 	.word	0x20000798

08003acc <LCD_DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	603a      	str	r2, [r7, #0]
 8003ad6:	80fb      	strh	r3, [r7, #6]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	82fb      	strh	r3, [r7, #22]
 8003aec:	2300      	movs	r3, #0
 8003aee:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 8003afc:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <LCD_DrawChar+0x1c0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	88db      	ldrh	r3, [r3, #6]
 8003b02:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8003b04:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <LCD_DrawChar+0x1c0>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8003b0c:	8afb      	ldrh	r3, [r7, #22]
 8003b0e:	8aba      	ldrh	r2, [r7, #20]
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	331b      	adds	r3, #27
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4a5d      	ldr	r2, [pc, #372]	; (8003c90 <LCD_DrawChar+0x1c4>)
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8003b22:	8afb      	ldrh	r3, [r7, #22]
 8003b24:	8aba      	ldrh	r2, [r7, #20]
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	331b      	adds	r3, #27
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	141a      	asrs	r2, r3, #16
 8003b30:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <LCD_DrawChar+0x1c8>)
 8003b32:	b292      	uxth	r2, r2
 8003b34:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8003b36:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <LCD_DrawChar+0x1cc>)
 8003b38:	2236      	movs	r2, #54	; 0x36
 8003b3a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8003b3c:	4a57      	ldr	r2, [pc, #348]	; (8003c9c <LCD_DrawChar+0x1d0>)
 8003b3e:	8abb      	ldrh	r3, [r7, #20]
 8003b40:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8003b42:	8abb      	ldrh	r3, [r7, #20]
 8003b44:	141a      	asrs	r2, r3, #16
 8003b46:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <LCD_DrawChar+0x1d4>)
 8003b48:	b292      	uxth	r2, r2
 8003b4a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8003b4c:	4a55      	ldr	r2, [pc, #340]	; (8003ca4 <LCD_DrawChar+0x1d8>)
 8003b4e:	8afb      	ldrh	r3, [r7, #22]
 8003b50:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8003b52:	8afb      	ldrh	r3, [r7, #22]
 8003b54:	141a      	asrs	r2, r3, #16
 8003b56:	4b54      	ldr	r3, [pc, #336]	; (8003ca8 <LCD_DrawChar+0x1dc>)
 8003b58:	b292      	uxth	r2, r2
 8003b5a:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8003b5c:	8abb      	ldrh	r3, [r7, #20]
 8003b5e:	3307      	adds	r3, #7
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	da00      	bge.n	8003b66 <LCD_DrawChar+0x9a>
 8003b64:	3307      	adds	r3, #7
 8003b66:	10db      	asrs	r3, r3, #3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	8abb      	ldrh	r3, [r7, #20]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7a:	e078      	b.n	8003c6e <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8003b7c:	8abb      	ldrh	r3, [r7, #20]
 8003b7e:	3307      	adds	r3, #7
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	da00      	bge.n	8003b86 <LCD_DrawChar+0xba>
 8003b84:	3307      	adds	r3, #7
 8003b86:	10db      	asrs	r3, r3, #3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	fb03 f302 	mul.w	r3, r3, r2
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8003b96:	8abb      	ldrh	r3, [r7, #20]
 8003b98:	3b11      	subs	r3, #17
 8003b9a:	2b07      	cmp	r3, #7
 8003b9c:	d80c      	bhi.n	8003bb8 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	041a      	lsls	r2, r3, #16
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	4313      	orrs	r3, r2
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	3202      	adds	r2, #2
 8003bb2:	7812      	ldrb	r2, [r2, #0]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8003bb8:	8abb      	ldrh	r3, [r7, #20]
 8003bba:	3b09      	subs	r3, #9
 8003bbc:	2b07      	cmp	r3, #7
 8003bbe:	d807      	bhi.n	8003bd0 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	3201      	adds	r2, #1
 8003bca:	7812      	ldrb	r2, [r2, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8003bd0:	8abb      	ldrh	r3, [r7, #20]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	2b07      	cmp	r3, #7
 8003bd6:	d802      	bhi.n	8003bde <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	623b      	str	r3, [r7, #32]
 8003be2:	e03d      	b.n	8003c60 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8003be4:	8afa      	ldrh	r2, [r7, #22]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	8aba      	ldrh	r2, [r7, #20]
 8003bee:	fb02 f203 	mul.w	r2, r2, r3
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	331b      	adds	r3, #27
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8003bfc:	8aba      	ldrh	r2, [r7, #20]
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	1ad2      	subs	r2, r2, r3
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	4413      	add	r3, r2
 8003c06:	3b01      	subs	r3, #1
 8003c08:	2201      	movs	r2, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <LCD_DrawChar+0x1c0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b2d9      	uxtb	r1, r3
 8003c1e:	4a23      	ldr	r2, [pc, #140]	; (8003cac <LCD_DrawChar+0x1e0>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	460a      	mov	r2, r1
 8003c26:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <LCD_DrawChar+0x1c0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	0a1a      	lsrs	r2, r3, #8
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3301      	adds	r3, #1
 8003c32:	b2d1      	uxtb	r1, r2
 8003c34:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <LCD_DrawChar+0x1e0>)
 8003c36:	54d1      	strb	r1, [r2, r3]
 8003c38:	e00f      	b.n	8003c5a <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <LCD_DrawChar+0x1c0>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	b2d9      	uxtb	r1, r3
 8003c40:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <LCD_DrawChar+0x1e0>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	4413      	add	r3, r2
 8003c46:	460a      	mov	r2, r1
 8003c48:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <LCD_DrawChar+0x1c0>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	0a1a      	lsrs	r2, r3, #8
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	3301      	adds	r3, #1
 8003c54:	b2d1      	uxtb	r1, r2
 8003c56:	4a15      	ldr	r2, [pc, #84]	; (8003cac <LCD_DrawChar+0x1e0>)
 8003c58:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	8abb      	ldrh	r3, [r7, #20]
 8003c62:	6a3a      	ldr	r2, [r7, #32]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d3bd      	bcc.n	8003be4 <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	8afb      	ldrh	r3, [r7, #22]
 8003c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d382      	bcc.n	8003b7c <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8003c76:	88b9      	ldrh	r1, [r7, #4]
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <LCD_DrawChar+0x1e0>)
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fe01 	bl	8003884 <BSP_LCD_DrawBitmap>
}
 8003c82:	bf00      	nop
 8003c84:	3728      	adds	r7, #40	; 0x28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000b9c 	.word	0x20000b9c
 8003c90:	2000079e 	.word	0x2000079e
 8003c94:	200007a0 	.word	0x200007a0
 8003c98:	200007a6 	.word	0x200007a6
 8003c9c:	200007ae 	.word	0x200007ae
 8003ca0:	200007b0 	.word	0x200007b0
 8003ca4:	200007b2 	.word	0x200007b2
 8003ca8:	200007b4 	.word	0x200007b4
 8003cac:	2000079c 	.word	0x2000079c

08003cb0 <LCD_SetDisplayWindow>:
  * @param  Ypos: LCD Y position
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003cb0:	b590      	push	{r4, r7, lr}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	80fb      	strh	r3, [r7, #6]
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	80bb      	strh	r3, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	807b      	strh	r3, [r7, #2]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <LCD_SetDisplayWindow+0x40>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <LCD_SetDisplayWindow+0x40>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69dc      	ldr	r4, [r3, #28]
 8003cde:	883b      	ldrh	r3, [r7, #0]
 8003ce0:	887a      	ldrh	r2, [r7, #2]
 8003ce2:	88b9      	ldrh	r1, [r7, #4]
 8003ce4:	88f8      	ldrh	r0, [r7, #6]
 8003ce6:	47a0      	blx	r4
  }  
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}
 8003cf0:	20000798 	.word	0x20000798

08003cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_Init+0x28>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <HAL_Init+0x28>)
 8003cfe:	f043 0310 	orr.w	r3, r3, #16
 8003d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d04:	2003      	movs	r0, #3
 8003d06:	f000 fb51 	bl	80043ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f000 f808 	bl	8003d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d10:	f7fd fc26 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40022000 	.word	0x40022000

08003d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <HAL_InitTick+0x54>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_InitTick+0x58>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	4619      	mov	r1, r3
 8003d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fb69 	bl	8004416 <HAL_SYSTICK_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e00e      	b.n	8003d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b0f      	cmp	r3, #15
 8003d52:	d80a      	bhi.n	8003d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d54:	2200      	movs	r2, #0
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	f000 fb31 	bl	80043c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d60:	4a06      	ldr	r2, [pc, #24]	; (8003d7c <HAL_InitTick+0x5c>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e000      	b.n	8003d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	200000d8 	.word	0x200000d8
 8003d7c:	200000d4 	.word	0x200000d4

08003d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_IncTick+0x1c>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_IncTick+0x20>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HAL_IncTick+0x20>)
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	200000d8 	.word	0x200000d8
 8003da0:	20000ba8 	.word	0x20000ba8

08003da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b02      	ldr	r3, [pc, #8]	; (8003db4 <HAL_GetTick+0x10>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	20000ba8 	.word	0x20000ba8

08003db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff fff0 	bl	8003da4 <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d005      	beq.n	8003dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_Delay+0x44>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dde:	bf00      	nop
 8003de0:	f7ff ffe0 	bl	8003da4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d8f7      	bhi.n	8003de0 <HAL_Delay+0x28>
  {
  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200000d8 	.word	0x200000d8

08003e00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0be      	b.n	8003fa0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd fbc0 	bl	80015c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f9ab 	bl	80041a0 <ADC_ConversionStop_Disable>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8099 	bne.w	8003f8e <HAL_ADC_Init+0x18e>
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8095 	bne.w	8003f8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e6c:	f023 0302 	bic.w	r3, r3, #2
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7b1b      	ldrb	r3, [r3, #12]
 8003e86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e98:	d003      	beq.n	8003ea2 <HAL_ADC_Init+0xa2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d102      	bne.n	8003ea8 <HAL_ADC_Init+0xa8>
 8003ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea6:	e000      	b.n	8003eaa <HAL_ADC_Init+0xaa>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	7d1b      	ldrb	r3, [r3, #20]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d119      	bne.n	8003eec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7b1b      	ldrb	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	035a      	lsls	r2, r3, #13
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	e00b      	b.n	8003eec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	f043 0201 	orr.w	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	4b28      	ldr	r3, [pc, #160]	; (8003fa8 <HAL_ADC_Init+0x1a8>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1c:	d003      	beq.n	8003f26 <HAL_ADC_Init+0x126>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d104      	bne.n	8003f30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	051b      	lsls	r3, r3, #20
 8003f2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_ADC_Init+0x1ac>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d10b      	bne.n	8003f6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	f043 0201 	orr.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f6a:	e018      	b.n	8003f9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	f023 0312 	bic.w	r3, r3, #18
 8003f74:	f043 0210 	orr.w	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f043 0201 	orr.w	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f8c:	e007      	b.n	8003f9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	f043 0210 	orr.w	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	ffe1f7fd 	.word	0xffe1f7fd
 8003fac:	ff1f0efe 	.word	0xff1f0efe

08003fb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x20>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0dc      	b.n	800418a <HAL_ADC_ConfigChannel+0x1da>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b06      	cmp	r3, #6
 8003fde:	d81c      	bhi.n	800401a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	3b05      	subs	r3, #5
 8003ff2:	221f      	movs	r2, #31
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	4019      	ands	r1, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	3b05      	subs	r3, #5
 800400c:	fa00 f203 	lsl.w	r2, r0, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	635a      	str	r2, [r3, #52]	; 0x34
 8004018:	e03c      	b.n	8004094 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d81c      	bhi.n	800405c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	3b23      	subs	r3, #35	; 0x23
 8004034:	221f      	movs	r2, #31
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	4019      	ands	r1, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	3b23      	subs	r3, #35	; 0x23
 800404e:	fa00 f203 	lsl.w	r2, r0, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
 800405a:	e01b      	b.n	8004094 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	3b41      	subs	r3, #65	; 0x41
 800406e:	221f      	movs	r2, #31
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	4019      	ands	r1, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	3b41      	subs	r3, #65	; 0x41
 8004088:	fa00 f203 	lsl.w	r2, r0, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b09      	cmp	r3, #9
 800409a:	d91c      	bls.n	80040d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68d9      	ldr	r1, [r3, #12]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	3b1e      	subs	r3, #30
 80040ae:	2207      	movs	r2, #7
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	4019      	ands	r1, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6898      	ldr	r0, [r3, #8]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	3b1e      	subs	r3, #30
 80040c8:	fa00 f203 	lsl.w	r2, r0, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	e019      	b.n	800410a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6919      	ldr	r1, [r3, #16]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	2207      	movs	r2, #7
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	4019      	ands	r1, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6898      	ldr	r0, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b10      	cmp	r3, #16
 8004110:	d003      	beq.n	800411a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004116:	2b11      	cmp	r3, #17
 8004118:	d132      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <HAL_ADC_ConfigChannel+0x1e4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d125      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d126      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004140:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b10      	cmp	r3, #16
 8004148:	d11a      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_ADC_ConfigChannel+0x1e8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a13      	ldr	r2, [pc, #76]	; (800419c <HAL_ADC_ConfigChannel+0x1ec>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	0c9a      	lsrs	r2, r3, #18
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004160:	e002      	b.n	8004168 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	3b01      	subs	r3, #1
 8004166:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f9      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x1b2>
 800416e:	e007      	b.n	8004180 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f043 0220 	orr.w	r2, r3, #32
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	40012400 	.word	0x40012400
 8004198:	2000000c 	.word	0x2000000c
 800419c:	431bde83 	.word	0x431bde83

080041a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d127      	bne.n	800420a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041ca:	f7ff fdeb 	bl	8003da4 <HAL_GetTick>
 80041ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041d0:	e014      	b.n	80041fc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041d2:	f7ff fde7 	bl	8003da4 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d90d      	bls.n	80041fc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	f043 0210 	orr.w	r2, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e007      	b.n	800420c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d0e3      	beq.n	80041d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004230:	4013      	ands	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800423c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__NVIC_GetPriorityGrouping+0x18>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 0307 	and.w	r3, r3, #7
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db0b      	blt.n	80042a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4906      	ldr	r1, [pc, #24]	; (80042ac <__NVIC_EnableIRQ+0x34>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2001      	movs	r0, #1
 800429a:	fa00 f202 	lsl.w	r2, r0, r2
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	e000e100 	.word	0xe000e100

080042b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	6039      	str	r1, [r7, #0]
 80042ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	db0a      	blt.n	80042da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	490c      	ldr	r1, [pc, #48]	; (80042fc <__NVIC_SetPriority+0x4c>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	0112      	lsls	r2, r2, #4
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	440b      	add	r3, r1
 80042d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d8:	e00a      	b.n	80042f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4908      	ldr	r1, [pc, #32]	; (8004300 <__NVIC_SetPriority+0x50>)
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	3b04      	subs	r3, #4
 80042e8:	0112      	lsls	r2, r2, #4
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	440b      	add	r3, r1
 80042ee:	761a      	strb	r2, [r3, #24]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	e000e100 	.word	0xe000e100
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f1c3 0307 	rsb	r3, r3, #7
 800431e:	2b04      	cmp	r3, #4
 8004320:	bf28      	it	cs
 8004322:	2304      	movcs	r3, #4
 8004324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3304      	adds	r3, #4
 800432a:	2b06      	cmp	r3, #6
 800432c:	d902      	bls.n	8004334 <NVIC_EncodePriority+0x30>
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3b03      	subs	r3, #3
 8004332:	e000      	b.n	8004336 <NVIC_EncodePriority+0x32>
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	401a      	ands	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800434c:	f04f 31ff 	mov.w	r1, #4294967295
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	43d9      	mvns	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	4313      	orrs	r3, r2
         );
}
 800435e:	4618      	mov	r0, r3
 8004360:	3724      	adds	r7, #36	; 0x24
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004378:	d301      	bcc.n	800437e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800437a:	2301      	movs	r3, #1
 800437c:	e00f      	b.n	800439e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <SysTick_Config+0x40>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004386:	210f      	movs	r1, #15
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	f7ff ff90 	bl	80042b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <SysTick_Config+0x40>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <SysTick_Config+0x40>)
 8004398:	2207      	movs	r2, #7
 800439a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	e000e010 	.word	0xe000e010

080043ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff2d 	bl	8004214 <__NVIC_SetPriorityGrouping>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	4603      	mov	r3, r0
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043d4:	f7ff ff42 	bl	800425c <__NVIC_GetPriorityGrouping>
 80043d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	6978      	ldr	r0, [r7, #20]
 80043e0:	f7ff ff90 	bl	8004304 <NVIC_EncodePriority>
 80043e4:	4602      	mov	r2, r0
 80043e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff5f 	bl	80042b0 <__NVIC_SetPriority>
}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	4603      	mov	r3, r0
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff35 	bl	8004278 <__NVIC_EnableIRQ>
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ffa2 	bl	8004368 <SysTick_Config>
 8004424:	4603      	mov	r3, r0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	2204      	movs	r2, #4
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80d6 	beq.w	8004606 <HAL_DMA_IRQHandler+0x1d6>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80d0 	beq.w	8004606 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d107      	bne.n	8004484 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0204 	bic.w	r2, r2, #4
 8004482:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b9b      	ldr	r3, [pc, #620]	; (80046f8 <HAL_DMA_IRQHandler+0x2c8>)
 800448c:	429a      	cmp	r2, r3
 800448e:	d958      	bls.n	8004542 <HAL_DMA_IRQHandler+0x112>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a99      	ldr	r2, [pc, #612]	; (80046fc <HAL_DMA_IRQHandler+0x2cc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d04f      	beq.n	800453a <HAL_DMA_IRQHandler+0x10a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a98      	ldr	r2, [pc, #608]	; (8004700 <HAL_DMA_IRQHandler+0x2d0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d048      	beq.n	8004536 <HAL_DMA_IRQHandler+0x106>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a96      	ldr	r2, [pc, #600]	; (8004704 <HAL_DMA_IRQHandler+0x2d4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d040      	beq.n	8004530 <HAL_DMA_IRQHandler+0x100>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a95      	ldr	r2, [pc, #596]	; (8004708 <HAL_DMA_IRQHandler+0x2d8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d038      	beq.n	800452a <HAL_DMA_IRQHandler+0xfa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a93      	ldr	r2, [pc, #588]	; (800470c <HAL_DMA_IRQHandler+0x2dc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d030      	beq.n	8004524 <HAL_DMA_IRQHandler+0xf4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a92      	ldr	r2, [pc, #584]	; (8004710 <HAL_DMA_IRQHandler+0x2e0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d028      	beq.n	800451e <HAL_DMA_IRQHandler+0xee>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a89      	ldr	r2, [pc, #548]	; (80046f8 <HAL_DMA_IRQHandler+0x2c8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d020      	beq.n	8004518 <HAL_DMA_IRQHandler+0xe8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a8e      	ldr	r2, [pc, #568]	; (8004714 <HAL_DMA_IRQHandler+0x2e4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d019      	beq.n	8004514 <HAL_DMA_IRQHandler+0xe4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a8c      	ldr	r2, [pc, #560]	; (8004718 <HAL_DMA_IRQHandler+0x2e8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d012      	beq.n	8004510 <HAL_DMA_IRQHandler+0xe0>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a8b      	ldr	r2, [pc, #556]	; (800471c <HAL_DMA_IRQHandler+0x2ec>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00a      	beq.n	800450a <HAL_DMA_IRQHandler+0xda>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a89      	ldr	r2, [pc, #548]	; (8004720 <HAL_DMA_IRQHandler+0x2f0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d102      	bne.n	8004504 <HAL_DMA_IRQHandler+0xd4>
 80044fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004502:	e01b      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 8004504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004508:	e018      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 800450a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800450e:	e015      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 8004510:	2340      	movs	r3, #64	; 0x40
 8004512:	e013      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 8004514:	2304      	movs	r3, #4
 8004516:	e011      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 8004518:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800451c:	e00e      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 800451e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004522:	e00b      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 8004524:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004528:	e008      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 800452a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800452e:	e005      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 8004530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004534:	e002      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 8004536:	2340      	movs	r3, #64	; 0x40
 8004538:	e000      	b.n	800453c <HAL_DMA_IRQHandler+0x10c>
 800453a:	2304      	movs	r3, #4
 800453c:	4a79      	ldr	r2, [pc, #484]	; (8004724 <HAL_DMA_IRQHandler+0x2f4>)
 800453e:	6053      	str	r3, [r2, #4]
 8004540:	e057      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1c2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a6d      	ldr	r2, [pc, #436]	; (80046fc <HAL_DMA_IRQHandler+0x2cc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d04f      	beq.n	80045ec <HAL_DMA_IRQHandler+0x1bc>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a6b      	ldr	r2, [pc, #428]	; (8004700 <HAL_DMA_IRQHandler+0x2d0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d048      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x1b8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6a      	ldr	r2, [pc, #424]	; (8004704 <HAL_DMA_IRQHandler+0x2d4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d040      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x1b2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a68      	ldr	r2, [pc, #416]	; (8004708 <HAL_DMA_IRQHandler+0x2d8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d038      	beq.n	80045dc <HAL_DMA_IRQHandler+0x1ac>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a67      	ldr	r2, [pc, #412]	; (800470c <HAL_DMA_IRQHandler+0x2dc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d030      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x1a6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a65      	ldr	r2, [pc, #404]	; (8004710 <HAL_DMA_IRQHandler+0x2e0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d028      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x1a0>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a5d      	ldr	r2, [pc, #372]	; (80046f8 <HAL_DMA_IRQHandler+0x2c8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d020      	beq.n	80045ca <HAL_DMA_IRQHandler+0x19a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a61      	ldr	r2, [pc, #388]	; (8004714 <HAL_DMA_IRQHandler+0x2e4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d019      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x196>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a60      	ldr	r2, [pc, #384]	; (8004718 <HAL_DMA_IRQHandler+0x2e8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d012      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x192>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a5e      	ldr	r2, [pc, #376]	; (800471c <HAL_DMA_IRQHandler+0x2ec>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00a      	beq.n	80045bc <HAL_DMA_IRQHandler+0x18c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a5d      	ldr	r2, [pc, #372]	; (8004720 <HAL_DMA_IRQHandler+0x2f0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d102      	bne.n	80045b6 <HAL_DMA_IRQHandler+0x186>
 80045b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045b4:	e01b      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045ba:	e018      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c0:	e015      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045c2:	2340      	movs	r3, #64	; 0x40
 80045c4:	e013      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045c6:	2304      	movs	r3, #4
 80045c8:	e011      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80045ce:	e00e      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045d4:	e00b      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045da:	e008      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045e0:	e005      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e6:	e002      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045e8:	2340      	movs	r3, #64	; 0x40
 80045ea:	e000      	b.n	80045ee <HAL_DMA_IRQHandler+0x1be>
 80045ec:	2304      	movs	r3, #4
 80045ee:	4a4e      	ldr	r2, [pc, #312]	; (8004728 <HAL_DMA_IRQHandler+0x2f8>)
 80045f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8136 	beq.w	8004868 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004604:	e130      	b.n	8004868 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2202      	movs	r2, #2
 800460c:	409a      	lsls	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80f8 	beq.w	8004808 <HAL_DMA_IRQHandler+0x3d8>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80f2 	beq.w	8004808 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 020a 	bic.w	r2, r2, #10
 8004640:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_DMA_IRQHandler+0x2c8>)
 8004652:	429a      	cmp	r2, r3
 8004654:	d973      	bls.n	800473e <HAL_DMA_IRQHandler+0x30e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a28      	ldr	r2, [pc, #160]	; (80046fc <HAL_DMA_IRQHandler+0x2cc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d06a      	beq.n	8004736 <HAL_DMA_IRQHandler+0x306>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a26      	ldr	r2, [pc, #152]	; (8004700 <HAL_DMA_IRQHandler+0x2d0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d063      	beq.n	8004732 <HAL_DMA_IRQHandler+0x302>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a25      	ldr	r2, [pc, #148]	; (8004704 <HAL_DMA_IRQHandler+0x2d4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d05b      	beq.n	800472c <HAL_DMA_IRQHandler+0x2fc>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_DMA_IRQHandler+0x2d8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d038      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x2c0>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a22      	ldr	r2, [pc, #136]	; (800470c <HAL_DMA_IRQHandler+0x2dc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d030      	beq.n	80046ea <HAL_DMA_IRQHandler+0x2ba>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a20      	ldr	r2, [pc, #128]	; (8004710 <HAL_DMA_IRQHandler+0x2e0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d028      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x2b4>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a18      	ldr	r2, [pc, #96]	; (80046f8 <HAL_DMA_IRQHandler+0x2c8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d020      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ae>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_DMA_IRQHandler+0x2e4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d019      	beq.n	80046da <HAL_DMA_IRQHandler+0x2aa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_DMA_IRQHandler+0x2e8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d012      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x2a6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <HAL_DMA_IRQHandler+0x2ec>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00a      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_DMA_IRQHandler+0x2f0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d102      	bne.n	80046ca <HAL_DMA_IRQHandler+0x29a>
 80046c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046c8:	e036      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ce:	e033      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046d4:	e030      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046d6:	2320      	movs	r3, #32
 80046d8:	e02e      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046da:	2302      	movs	r3, #2
 80046dc:	e02c      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046e2:	e029      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046e8:	e026      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ee:	e023      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046f4:	e020      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 80046f6:	bf00      	nop
 80046f8:	40020080 	.word	0x40020080
 80046fc:	40020008 	.word	0x40020008
 8004700:	4002001c 	.word	0x4002001c
 8004704:	40020030 	.word	0x40020030
 8004708:	40020044 	.word	0x40020044
 800470c:	40020058 	.word	0x40020058
 8004710:	4002006c 	.word	0x4002006c
 8004714:	40020408 	.word	0x40020408
 8004718:	4002041c 	.word	0x4002041c
 800471c:	40020430 	.word	0x40020430
 8004720:	40020444 	.word	0x40020444
 8004724:	40020400 	.word	0x40020400
 8004728:	40020000 	.word	0x40020000
 800472c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004730:	e002      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 8004732:	2320      	movs	r3, #32
 8004734:	e000      	b.n	8004738 <HAL_DMA_IRQHandler+0x308>
 8004736:	2302      	movs	r3, #2
 8004738:	4a4e      	ldr	r2, [pc, #312]	; (8004874 <HAL_DMA_IRQHandler+0x444>)
 800473a:	6053      	str	r3, [r2, #4]
 800473c:	e057      	b.n	80047ee <HAL_DMA_IRQHandler+0x3be>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a4d      	ldr	r2, [pc, #308]	; (8004878 <HAL_DMA_IRQHandler+0x448>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d04f      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x3b8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a4b      	ldr	r2, [pc, #300]	; (800487c <HAL_DMA_IRQHandler+0x44c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d048      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x3b4>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4a      	ldr	r2, [pc, #296]	; (8004880 <HAL_DMA_IRQHandler+0x450>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d040      	beq.n	80047de <HAL_DMA_IRQHandler+0x3ae>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a48      	ldr	r2, [pc, #288]	; (8004884 <HAL_DMA_IRQHandler+0x454>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d038      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x3a8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a47      	ldr	r2, [pc, #284]	; (8004888 <HAL_DMA_IRQHandler+0x458>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d030      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3a2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a45      	ldr	r2, [pc, #276]	; (800488c <HAL_DMA_IRQHandler+0x45c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d028      	beq.n	80047cc <HAL_DMA_IRQHandler+0x39c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a44      	ldr	r2, [pc, #272]	; (8004890 <HAL_DMA_IRQHandler+0x460>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d020      	beq.n	80047c6 <HAL_DMA_IRQHandler+0x396>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a42      	ldr	r2, [pc, #264]	; (8004894 <HAL_DMA_IRQHandler+0x464>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d019      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x392>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a41      	ldr	r2, [pc, #260]	; (8004898 <HAL_DMA_IRQHandler+0x468>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d012      	beq.n	80047be <HAL_DMA_IRQHandler+0x38e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a3f      	ldr	r2, [pc, #252]	; (800489c <HAL_DMA_IRQHandler+0x46c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00a      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x388>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a3e      	ldr	r2, [pc, #248]	; (80048a0 <HAL_DMA_IRQHandler+0x470>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d102      	bne.n	80047b2 <HAL_DMA_IRQHandler+0x382>
 80047ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047b0:	e01b      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b6:	e018      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047bc:	e015      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047be:	2320      	movs	r3, #32
 80047c0:	e013      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e011      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ca:	e00e      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047d0:	e00b      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d6:	e008      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047dc:	e005      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e2:	e002      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047e4:	2320      	movs	r3, #32
 80047e6:	e000      	b.n	80047ea <HAL_DMA_IRQHandler+0x3ba>
 80047e8:	2302      	movs	r3, #2
 80047ea:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <HAL_DMA_IRQHandler+0x474>)
 80047ec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d034      	beq.n	8004868 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004806:	e02f      	b.n	8004868 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	2208      	movs	r2, #8
 800480e:	409a      	lsls	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d028      	beq.n	800486a <HAL_DMA_IRQHandler+0x43a>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d023      	beq.n	800486a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 020e 	bic.w	r2, r2, #14
 8004830:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	2101      	movs	r1, #1
 800483c:	fa01 f202 	lsl.w	r2, r1, r2
 8004840:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4798      	blx	r3
    }
  }
  return;
 8004868:	bf00      	nop
 800486a:	bf00      	nop
}
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40020400 	.word	0x40020400
 8004878:	40020008 	.word	0x40020008
 800487c:	4002001c 	.word	0x4002001c
 8004880:	40020030 	.word	0x40020030
 8004884:	40020044 	.word	0x40020044
 8004888:	40020058 	.word	0x40020058
 800488c:	4002006c 	.word	0x4002006c
 8004890:	40020080 	.word	0x40020080
 8004894:	40020408 	.word	0x40020408
 8004898:	4002041c 	.word	0x4002041c
 800489c:	40020430 	.word	0x40020430
 80048a0:	40020444 	.word	0x40020444
 80048a4:	40020000 	.word	0x40020000

080048a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b08b      	sub	sp, #44	; 0x2c
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048b2:	2300      	movs	r3, #0
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048ba:	e169      	b.n	8004b90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80048bc:	2201      	movs	r2, #1
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	f040 8158 	bne.w	8004b8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4a9a      	ldr	r2, [pc, #616]	; (8004b48 <HAL_GPIO_Init+0x2a0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d05e      	beq.n	80049a2 <HAL_GPIO_Init+0xfa>
 80048e4:	4a98      	ldr	r2, [pc, #608]	; (8004b48 <HAL_GPIO_Init+0x2a0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d875      	bhi.n	80049d6 <HAL_GPIO_Init+0x12e>
 80048ea:	4a98      	ldr	r2, [pc, #608]	; (8004b4c <HAL_GPIO_Init+0x2a4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d058      	beq.n	80049a2 <HAL_GPIO_Init+0xfa>
 80048f0:	4a96      	ldr	r2, [pc, #600]	; (8004b4c <HAL_GPIO_Init+0x2a4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d86f      	bhi.n	80049d6 <HAL_GPIO_Init+0x12e>
 80048f6:	4a96      	ldr	r2, [pc, #600]	; (8004b50 <HAL_GPIO_Init+0x2a8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d052      	beq.n	80049a2 <HAL_GPIO_Init+0xfa>
 80048fc:	4a94      	ldr	r2, [pc, #592]	; (8004b50 <HAL_GPIO_Init+0x2a8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d869      	bhi.n	80049d6 <HAL_GPIO_Init+0x12e>
 8004902:	4a94      	ldr	r2, [pc, #592]	; (8004b54 <HAL_GPIO_Init+0x2ac>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d04c      	beq.n	80049a2 <HAL_GPIO_Init+0xfa>
 8004908:	4a92      	ldr	r2, [pc, #584]	; (8004b54 <HAL_GPIO_Init+0x2ac>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d863      	bhi.n	80049d6 <HAL_GPIO_Init+0x12e>
 800490e:	4a92      	ldr	r2, [pc, #584]	; (8004b58 <HAL_GPIO_Init+0x2b0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d046      	beq.n	80049a2 <HAL_GPIO_Init+0xfa>
 8004914:	4a90      	ldr	r2, [pc, #576]	; (8004b58 <HAL_GPIO_Init+0x2b0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d85d      	bhi.n	80049d6 <HAL_GPIO_Init+0x12e>
 800491a:	2b12      	cmp	r3, #18
 800491c:	d82a      	bhi.n	8004974 <HAL_GPIO_Init+0xcc>
 800491e:	2b12      	cmp	r3, #18
 8004920:	d859      	bhi.n	80049d6 <HAL_GPIO_Init+0x12e>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <HAL_GPIO_Init+0x80>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	080049a3 	.word	0x080049a3
 800492c:	0800497d 	.word	0x0800497d
 8004930:	0800498f 	.word	0x0800498f
 8004934:	080049d1 	.word	0x080049d1
 8004938:	080049d7 	.word	0x080049d7
 800493c:	080049d7 	.word	0x080049d7
 8004940:	080049d7 	.word	0x080049d7
 8004944:	080049d7 	.word	0x080049d7
 8004948:	080049d7 	.word	0x080049d7
 800494c:	080049d7 	.word	0x080049d7
 8004950:	080049d7 	.word	0x080049d7
 8004954:	080049d7 	.word	0x080049d7
 8004958:	080049d7 	.word	0x080049d7
 800495c:	080049d7 	.word	0x080049d7
 8004960:	080049d7 	.word	0x080049d7
 8004964:	080049d7 	.word	0x080049d7
 8004968:	080049d7 	.word	0x080049d7
 800496c:	08004985 	.word	0x08004985
 8004970:	08004999 	.word	0x08004999
 8004974:	4a79      	ldr	r2, [pc, #484]	; (8004b5c <HAL_GPIO_Init+0x2b4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800497a:	e02c      	b.n	80049d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	623b      	str	r3, [r7, #32]
          break;
 8004982:	e029      	b.n	80049d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	3304      	adds	r3, #4
 800498a:	623b      	str	r3, [r7, #32]
          break;
 800498c:	e024      	b.n	80049d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	3308      	adds	r3, #8
 8004994:	623b      	str	r3, [r7, #32]
          break;
 8004996:	e01f      	b.n	80049d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	330c      	adds	r3, #12
 800499e:	623b      	str	r3, [r7, #32]
          break;
 80049a0:	e01a      	b.n	80049d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049aa:	2304      	movs	r3, #4
 80049ac:	623b      	str	r3, [r7, #32]
          break;
 80049ae:	e013      	b.n	80049d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d105      	bne.n	80049c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049b8:	2308      	movs	r3, #8
 80049ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	611a      	str	r2, [r3, #16]
          break;
 80049c2:	e009      	b.n	80049d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049c4:	2308      	movs	r3, #8
 80049c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	615a      	str	r2, [r3, #20]
          break;
 80049ce:	e003      	b.n	80049d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80049d0:	2300      	movs	r3, #0
 80049d2:	623b      	str	r3, [r7, #32]
          break;
 80049d4:	e000      	b.n	80049d8 <HAL_GPIO_Init+0x130>
          break;
 80049d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2bff      	cmp	r3, #255	; 0xff
 80049dc:	d801      	bhi.n	80049e2 <HAL_GPIO_Init+0x13a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	e001      	b.n	80049e6 <HAL_GPIO_Init+0x13e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2bff      	cmp	r3, #255	; 0xff
 80049ec:	d802      	bhi.n	80049f4 <HAL_GPIO_Init+0x14c>
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	e002      	b.n	80049fa <HAL_GPIO_Init+0x152>
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	3b08      	subs	r3, #8
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	210f      	movs	r1, #15
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	6a39      	ldr	r1, [r7, #32]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	431a      	orrs	r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80b1 	beq.w	8004b8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a28:	4b4d      	ldr	r3, [pc, #308]	; (8004b60 <HAL_GPIO_Init+0x2b8>)
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	4a4c      	ldr	r2, [pc, #304]	; (8004b60 <HAL_GPIO_Init+0x2b8>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6193      	str	r3, [r2, #24]
 8004a34:	4b4a      	ldr	r3, [pc, #296]	; (8004b60 <HAL_GPIO_Init+0x2b8>)
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a40:	4a48      	ldr	r2, [pc, #288]	; (8004b64 <HAL_GPIO_Init+0x2bc>)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	3302      	adds	r3, #2
 8004a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	220f      	movs	r2, #15
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a40      	ldr	r2, [pc, #256]	; (8004b68 <HAL_GPIO_Init+0x2c0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_GPIO_Init+0x1ec>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a3f      	ldr	r2, [pc, #252]	; (8004b6c <HAL_GPIO_Init+0x2c4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00d      	beq.n	8004a90 <HAL_GPIO_Init+0x1e8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a3e      	ldr	r2, [pc, #248]	; (8004b70 <HAL_GPIO_Init+0x2c8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <HAL_GPIO_Init+0x1e4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3d      	ldr	r2, [pc, #244]	; (8004b74 <HAL_GPIO_Init+0x2cc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d101      	bne.n	8004a88 <HAL_GPIO_Init+0x1e0>
 8004a84:	2303      	movs	r3, #3
 8004a86:	e006      	b.n	8004a96 <HAL_GPIO_Init+0x1ee>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	e004      	b.n	8004a96 <HAL_GPIO_Init+0x1ee>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e002      	b.n	8004a96 <HAL_GPIO_Init+0x1ee>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_GPIO_Init+0x1ee>
 8004a94:	2300      	movs	r3, #0
 8004a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a98:	f002 0203 	and.w	r2, r2, #3
 8004a9c:	0092      	lsls	r2, r2, #2
 8004a9e:	4093      	lsls	r3, r2
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004aa6:	492f      	ldr	r1, [pc, #188]	; (8004b64 <HAL_GPIO_Init+0x2bc>)
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	089b      	lsrs	r3, r3, #2
 8004aac:	3302      	adds	r3, #2
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	492c      	ldr	r1, [pc, #176]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]
 8004acc:	e006      	b.n	8004adc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ace:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	4928      	ldr	r1, [pc, #160]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ae8:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	4922      	ldr	r1, [pc, #136]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	e006      	b.n	8004b04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004af6:	4b20      	ldr	r3, [pc, #128]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	43db      	mvns	r3, r3
 8004afe:	491e      	ldr	r1, [pc, #120]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	4918      	ldr	r1, [pc, #96]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]
 8004b1c:	e006      	b.n	8004b2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b1e:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	4914      	ldr	r1, [pc, #80]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d021      	beq.n	8004b7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	490e      	ldr	r1, [pc, #56]	; (8004b78 <HAL_GPIO_Init+0x2d0>)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60cb      	str	r3, [r1, #12]
 8004b44:	e021      	b.n	8004b8a <HAL_GPIO_Init+0x2e2>
 8004b46:	bf00      	nop
 8004b48:	10320000 	.word	0x10320000
 8004b4c:	10310000 	.word	0x10310000
 8004b50:	10220000 	.word	0x10220000
 8004b54:	10210000 	.word	0x10210000
 8004b58:	10120000 	.word	0x10120000
 8004b5c:	10110000 	.word	0x10110000
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40010800 	.word	0x40010800
 8004b6c:	40010c00 	.word	0x40010c00
 8004b70:	40011000 	.word	0x40011000
 8004b74:	40011400 	.word	0x40011400
 8004b78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_GPIO_Init+0x304>)
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	43db      	mvns	r3, r3
 8004b84:	4909      	ldr	r1, [pc, #36]	; (8004bac <HAL_GPIO_Init+0x304>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f47f ae8e 	bne.w	80048bc <HAL_GPIO_Init+0x14>
  }
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	372c      	adds	r7, #44	; 0x2c
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	40010400 	.word	0x40010400

08004bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bc0:	787b      	ldrb	r3, [r7, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004bcc:	e003      	b.n	8004bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bce:	887b      	ldrh	r3, [r7, #2]
 8004bd0:	041a      	lsls	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d006      	beq.n	8004c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bf6:	4a05      	ldr	r2, [pc, #20]	; (8004c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f806 	bl	8004c10 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40010400 	.word	0x40010400

08004c10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 fbba 	bl	80083b4 <USB_GetMode>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	f040 80ef 	bne.w	8004e26 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f003 fb9f 	bl	8008390 <USB_ReadInterrupts>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80e5 	beq.w	8004e24 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f003 fb96 	bl	8008390 <USB_ReadInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c6e:	d104      	bne.n	8004c7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f003 fb86 	bl	8008390 <USB_ReadInterrupts>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8e:	d104      	bne.n	8004c9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fb76 	bl	8008390 <USB_ReadInterrupts>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cae:	d104      	bne.n	8004cba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004cb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f003 fb66 	bl	8008390 <USB_ReadInterrupts>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d103      	bne.n	8004cd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f003 fb58 	bl	8008390 <USB_ReadInterrupts>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cea:	d115      	bne.n	8004d18 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004cf4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f003 fde3 	bl	80088d2 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f003 fb5b 	bl	80083ce <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f003 fb37 	bl	8008390 <USB_ReadInterrupts>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d2c:	d102      	bne.n	8004d34 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f001 f8ae 	bl	8005e90 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f003 fb29 	bl	8008390 <USB_ReadInterrupts>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d106      	bne.n	8004d56 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f003 fda6 	bl	800889a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2208      	movs	r2, #8
 8004d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f003 fb18 	bl	8008390 <USB_ReadInterrupts>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d6a:	d138      	bne.n	8004dde <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f003 fb65 	bl	8008440 <USB_HC_ReadInterrupt>
 8004d76:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e025      	b.n	8004dca <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d018      	beq.n	8004dc4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da8:	d106      	bne.n	8004db8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f858 	bl	8004e66 <HCD_HC_IN_IRQHandler>
 8004db6:	e005      	b.n	8004dc4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fc62 	bl	8005688 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d3d4      	bcc.n	8004d7e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f003 fad4 	bl	8008390 <USB_ReadInterrupts>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d101      	bne.n	8004df6 <HAL_HCD_IRQHandler+0x1d2>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_HCD_IRQHandler+0x1d4>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d014      	beq.n	8004e26 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0210 	bic.w	r2, r2, #16
 8004e0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 ff91 	bl	8005d34 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0210 	orr.w	r2, r2, #16
 8004e20:	619a      	str	r2, [r3, #24]
 8004e22:	e000      	b.n	8004e26 <HAL_HCD_IRQHandler+0x202>
      return;
 8004e24:	bf00      	nop
    }
  }
}
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_HCD_Stop+0x16>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e00d      	b.n	8004e5e <HAL_HCD_Stop+0x32>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 fc04 	bl	800865c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d119      	bne.n	8004eca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec2:	f043 0302 	orr.w	r3, r3, #2
 8004ec6:	60d3      	str	r3, [r2, #12]
 8004ec8:	e0ce      	b.n	8005068 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee0:	d12c      	bne.n	8004f3c <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	440b      	add	r3, r1
 8004f04:	335d      	adds	r3, #93	; 0x5d
 8004f06:	2207      	movs	r2, #7
 8004f08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f003 fa93 	bl	8008460 <USB_HC_Halt>
 8004f3a:	e095      	b.n	8005068 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d109      	bne.n	8004f66 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2320      	movs	r3, #32
 8004f62:	6093      	str	r3, [r2, #8]
 8004f64:	e080      	b.n	8005068 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d134      	bne.n	8004fe6 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f96:	f043 0302 	orr.w	r3, r3, #2
 8004f9a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	440b      	add	r3, r1
 8004faa:	335d      	adds	r3, #93	; 0x5d
 8004fac:	2205      	movs	r2, #5
 8004fae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2310      	movs	r3, #16
 8004fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f003 fa3e 	bl	8008460 <USB_HC_Halt>
 8004fe4:	e040      	b.n	8005068 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffc:	d134      	bne.n	8005068 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4413      	add	r3, r2
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	440a      	add	r2, r1
 8005014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005018:	f043 0302 	orr.w	r3, r3, #2
 800501c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f003 fa19 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	461a      	mov	r2, r3
 800503c:	2310      	movs	r3, #16
 800503e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	440b      	add	r3, r1
 800504e:	335d      	adds	r3, #93	; 0x5d
 8005050:	2208      	movs	r2, #8
 8005052:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005060:	461a      	mov	r2, r3
 8005062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005066:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4413      	add	r3, r2
 8005070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507e:	d122      	bne.n	80050c6 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	440a      	add	r2, r1
 8005096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f003 f9d8 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050bc:	461a      	mov	r2, r3
 80050be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80050c4:	e2dc      	b.n	8005680 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	f040 80dd 	bne.w	8005298 <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	335d      	adds	r3, #93	; 0x5d
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	3358      	adds	r3, #88	; 0x58
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	461a      	mov	r2, r3
 8005114:	2301      	movs	r3, #1
 8005116:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	440b      	add	r3, r1
 8005126:	333f      	adds	r3, #63	; 0x3f
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	440b      	add	r3, r1
 800513c:	333f      	adds	r3, #63	; 0x3f
 800513e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005140:	2b02      	cmp	r3, #2
 8005142:	d121      	bne.n	8005188 <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	440a      	add	r2, r1
 800515a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515e:	f043 0302 	orr.w	r3, r3, #2
 8005162:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f003 f976 	bl	8008460 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	461a      	mov	r2, r3
 8005182:	2310      	movs	r3, #16
 8005184:	6093      	str	r3, [r2, #8]
 8005186:	e070      	b.n	800526a <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	440b      	add	r3, r1
 8005196:	333f      	adds	r3, #63	; 0x3f
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d12a      	bne.n	80051f4 <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051bc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	335c      	adds	r3, #92	; 0x5c
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	b2d8      	uxtb	r0, r3
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	440b      	add	r3, r1
 80051e4:	335c      	adds	r3, #92	; 0x5c
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4601      	mov	r1, r0
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f003 fb7e 	bl	80088ee <HAL_HCD_HC_NotifyURBChange_Callback>
 80051f2:	e03a      	b.n	800526a <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	440b      	add	r3, r1
 8005202:	333f      	adds	r3, #63	; 0x3f
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d12f      	bne.n	800526a <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	440b      	add	r3, r1
 8005218:	335c      	adds	r3, #92	; 0x5c
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	440b      	add	r3, r1
 800522c:	3350      	adds	r3, #80	; 0x50
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f083 0301 	eor.w	r3, r3, #1
 8005234:	b2d8      	uxtb	r0, r3
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	440b      	add	r3, r1
 8005244:	3350      	adds	r3, #80	; 0x50
 8005246:	4602      	mov	r2, r0
 8005248:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	b2d8      	uxtb	r0, r3
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	440b      	add	r3, r1
 800525c:	335c      	adds	r3, #92	; 0x5c
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	461a      	mov	r2, r3
 8005262:	4601      	mov	r1, r0
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f003 fb42 	bl	80088ee <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	440b      	add	r3, r1
 8005278:	3350      	adds	r3, #80	; 0x50
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f083 0301 	eor.w	r3, r3, #1
 8005280:	b2d8      	uxtb	r0, r3
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	3350      	adds	r3, #80	; 0x50
 8005292:	4602      	mov	r2, r0
 8005294:	701a      	strb	r2, [r3, #0]
}
 8005296:	e1f3      	b.n	8005680 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	f040 811a 	bne.w	80054e4 <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ca:	f023 0302 	bic.w	r3, r3, #2
 80052ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	335d      	adds	r3, #93	; 0x5d
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10a      	bne.n	80052fc <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	440b      	add	r3, r1
 80052f4:	335c      	adds	r3, #92	; 0x5c
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e0d9      	b.n	80054b0 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	440b      	add	r3, r1
 800530a:	335d      	adds	r3, #93	; 0x5d
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b05      	cmp	r3, #5
 8005310:	d10a      	bne.n	8005328 <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	440b      	add	r3, r1
 8005320:	335c      	adds	r3, #92	; 0x5c
 8005322:	2205      	movs	r2, #5
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	e0c3      	b.n	80054b0 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	440b      	add	r3, r1
 8005336:	335d      	adds	r3, #93	; 0x5d
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d00a      	beq.n	8005354 <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	440b      	add	r3, r1
 800534c:	335d      	adds	r3, #93	; 0x5d
 800534e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005350:	2b08      	cmp	r3, #8
 8005352:	d156      	bne.n	8005402 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	440b      	add	r3, r1
 8005362:	3358      	adds	r3, #88	; 0x58
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4403      	add	r3, r0
 8005376:	3358      	adds	r3, #88	; 0x58
 8005378:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	3358      	adds	r3, #88	; 0x58
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d914      	bls.n	80053ba <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	3358      	adds	r3, #88	; 0x58
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	440b      	add	r3, r1
 80053b2:	335c      	adds	r3, #92	; 0x5c
 80053b4:	2204      	movs	r2, #4
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	e009      	b.n	80053ce <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	440b      	add	r3, r1
 80053c8:	335c      	adds	r3, #92	; 0x5c
 80053ca:	2202      	movs	r2, #2
 80053cc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053e4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fa:	461a      	mov	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e056      	b.n	80054b0 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	440b      	add	r3, r1
 8005410:	335d      	adds	r3, #93	; 0x5d
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d123      	bne.n	8005460 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	440b      	add	r3, r1
 8005426:	335c      	adds	r3, #92	; 0x5c
 8005428:	2202      	movs	r2, #2
 800542a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005442:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800544a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	461a      	mov	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e027      	b.n	80054b0 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	440b      	add	r3, r1
 800546e:	335d      	adds	r3, #93	; 0x5d
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b07      	cmp	r3, #7
 8005474:	d11c      	bne.n	80054b0 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	440b      	add	r3, r1
 8005484:	3358      	adds	r3, #88	; 0x58
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	1c59      	adds	r1, r3, #1
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4403      	add	r3, r0
 8005498:	3358      	adds	r3, #88	; 0x58
 800549a:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	440b      	add	r3, r1
 80054aa:	335c      	adds	r3, #92	; 0x5c
 80054ac:	2204      	movs	r2, #4
 80054ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054bc:	461a      	mov	r2, r3
 80054be:	2302      	movs	r3, #2
 80054c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	b2d8      	uxtb	r0, r3
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	440b      	add	r3, r1
 80054d4:	335c      	adds	r3, #92	; 0x5c
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	4601      	mov	r1, r0
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f003 fa06 	bl	80088ee <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80054e2:	e0cd      	b.n	8005680 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d13e      	bne.n	8005578 <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	440a      	add	r2, r1
 8005510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005514:	f043 0302 	orr.w	r3, r3, #2
 8005518:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	440b      	add	r3, r1
 8005528:	3358      	adds	r3, #88	; 0x58
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	4403      	add	r3, r0
 800553c:	3358      	adds	r3, #88	; 0x58
 800553e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	440b      	add	r3, r1
 800554e:	335d      	adds	r3, #93	; 0x5d
 8005550:	2206      	movs	r2, #6
 8005552:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f002 ff7e 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4413      	add	r3, r2
 800556c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005570:	461a      	mov	r2, r3
 8005572:	2380      	movs	r3, #128	; 0x80
 8005574:	6093      	str	r3, [r2, #8]
}
 8005576:	e083      	b.n	8005680 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b10      	cmp	r3, #16
 800558c:	d178      	bne.n	8005680 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	333f      	adds	r3, #63	; 0x3f
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d122      	bne.n	80055ea <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	3358      	adds	r3, #88	; 0x58
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d2:	f043 0302 	orr.w	r3, r3, #2
 80055d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 ff3c 	bl	8008460 <USB_HC_Halt>
 80055e8:	e041      	b.n	800566e <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	440b      	add	r3, r1
 80055f8:	333f      	adds	r3, #63	; 0x3f
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	440b      	add	r3, r1
 800560e:	333f      	adds	r3, #63	; 0x3f
 8005610:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005612:	2b02      	cmp	r3, #2
 8005614:	d12b      	bne.n	800566e <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	440b      	add	r3, r1
 8005624:	3358      	adds	r3, #88	; 0x58
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	335d      	adds	r3, #93	; 0x5d
 800563a:	2203      	movs	r2, #3
 800563c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	440a      	add	r2, r1
 8005654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f002 fef9 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	461a      	mov	r2, r3
 800567c:	2310      	movs	r3, #16
 800567e:	6093      	str	r3, [r2, #8]
}
 8005680:	bf00      	nop
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d119      	bne.n	80056ec <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c4:	461a      	mov	r2, r3
 80056c6:	2304      	movs	r3, #4
 80056c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e4:	f043 0302 	orr.w	r3, r3, #2
 80056e8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80056ea:	e31e      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d141      	bne.n	8005786 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	461a      	mov	r2, r3
 8005710:	2320      	movs	r3, #32
 8005712:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	333d      	adds	r3, #61	; 0x3d
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	f040 82ff 	bne.w	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	440b      	add	r3, r1
 800573a:	333d      	adds	r3, #61	; 0x3d
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	440b      	add	r3, r1
 800574e:	335c      	adds	r3, #92	; 0x5c
 8005750:	2202      	movs	r2, #2
 8005752:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	440a      	add	r2, r1
 800576a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576e:	f043 0302 	orr.w	r3, r3, #2
 8005772:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f002 fe6e 	bl	8008460 <USB_HC_Halt>
}
 8005784:	e2d1      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d13f      	bne.n	800581c <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	335d      	adds	r3, #93	; 0x5d
 80057ac:	2204      	movs	r2, #4
 80057ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	440b      	add	r3, r1
 80057be:	333d      	adds	r3, #61	; 0x3d
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	440b      	add	r3, r1
 80057d2:	3358      	adds	r3, #88	; 0x58
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f2:	f043 0302 	orr.w	r3, r3, #2
 80057f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f002 fe2c 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005814:	461a      	mov	r2, r3
 8005816:	2340      	movs	r3, #64	; 0x40
 8005818:	6093      	str	r3, [r2, #8]
}
 800581a:	e286      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005832:	d122      	bne.n	800587a <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	440a      	add	r2, r1
 800584a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800584e:	f043 0302 	orr.w	r3, r3, #2
 8005852:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f002 fdfe 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	461a      	mov	r2, r3
 8005872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005876:	6093      	str	r3, [r2, #8]
}
 8005878:	e257      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b01      	cmp	r3, #1
 800588e:	d135      	bne.n	80058fc <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	440b      	add	r3, r1
 800589e:	3358      	adds	r3, #88	; 0x58
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058be:	f043 0302 	orr.w	r3, r3, #2
 80058c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f002 fdc6 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e0:	461a      	mov	r2, r3
 80058e2:	2301      	movs	r3, #1
 80058e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	440b      	add	r3, r1
 80058f4:	335d      	adds	r3, #93	; 0x5d
 80058f6:	2201      	movs	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
}
 80058fa:	e216      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4413      	add	r3, r2
 8005904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b08      	cmp	r3, #8
 8005910:	d12b      	bne.n	800596a <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	461a      	mov	r2, r3
 8005920:	2308      	movs	r3, #8
 8005922:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	440a      	add	r2, r1
 800593a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f002 fd86 	bl	8008460 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	440b      	add	r3, r1
 8005962:	335d      	adds	r3, #93	; 0x5d
 8005964:	2205      	movs	r2, #5
 8005966:	701a      	strb	r2, [r3, #0]
}
 8005968:	e1df      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b10      	cmp	r3, #16
 800597e:	d135      	bne.n	80059ec <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	440b      	add	r3, r1
 800598e:	3358      	adds	r3, #88	; 0x58
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	440b      	add	r3, r1
 80059a2:	335d      	adds	r3, #93	; 0x5d
 80059a4:	2203      	movs	r2, #3
 80059a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c2:	f043 0302 	orr.w	r3, r3, #2
 80059c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f002 fd44 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e4:	461a      	mov	r2, r3
 80059e6:	2310      	movs	r3, #16
 80059e8:	6093      	str	r3, [r2, #8]
}
 80059ea:	e19e      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b80      	cmp	r3, #128	; 0x80
 8005a00:	d12b      	bne.n	8005a5a <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a1c:	f043 0302 	orr.w	r3, r3, #2
 8005a20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f002 fd17 	bl	8008460 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	440b      	add	r3, r1
 8005a40:	335d      	adds	r3, #93	; 0x5d
 8005a42:	2206      	movs	r2, #6
 8005a44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	461a      	mov	r2, r3
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	6093      	str	r3, [r2, #8]
}
 8005a58:	e167      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a70:	d135      	bne.n	8005ade <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8c:	f043 0302 	orr.w	r3, r3, #2
 8005a90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f002 fcdf 	bl	8008460 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	440b      	add	r3, r1
 8005ad6:	335d      	adds	r3, #93	; 0x5d
 8005ad8:	2208      	movs	r2, #8
 8005ada:	701a      	strb	r2, [r3, #0]
}
 8005adc:	e125      	b.n	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f040 811a 	bne.w	8005d2a <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b10:	f023 0302 	bic.w	r3, r3, #2
 8005b14:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	440b      	add	r3, r1
 8005b24:	335d      	adds	r3, #93	; 0x5d
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d137      	bne.n	8005b9c <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	440b      	add	r3, r1
 8005b3a:	335c      	adds	r3, #92	; 0x5c
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	440b      	add	r3, r1
 8005b4e:	333f      	adds	r3, #63	; 0x3f
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d00b      	beq.n	8005b6e <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	440b      	add	r3, r1
 8005b64:	333f      	adds	r3, #63	; 0x3f
 8005b66:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	f040 80c5 	bne.w	8005cf8 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3351      	adds	r3, #81	; 0x51
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f083 0301 	eor.w	r3, r3, #1
 8005b84:	b2d8      	uxtb	r0, r3
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	440b      	add	r3, r1
 8005b94:	3351      	adds	r3, #81	; 0x51
 8005b96:	4602      	mov	r2, r0
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e0ad      	b.n	8005cf8 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	440b      	add	r3, r1
 8005baa:	335d      	adds	r3, #93	; 0x5d
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d10a      	bne.n	8005bc8 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	440b      	add	r3, r1
 8005bc0:	335c      	adds	r3, #92	; 0x5c
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	e097      	b.n	8005cf8 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	440b      	add	r3, r1
 8005bd6:	335d      	adds	r3, #93	; 0x5d
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d10a      	bne.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	440b      	add	r3, r1
 8005bec:	335c      	adds	r3, #92	; 0x5c
 8005bee:	2202      	movs	r2, #2
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e081      	b.n	8005cf8 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	440b      	add	r3, r1
 8005c02:	335d      	adds	r3, #93	; 0x5d
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	d10a      	bne.n	8005c20 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	440b      	add	r3, r1
 8005c18:	335c      	adds	r3, #92	; 0x5c
 8005c1a:	2205      	movs	r2, #5
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e06b      	b.n	8005cf8 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	440b      	add	r3, r1
 8005c2e:	335d      	adds	r3, #93	; 0x5d
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d00a      	beq.n	8005c4c <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	440b      	add	r3, r1
 8005c44:	335d      	adds	r3, #93	; 0x5d
 8005c46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d155      	bne.n	8005cf8 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	440b      	add	r3, r1
 8005c5a:	3358      	adds	r3, #88	; 0x58
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4403      	add	r3, r0
 8005c6e:	3358      	adds	r3, #88	; 0x58
 8005c70:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	440b      	add	r3, r1
 8005c80:	3358      	adds	r3, #88	; 0x58
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d914      	bls.n	8005cb2 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	440b      	add	r3, r1
 8005c96:	3358      	adds	r3, #88	; 0x58
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	440b      	add	r3, r1
 8005caa:	335c      	adds	r3, #92	; 0x5c
 8005cac:	2204      	movs	r2, #4
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	e009      	b.n	8005cc6 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	440b      	add	r3, r1
 8005cc0:	335c      	adds	r3, #92	; 0x5c
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cdc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d04:	461a      	mov	r2, r3
 8005d06:	2302      	movs	r3, #2
 8005d08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	b2d8      	uxtb	r0, r3
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	440b      	add	r3, r1
 8005d1c:	335c      	adds	r3, #92	; 0x5c
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	4601      	mov	r1, r0
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f002 fde2 	bl	80088ee <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005d2a:	bf00      	nop
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	; 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	0c5b      	lsrs	r3, r3, #17
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d68:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d004      	beq.n	8005d7a <HCD_RXQLVL_IRQHandler+0x46>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b05      	cmp	r3, #5
 8005d74:	f000 8082 	beq.w	8005e7c <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005d78:	e083      	b.n	8005e82 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d07f      	beq.n	8005e80 <HCD_RXQLVL_IRQHandler+0x14c>
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	440b      	add	r3, r1
 8005d8e:	3344      	adds	r3, #68	; 0x44
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d074      	beq.n	8005e80 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	440b      	add	r3, r1
 8005da8:	3344      	adds	r3, #68	; 0x44
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	b292      	uxth	r2, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	f002 fac5 	bl	8008340 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3344      	adds	r3, #68	; 0x44
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	18d1      	adds	r1, r2, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4403      	add	r3, r0
 8005dda:	3344      	adds	r3, #68	; 0x44
 8005ddc:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	440b      	add	r3, r1
 8005dec:	334c      	adds	r3, #76	; 0x4c
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	18d1      	adds	r1, r2, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4403      	add	r3, r0
 8005e02:	334c      	adds	r3, #76	; 0x4c
 8005e04:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <HCD_RXQLVL_IRQHandler+0x158>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d031      	beq.n	8005e80 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e32:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3a:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3350      	adds	r3, #80	; 0x50
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f083 0301 	eor.w	r3, r3, #1
 8005e64:	b2d8      	uxtb	r0, r3
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	440b      	add	r3, r1
 8005e74:	3350      	adds	r3, #80	; 0x50
 8005e76:	4602      	mov	r2, r0
 8005e78:	701a      	strb	r2, [r3, #0]
      break;
 8005e7a:	e001      	b.n	8005e80 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8005e80:	bf00      	nop
  }
}
 8005e82:	bf00      	nop
 8005e84:	3728      	adds	r7, #40	; 0x28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	1ff80000 	.word	0x1ff80000

08005e90 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ebc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d10b      	bne.n	8005ee0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d102      	bne.n	8005ed8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 fcef 	bl	80088b6 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f043 0302 	orr.w	r3, r3, #2
 8005ede:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d132      	bne.n	8005f50 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f043 0308 	orr.w	r3, r3, #8
 8005ef0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d126      	bne.n	8005f4a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d113      	bne.n	8005f2c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005f0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f0e:	d106      	bne.n	8005f1e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2102      	movs	r1, #2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f002 fa59 	bl	80083ce <USB_InitFSLSPClkSel>
 8005f1c:	e011      	b.n	8005f42 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2101      	movs	r1, #1
 8005f24:	4618      	mov	r0, r3
 8005f26:	f002 fa52 	bl	80083ce <USB_InitFSLSPClkSel>
 8005f2a:	e00a      	b.n	8005f42 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d106      	bne.n	8005f42 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005f40:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f002 fce0 	bl	8008908 <HAL_HCD_PortEnabled_Callback>
 8005f48:	e002      	b.n	8005f50 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f002 fcea 	bl	8008924 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d103      	bne.n	8005f62 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f043 0320 	orr.w	r3, r3, #32
 8005f60:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6013      	str	r3, [r2, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e12b      	b.n	80061e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f95d 	bl	800625e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2224      	movs	r2, #36	; 0x24
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fdc:	f001 fce2 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 8005fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4a81      	ldr	r2, [pc, #516]	; (80061ec <HAL_I2C_Init+0x274>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d807      	bhi.n	8005ffc <HAL_I2C_Init+0x84>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a80      	ldr	r2, [pc, #512]	; (80061f0 <HAL_I2C_Init+0x278>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	bf94      	ite	ls
 8005ff4:	2301      	movls	r3, #1
 8005ff6:	2300      	movhi	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e006      	b.n	800600a <HAL_I2C_Init+0x92>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4a7d      	ldr	r2, [pc, #500]	; (80061f4 <HAL_I2C_Init+0x27c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	bf94      	ite	ls
 8006004:	2301      	movls	r3, #1
 8006006:	2300      	movhi	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e0e7      	b.n	80061e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4a78      	ldr	r2, [pc, #480]	; (80061f8 <HAL_I2C_Init+0x280>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	0c9b      	lsrs	r3, r3, #18
 800601c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4a6a      	ldr	r2, [pc, #424]	; (80061ec <HAL_I2C_Init+0x274>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d802      	bhi.n	800604c <HAL_I2C_Init+0xd4>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	3301      	adds	r3, #1
 800604a:	e009      	b.n	8006060 <HAL_I2C_Init+0xe8>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	4a69      	ldr	r2, [pc, #420]	; (80061fc <HAL_I2C_Init+0x284>)
 8006058:	fba2 2303 	umull	r2, r3, r2, r3
 800605c:	099b      	lsrs	r3, r3, #6
 800605e:	3301      	adds	r3, #1
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	430b      	orrs	r3, r1
 8006066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	495c      	ldr	r1, [pc, #368]	; (80061ec <HAL_I2C_Init+0x274>)
 800607c:	428b      	cmp	r3, r1
 800607e:	d819      	bhi.n	80060b4 <HAL_I2C_Init+0x13c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1e59      	subs	r1, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	fbb1 f3f3 	udiv	r3, r1, r3
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006094:	400b      	ands	r3, r1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_I2C_Init+0x138>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	1e59      	subs	r1, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80060a8:	3301      	adds	r3, #1
 80060aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ae:	e051      	b.n	8006154 <HAL_I2C_Init+0x1dc>
 80060b0:	2304      	movs	r3, #4
 80060b2:	e04f      	b.n	8006154 <HAL_I2C_Init+0x1dc>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d111      	bne.n	80060e0 <HAL_I2C_Init+0x168>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	1e58      	subs	r0, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6859      	ldr	r1, [r3, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	440b      	add	r3, r1
 80060ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bf0c      	ite	eq
 80060d8:	2301      	moveq	r3, #1
 80060da:	2300      	movne	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	e012      	b.n	8006106 <HAL_I2C_Init+0x18e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	1e58      	subs	r0, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	0099      	lsls	r1, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060f6:	3301      	adds	r3, #1
 80060f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_I2C_Init+0x196>
 800610a:	2301      	movs	r3, #1
 800610c:	e022      	b.n	8006154 <HAL_I2C_Init+0x1dc>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10e      	bne.n	8006134 <HAL_I2C_Init+0x1bc>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	1e58      	subs	r0, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6859      	ldr	r1, [r3, #4]
 800611e:	460b      	mov	r3, r1
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	440b      	add	r3, r1
 8006124:	fbb0 f3f3 	udiv	r3, r0, r3
 8006128:	3301      	adds	r3, #1
 800612a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800612e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006132:	e00f      	b.n	8006154 <HAL_I2C_Init+0x1dc>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1e58      	subs	r0, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6859      	ldr	r1, [r3, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	0099      	lsls	r1, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	fbb0 f3f3 	udiv	r3, r0, r3
 800614a:	3301      	adds	r3, #1
 800614c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	6809      	ldr	r1, [r1, #0]
 8006158:	4313      	orrs	r3, r2
 800615a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69da      	ldr	r2, [r3, #28]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6911      	ldr	r1, [r2, #16]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	68d2      	ldr	r2, [r2, #12]
 800618e:	4311      	orrs	r1, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	430b      	orrs	r3, r1
 8006196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	000186a0 	.word	0x000186a0
 80061f0:	001e847f 	.word	0x001e847f
 80061f4:	003d08ff 	.word	0x003d08ff
 80061f8:	431bde83 	.word	0x431bde83
 80061fc:	10624dd3 	.word	0x10624dd3

08006200 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e021      	b.n	8006256 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2224      	movs	r2, #36	; 0x24
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f820 	bl	8006270 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr

08006270 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr
	...

08006284 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	461a      	mov	r2, r3
 8006292:	4603      	mov	r3, r0
 8006294:	817b      	strh	r3, [r7, #10]
 8006296:	460b      	mov	r3, r1
 8006298:	813b      	strh	r3, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800629e:	f7fd fd81 	bl	8003da4 <HAL_GetTick>
 80062a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	f040 80d9 	bne.w	8006464 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	2319      	movs	r3, #25
 80062b8:	2201      	movs	r2, #1
 80062ba:	496d      	ldr	r1, [pc, #436]	; (8006470 <HAL_I2C_Mem_Write+0x1ec>)
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fccf 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
 80062ca:	e0cc      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_I2C_Mem_Write+0x56>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0c5      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d007      	beq.n	8006300 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800630e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2221      	movs	r2, #33	; 0x21
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2240      	movs	r2, #64	; 0x40
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a4d      	ldr	r2, [pc, #308]	; (8006474 <HAL_I2C_Mem_Write+0x1f0>)
 8006340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006342:	88f8      	ldrh	r0, [r7, #6]
 8006344:	893a      	ldrh	r2, [r7, #8]
 8006346:	8979      	ldrh	r1, [r7, #10]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4603      	mov	r3, r0
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fb06 	bl	8006964 <I2C_RequestMemoryWrite>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d052      	beq.n	8006404 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e081      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fd50 	bl	8006e0c <I2C_WaitOnTXEFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b04      	cmp	r3, #4
 8006378:	d107      	bne.n	800638a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e06b      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d11b      	bne.n	8006404 <HAL_I2C_Mem_Write+0x180>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d017      	beq.n	8006404 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1aa      	bne.n	8006362 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fd3c 	bl	8006e8e <I2C_WaitOnBTFFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00d      	beq.n	8006438 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	2b04      	cmp	r3, #4
 8006422:	d107      	bne.n	8006434 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006432:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e016      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e000      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006464:	2302      	movs	r3, #2
  }
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	00100002 	.word	0x00100002
 8006474:	ffff0000 	.word	0xffff0000

08006478 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4603      	mov	r3, r0
 8006488:	817b      	strh	r3, [r7, #10]
 800648a:	460b      	mov	r3, r1
 800648c:	813b      	strh	r3, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006496:	f7fd fc85 	bl	8003da4 <HAL_GetTick>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	f040 8244 	bne.w	8006932 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2319      	movs	r3, #25
 80064b0:	2201      	movs	r2, #1
 80064b2:	4982      	ldr	r1, [pc, #520]	; (80066bc <HAL_I2C_Mem_Read+0x244>)
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fbd3 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
 80064c2:	e237      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_I2C_Mem_Read+0x5a>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e230      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d007      	beq.n	80064f8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2222      	movs	r2, #34	; 0x22
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2240      	movs	r2, #64	; 0x40
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a62      	ldr	r2, [pc, #392]	; (80066c0 <HAL_I2C_Mem_Read+0x248>)
 8006538:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800653a:	88f8      	ldrh	r0, [r7, #6]
 800653c:	893a      	ldrh	r2, [r7, #8]
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	4603      	mov	r3, r0
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 faa0 	bl	8006a90 <I2C_RequestMemoryRead>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e1ec      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	d113      	bne.n	800658a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e1c0      	b.n	800690c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658e:	2b01      	cmp	r3, #1
 8006590:	d11e      	bne.n	80065d0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80065a2:	b672      	cpsid	i
}
 80065a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80065cc:	b662      	cpsie	i
}
 80065ce:	e035      	b.n	800663c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d11e      	bne.n	8006616 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80065e8:	b672      	cpsid	i
}
 80065ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006610:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006612:	b662      	cpsie	i
}
 8006614:	e012      	b.n	800663c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006624:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006626:	2300      	movs	r3, #0
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800663c:	e166      	b.n	800690c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	2b03      	cmp	r3, #3
 8006644:	f200 811f 	bhi.w	8006886 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	2b01      	cmp	r3, #1
 800664e:	d123      	bne.n	8006698 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fc5b 	bl	8006f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e167      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006696:	e139      	b.n	800690c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	2b02      	cmp	r3, #2
 800669e:	d152      	bne.n	8006746 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2200      	movs	r2, #0
 80066a8:	4906      	ldr	r1, [pc, #24]	; (80066c4 <HAL_I2C_Mem_Read+0x24c>)
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fad8 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e13c      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
 80066ba:	bf00      	nop
 80066bc:	00100002 	.word	0x00100002
 80066c0:	ffff0000 	.word	0xffff0000
 80066c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80066c8:	b672      	cpsid	i
}
 80066ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691a      	ldr	r2, [r3, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800670e:	b662      	cpsie	i
}
 8006710:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006744:	e0e2      	b.n	800690c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	2200      	movs	r2, #0
 800674e:	497b      	ldr	r1, [pc, #492]	; (800693c <HAL_I2C_Mem_Read+0x4c4>)
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fa85 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0e9      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800676e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006770:	b672      	cpsid	i
}
 8006772:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80067a6:	4b66      	ldr	r3, [pc, #408]	; (8006940 <HAL_I2C_Mem_Read+0x4c8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	08db      	lsrs	r3, r3, #3
 80067ac:	4a65      	ldr	r2, [pc, #404]	; (8006944 <HAL_I2C_Mem_Read+0x4cc>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	0a1a      	lsrs	r2, r3, #8
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	00da      	lsls	r2, r3, #3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d118      	bne.n	80067fe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80067ee:	b662      	cpsie	i
}
 80067f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e09a      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b04      	cmp	r3, #4
 800680a:	d1d9      	bne.n	80067c0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800684e:	b662      	cpsie	i
}
 8006850:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006884:	e042      	b.n	800690c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006888:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fb40 	bl	8006f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e04c      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d118      	bne.n	800690c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	f47f ae94 	bne.w	800663e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006932:	2302      	movs	r3, #2
  }
}
 8006934:	4618      	mov	r0, r3
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	00010004 	.word	0x00010004
 8006940:	2000000c 	.word	0x2000000c
 8006944:	14f8b589 	.word	0x14f8b589

08006948 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006956:	b2db      	uxtb	r3, r3
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
	...

08006964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4603      	mov	r3, r0
 8006974:	817b      	strh	r3, [r7, #10]
 8006976:	460b      	mov	r3, r1
 8006978:	813b      	strh	r3, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800698c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	2200      	movs	r2, #0
 8006996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f960 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00d      	beq.n	80069c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b4:	d103      	bne.n	80069be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e05f      	b.n	8006a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069c2:	897b      	ldrh	r3, [r7, #10]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	6a3a      	ldr	r2, [r7, #32]
 80069d6:	492d      	ldr	r1, [pc, #180]	; (8006a8c <I2C_RequestMemoryWrite+0x128>)
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f998 	bl	8006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e04c      	b.n	8006a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a00:	6a39      	ldr	r1, [r7, #32]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fa02 	bl	8006e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d107      	bne.n	8006a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e02b      	b.n	8006a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d105      	bne.n	8006a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a30:	893b      	ldrh	r3, [r7, #8]
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	611a      	str	r2, [r3, #16]
 8006a3a:	e021      	b.n	8006a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a3c:	893b      	ldrh	r3, [r7, #8]
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4c:	6a39      	ldr	r1, [r7, #32]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f9dc 	bl	8006e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00d      	beq.n	8006a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d107      	bne.n	8006a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e005      	b.n	8006a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a76:	893b      	ldrh	r3, [r7, #8]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	00010002 	.word	0x00010002

08006a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	817b      	strh	r3, [r7, #10]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	813b      	strh	r3, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f8c2 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af0:	d103      	bne.n	8006afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e0aa      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006afe:	897b      	ldrh	r3, [r7, #10]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	4952      	ldr	r1, [pc, #328]	; (8006c5c <I2C_RequestMemoryRead+0x1cc>)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f8fa 	bl	8006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e097      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3c:	6a39      	ldr	r1, [r7, #32]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f964 	bl	8006e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d107      	bne.n	8006b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e076      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	611a      	str	r2, [r3, #16]
 8006b76:	e021      	b.n	8006bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f93e 	bl	8006e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d107      	bne.n	8006bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e050      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbe:	6a39      	ldr	r1, [r7, #32]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f923 	bl	8006e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00d      	beq.n	8006be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d107      	bne.n	8006be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e035      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f82b 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00d      	beq.n	8006c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1e:	d103      	bne.n	8006c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e013      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c2c:	897b      	ldrh	r3, [r7, #10]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	f043 0301 	orr.w	r3, r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	6a3a      	ldr	r2, [r7, #32]
 8006c40:	4906      	ldr	r1, [pc, #24]	; (8006c5c <I2C_RequestMemoryRead+0x1cc>)
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f863 	bl	8006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	00010002 	.word	0x00010002

08006c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c70:	e025      	b.n	8006cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d021      	beq.n	8006cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7a:	f7fd f893 	bl	8003da4 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d302      	bcc.n	8006c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d116      	bne.n	8006cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f043 0220 	orr.w	r2, r3, #32
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e023      	b.n	8006d06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	0c1b      	lsrs	r3, r3, #16
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d10d      	bne.n	8006ce4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	43da      	mvns	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bf0c      	ite	eq
 8006cda:	2301      	moveq	r3, #1
 8006cdc:	2300      	movne	r3, #0
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	e00c      	b.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	43da      	mvns	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bf0c      	ite	eq
 8006cf6:	2301      	moveq	r3, #1
 8006cf8:	2300      	movne	r3, #0
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d0b6      	beq.n	8006c72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d1c:	e051      	b.n	8006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2c:	d123      	bne.n	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f043 0204 	orr.w	r2, r3, #4
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e046      	b.n	8006e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d021      	beq.n	8006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7e:	f7fd f811 	bl	8003da4 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d116      	bne.n	8006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f043 0220 	orr.w	r2, r3, #32
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e020      	b.n	8006e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d10c      	bne.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	43da      	mvns	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bf14      	ite	ne
 8006dde:	2301      	movne	r3, #1
 8006de0:	2300      	moveq	r3, #0
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	e00b      	b.n	8006dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	43da      	mvns	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4013      	ands	r3, r2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	bf14      	ite	ne
 8006df8:	2301      	movne	r3, #1
 8006dfa:	2300      	moveq	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d18d      	bne.n	8006d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e18:	e02d      	b.n	8006e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f8ce 	bl	8006fbc <I2C_IsAcknowledgeFailed>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e02d      	b.n	8006e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d021      	beq.n	8006e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e32:	f7fc ffb7 	bl	8003da4 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d302      	bcc.n	8006e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d116      	bne.n	8006e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f043 0220 	orr.w	r2, r3, #32
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e007      	b.n	8006e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e80:	2b80      	cmp	r3, #128	; 0x80
 8006e82:	d1ca      	bne.n	8006e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e9a:	e02d      	b.n	8006ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f88d 	bl	8006fbc <I2C_IsAcknowledgeFailed>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e02d      	b.n	8006f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb2:	d021      	beq.n	8006ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eb4:	f7fc ff76 	bl	8003da4 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d302      	bcc.n	8006eca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d116      	bne.n	8006ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	f043 0220 	orr.w	r2, r3, #32
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e007      	b.n	8006f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d1ca      	bne.n	8006e9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f1c:	e042      	b.n	8006fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d119      	bne.n	8006f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0210 	mvn.w	r2, #16
 8006f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e029      	b.n	8006fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f60:	f7fc ff20 	bl	8003da4 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d302      	bcc.n	8006f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d116      	bne.n	8006fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	f043 0220 	orr.w	r2, r3, #32
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e007      	b.n	8006fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d1b5      	bne.n	8006f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd2:	d11b      	bne.n	800700c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f043 0204 	orr.w	r2, r3, #4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e000      	b.n	800700e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e304      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8087 	beq.w	8007146 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007038:	4b92      	ldr	r3, [pc, #584]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f003 030c 	and.w	r3, r3, #12
 8007040:	2b04      	cmp	r3, #4
 8007042:	d00c      	beq.n	800705e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007044:	4b8f      	ldr	r3, [pc, #572]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 030c 	and.w	r3, r3, #12
 800704c:	2b08      	cmp	r3, #8
 800704e:	d112      	bne.n	8007076 <HAL_RCC_OscConfig+0x5e>
 8007050:	4b8c      	ldr	r3, [pc, #560]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705c:	d10b      	bne.n	8007076 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800705e:	4b89      	ldr	r3, [pc, #548]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d06c      	beq.n	8007144 <HAL_RCC_OscConfig+0x12c>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d168      	bne.n	8007144 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e2de      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800707e:	d106      	bne.n	800708e <HAL_RCC_OscConfig+0x76>
 8007080:	4b80      	ldr	r3, [pc, #512]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a7f      	ldr	r2, [pc, #508]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	e02e      	b.n	80070ec <HAL_RCC_OscConfig+0xd4>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10c      	bne.n	80070b0 <HAL_RCC_OscConfig+0x98>
 8007096:	4b7b      	ldr	r3, [pc, #492]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a7a      	ldr	r2, [pc, #488]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 800709c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	4b78      	ldr	r3, [pc, #480]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a77      	ldr	r2, [pc, #476]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	e01d      	b.n	80070ec <HAL_RCC_OscConfig+0xd4>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070b8:	d10c      	bne.n	80070d4 <HAL_RCC_OscConfig+0xbc>
 80070ba:	4b72      	ldr	r3, [pc, #456]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a71      	ldr	r2, [pc, #452]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	4b6f      	ldr	r3, [pc, #444]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a6e      	ldr	r2, [pc, #440]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	e00b      	b.n	80070ec <HAL_RCC_OscConfig+0xd4>
 80070d4:	4b6b      	ldr	r3, [pc, #428]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a6a      	ldr	r2, [pc, #424]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	4b68      	ldr	r3, [pc, #416]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a67      	ldr	r2, [pc, #412]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80070e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d013      	beq.n	800711c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f4:	f7fc fe56 	bl	8003da4 <HAL_GetTick>
 80070f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070fc:	f7fc fe52 	bl	8003da4 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b64      	cmp	r3, #100	; 0x64
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e292      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800710e:	4b5d      	ldr	r3, [pc, #372]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0f0      	beq.n	80070fc <HAL_RCC_OscConfig+0xe4>
 800711a:	e014      	b.n	8007146 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711c:	f7fc fe42 	bl	8003da4 <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007124:	f7fc fe3e 	bl	8003da4 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b64      	cmp	r3, #100	; 0x64
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e27e      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007136:	4b53      	ldr	r3, [pc, #332]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f0      	bne.n	8007124 <HAL_RCC_OscConfig+0x10c>
 8007142:	e000      	b.n	8007146 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d063      	beq.n	800721a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007152:	4b4c      	ldr	r3, [pc, #304]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f003 030c 	and.w	r3, r3, #12
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800715e:	4b49      	ldr	r3, [pc, #292]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f003 030c 	and.w	r3, r3, #12
 8007166:	2b08      	cmp	r3, #8
 8007168:	d11c      	bne.n	80071a4 <HAL_RCC_OscConfig+0x18c>
 800716a:	4b46      	ldr	r3, [pc, #280]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d116      	bne.n	80071a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007176:	4b43      	ldr	r3, [pc, #268]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <HAL_RCC_OscConfig+0x176>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d001      	beq.n	800718e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e252      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718e:	4b3d      	ldr	r3, [pc, #244]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4939      	ldr	r1, [pc, #228]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071a2:	e03a      	b.n	800721a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d020      	beq.n	80071ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071ac:	4b36      	ldr	r3, [pc, #216]	; (8007288 <HAL_RCC_OscConfig+0x270>)
 80071ae:	2201      	movs	r2, #1
 80071b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b2:	f7fc fdf7 	bl	8003da4 <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071ba:	f7fc fdf3 	bl	8003da4 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e233      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071cc:	4b2d      	ldr	r3, [pc, #180]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f0      	beq.n	80071ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d8:	4b2a      	ldr	r3, [pc, #168]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	4927      	ldr	r1, [pc, #156]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	600b      	str	r3, [r1, #0]
 80071ec:	e015      	b.n	800721a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071ee:	4b26      	ldr	r3, [pc, #152]	; (8007288 <HAL_RCC_OscConfig+0x270>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f4:	f7fc fdd6 	bl	8003da4 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071fc:	f7fc fdd2 	bl	8003da4 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e212      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800720e:	4b1d      	ldr	r3, [pc, #116]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d03a      	beq.n	800729c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d019      	beq.n	8007262 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800722e:	4b17      	ldr	r3, [pc, #92]	; (800728c <HAL_RCC_OscConfig+0x274>)
 8007230:	2201      	movs	r2, #1
 8007232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007234:	f7fc fdb6 	bl	8003da4 <HAL_GetTick>
 8007238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800723a:	e008      	b.n	800724e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800723c:	f7fc fdb2 	bl	8003da4 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d901      	bls.n	800724e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e1f2      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800724e:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <HAL_RCC_OscConfig+0x26c>)
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0f0      	beq.n	800723c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800725a:	2001      	movs	r0, #1
 800725c:	f000 fbb6 	bl	80079cc <RCC_Delay>
 8007260:	e01c      	b.n	800729c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007262:	4b0a      	ldr	r3, [pc, #40]	; (800728c <HAL_RCC_OscConfig+0x274>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007268:	f7fc fd9c 	bl	8003da4 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800726e:	e00f      	b.n	8007290 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007270:	f7fc fd98 	bl	8003da4 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d908      	bls.n	8007290 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e1d8      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
 8007282:	bf00      	nop
 8007284:	40021000 	.word	0x40021000
 8007288:	42420000 	.word	0x42420000
 800728c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007290:	4b9b      	ldr	r3, [pc, #620]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e9      	bne.n	8007270 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 80a6 	beq.w	80073f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ae:	4b94      	ldr	r3, [pc, #592]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10d      	bne.n	80072d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072ba:	4b91      	ldr	r3, [pc, #580]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	4a90      	ldr	r2, [pc, #576]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80072c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c4:	61d3      	str	r3, [r2, #28]
 80072c6:	4b8e      	ldr	r3, [pc, #568]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ce:	60bb      	str	r3, [r7, #8]
 80072d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072d2:	2301      	movs	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d6:	4b8b      	ldr	r3, [pc, #556]	; (8007504 <HAL_RCC_OscConfig+0x4ec>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d118      	bne.n	8007314 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072e2:	4b88      	ldr	r3, [pc, #544]	; (8007504 <HAL_RCC_OscConfig+0x4ec>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a87      	ldr	r2, [pc, #540]	; (8007504 <HAL_RCC_OscConfig+0x4ec>)
 80072e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ee:	f7fc fd59 	bl	8003da4 <HAL_GetTick>
 80072f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072f4:	e008      	b.n	8007308 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072f6:	f7fc fd55 	bl	8003da4 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b64      	cmp	r3, #100	; 0x64
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e195      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007308:	4b7e      	ldr	r3, [pc, #504]	; (8007504 <HAL_RCC_OscConfig+0x4ec>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0f0      	beq.n	80072f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d106      	bne.n	800732a <HAL_RCC_OscConfig+0x312>
 800731c:	4b78      	ldr	r3, [pc, #480]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	4a77      	ldr	r2, [pc, #476]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	6213      	str	r3, [r2, #32]
 8007328:	e02d      	b.n	8007386 <HAL_RCC_OscConfig+0x36e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10c      	bne.n	800734c <HAL_RCC_OscConfig+0x334>
 8007332:	4b73      	ldr	r3, [pc, #460]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	4a72      	ldr	r2, [pc, #456]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	6213      	str	r3, [r2, #32]
 800733e:	4b70      	ldr	r3, [pc, #448]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	4a6f      	ldr	r2, [pc, #444]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007344:	f023 0304 	bic.w	r3, r3, #4
 8007348:	6213      	str	r3, [r2, #32]
 800734a:	e01c      	b.n	8007386 <HAL_RCC_OscConfig+0x36e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b05      	cmp	r3, #5
 8007352:	d10c      	bne.n	800736e <HAL_RCC_OscConfig+0x356>
 8007354:	4b6a      	ldr	r3, [pc, #424]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	4a69      	ldr	r2, [pc, #420]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 800735a:	f043 0304 	orr.w	r3, r3, #4
 800735e:	6213      	str	r3, [r2, #32]
 8007360:	4b67      	ldr	r3, [pc, #412]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	4a66      	ldr	r2, [pc, #408]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	6213      	str	r3, [r2, #32]
 800736c:	e00b      	b.n	8007386 <HAL_RCC_OscConfig+0x36e>
 800736e:	4b64      	ldr	r3, [pc, #400]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	4a63      	ldr	r2, [pc, #396]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	6213      	str	r3, [r2, #32]
 800737a:	4b61      	ldr	r3, [pc, #388]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	4a60      	ldr	r2, [pc, #384]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007380:	f023 0304 	bic.w	r3, r3, #4
 8007384:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d015      	beq.n	80073ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800738e:	f7fc fd09 	bl	8003da4 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007394:	e00a      	b.n	80073ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007396:	f7fc fd05 	bl	8003da4 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e143      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ac:	4b54      	ldr	r3, [pc, #336]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0ee      	beq.n	8007396 <HAL_RCC_OscConfig+0x37e>
 80073b8:	e014      	b.n	80073e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073ba:	f7fc fcf3 	bl	8003da4 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073c0:	e00a      	b.n	80073d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c2:	f7fc fcef 	bl	8003da4 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e12d      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073d8:	4b49      	ldr	r3, [pc, #292]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1ee      	bne.n	80073c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d105      	bne.n	80073f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073ea:	4b45      	ldr	r3, [pc, #276]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	4a44      	ldr	r2, [pc, #272]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80073f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073f4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 808c 	beq.w	8007518 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007400:	4b3f      	ldr	r3, [pc, #252]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740c:	d10e      	bne.n	800742c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800740e:	4b3c      	ldr	r3, [pc, #240]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007416:	2b08      	cmp	r3, #8
 8007418:	d108      	bne.n	800742c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800741a:	4b39      	ldr	r3, [pc, #228]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007426:	d101      	bne.n	800742c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e103      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	2b02      	cmp	r3, #2
 8007432:	d14e      	bne.n	80074d2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007434:	4b32      	ldr	r3, [pc, #200]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007440:	4b2f      	ldr	r3, [pc, #188]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e0ef      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007454:	4b2c      	ldr	r3, [pc, #176]	; (8007508 <HAL_RCC_OscConfig+0x4f0>)
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800745a:	f7fc fca3 	bl	8003da4 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007460:	e008      	b.n	8007474 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007462:	f7fc fc9f 	bl	8003da4 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b64      	cmp	r3, #100	; 0x64
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e0df      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007474:	4b22      	ldr	r3, [pc, #136]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f0      	bne.n	8007462 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8007480:	4b1f      	ldr	r3, [pc, #124]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748c:	491c      	ldr	r1, [pc, #112]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 800748e:	4313      	orrs	r3, r2
 8007490:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8007492:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	4918      	ldr	r1, [pc, #96]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80074a4:	4b18      	ldr	r3, [pc, #96]	; (8007508 <HAL_RCC_OscConfig+0x4f0>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074aa:	f7fc fc7b 	bl	8003da4 <HAL_GetTick>
 80074ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074b2:	f7fc fc77 	bl	8003da4 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b64      	cmp	r3, #100	; 0x64
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e0b7      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80074c4:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0f0      	beq.n	80074b2 <HAL_RCC_OscConfig+0x49a>
 80074d0:	e022      	b.n	8007518 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	4a0a      	ldr	r2, [pc, #40]	; (8007500 <HAL_RCC_OscConfig+0x4e8>)
 80074d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80074de:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <HAL_RCC_OscConfig+0x4f0>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e4:	f7fc fc5e 	bl	8003da4 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80074ea:	e00f      	b.n	800750c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074ec:	f7fc fc5a 	bl	8003da4 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b64      	cmp	r3, #100	; 0x64
 80074f8:	d908      	bls.n	800750c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e09a      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
 80074fe:	bf00      	nop
 8007500:	40021000 	.word	0x40021000
 8007504:	40007000 	.word	0x40007000
 8007508:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800750c:	4b4b      	ldr	r3, [pc, #300]	; (800763c <HAL_RCC_OscConfig+0x624>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e9      	bne.n	80074ec <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8088 	beq.w	8007632 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007522:	4b46      	ldr	r3, [pc, #280]	; (800763c <HAL_RCC_OscConfig+0x624>)
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f003 030c 	and.w	r3, r3, #12
 800752a:	2b08      	cmp	r3, #8
 800752c:	d068      	beq.n	8007600 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d14d      	bne.n	80075d2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007536:	4b42      	ldr	r3, [pc, #264]	; (8007640 <HAL_RCC_OscConfig+0x628>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800753c:	f7fc fc32 	bl	8003da4 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007544:	f7fc fc2e 	bl	8003da4 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e06e      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007556:	4b39      	ldr	r3, [pc, #228]	; (800763c <HAL_RCC_OscConfig+0x624>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f0      	bne.n	8007544 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756a:	d10f      	bne.n	800758c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800756c:	4b33      	ldr	r3, [pc, #204]	; (800763c <HAL_RCC_OscConfig+0x624>)
 800756e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4931      	ldr	r1, [pc, #196]	; (800763c <HAL_RCC_OscConfig+0x624>)
 8007576:	4313      	orrs	r3, r2
 8007578:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800757a:	4b30      	ldr	r3, [pc, #192]	; (800763c <HAL_RCC_OscConfig+0x624>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	f023 020f 	bic.w	r2, r3, #15
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	492d      	ldr	r1, [pc, #180]	; (800763c <HAL_RCC_OscConfig+0x624>)
 8007588:	4313      	orrs	r3, r2
 800758a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800758c:	4b2b      	ldr	r3, [pc, #172]	; (800763c <HAL_RCC_OscConfig+0x624>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759c:	430b      	orrs	r3, r1
 800759e:	4927      	ldr	r1, [pc, #156]	; (800763c <HAL_RCC_OscConfig+0x624>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075a4:	4b26      	ldr	r3, [pc, #152]	; (8007640 <HAL_RCC_OscConfig+0x628>)
 80075a6:	2201      	movs	r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075aa:	f7fc fbfb 	bl	8003da4 <HAL_GetTick>
 80075ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075b0:	e008      	b.n	80075c4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b2:	f7fc fbf7 	bl	8003da4 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e037      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075c4:	4b1d      	ldr	r3, [pc, #116]	; (800763c <HAL_RCC_OscConfig+0x624>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f0      	beq.n	80075b2 <HAL_RCC_OscConfig+0x59a>
 80075d0:	e02f      	b.n	8007632 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d2:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <HAL_RCC_OscConfig+0x628>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d8:	f7fc fbe4 	bl	8003da4 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075e0:	f7fc fbe0 	bl	8003da4 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e020      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <HAL_RCC_OscConfig+0x624>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f0      	bne.n	80075e0 <HAL_RCC_OscConfig+0x5c8>
 80075fe:	e018      	b.n	8007632 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e013      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <HAL_RCC_OscConfig+0x624>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	429a      	cmp	r2, r3
 800761e:	d106      	bne.n	800762e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800762a:	429a      	cmp	r2, r3
 800762c:	d001      	beq.n	8007632 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40021000 	.word	0x40021000
 8007640:	42420060 	.word	0x42420060

08007644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e0d0      	b.n	80077fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007658:	4b6a      	ldr	r3, [pc, #424]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d910      	bls.n	8007688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007666:	4b67      	ldr	r3, [pc, #412]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 0207 	bic.w	r2, r3, #7
 800766e:	4965      	ldr	r1, [pc, #404]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	4313      	orrs	r3, r2
 8007674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007676:	4b63      	ldr	r3, [pc, #396]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d001      	beq.n	8007688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e0b8      	b.n	80077fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d020      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a0:	4b59      	ldr	r3, [pc, #356]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	4a58      	ldr	r2, [pc, #352]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80076a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80076aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076b8:	4b53      	ldr	r3, [pc, #332]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4a52      	ldr	r2, [pc, #328]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80076be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80076c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076c4:	4b50      	ldr	r3, [pc, #320]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	494d      	ldr	r1, [pc, #308]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d040      	beq.n	8007764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d107      	bne.n	80076fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ea:	4b47      	ldr	r3, [pc, #284]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d115      	bne.n	8007722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e07f      	b.n	80077fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d107      	bne.n	8007712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007702:	4b41      	ldr	r3, [pc, #260]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d109      	bne.n	8007722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e073      	b.n	80077fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007712:	4b3d      	ldr	r3, [pc, #244]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e06b      	b.n	80077fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007722:	4b39      	ldr	r3, [pc, #228]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f023 0203 	bic.w	r2, r3, #3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	4936      	ldr	r1, [pc, #216]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007730:	4313      	orrs	r3, r2
 8007732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007734:	f7fc fb36 	bl	8003da4 <HAL_GetTick>
 8007738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773a:	e00a      	b.n	8007752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800773c:	f7fc fb32 	bl	8003da4 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	f241 3288 	movw	r2, #5000	; 0x1388
 800774a:	4293      	cmp	r3, r2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e053      	b.n	80077fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007752:	4b2d      	ldr	r3, [pc, #180]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f003 020c 	and.w	r2, r3, #12
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	429a      	cmp	r2, r3
 8007762:	d1eb      	bne.n	800773c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007764:	4b27      	ldr	r3, [pc, #156]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d210      	bcs.n	8007794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 0207 	bic.w	r2, r3, #7
 800777a:	4922      	ldr	r1, [pc, #136]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	4313      	orrs	r3, r2
 8007780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007782:	4b20      	ldr	r3, [pc, #128]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d001      	beq.n	8007794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e032      	b.n	80077fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a0:	4b19      	ldr	r3, [pc, #100]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	4916      	ldr	r1, [pc, #88]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077be:	4b12      	ldr	r3, [pc, #72]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	490e      	ldr	r1, [pc, #56]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077d2:	f000 f821 	bl	8007818 <HAL_RCC_GetSysClockFreq>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	091b      	lsrs	r3, r3, #4
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	490a      	ldr	r1, [pc, #40]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80077e4:	5ccb      	ldrb	r3, [r1, r3]
 80077e6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ea:	4a09      	ldr	r2, [pc, #36]	; (8007810 <HAL_RCC_ClockConfig+0x1cc>)
 80077ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <HAL_RCC_ClockConfig+0x1d0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fc fa94 	bl	8003d20 <HAL_InitTick>

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40022000 	.word	0x40022000
 8007808:	40021000 	.word	0x40021000
 800780c:	08009388 	.word	0x08009388
 8007810:	2000000c 	.word	0x2000000c
 8007814:	200000d4 	.word	0x200000d4

08007818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800781a:	b091      	sub	sp, #68	; 0x44
 800781c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800781e:	4b56      	ldr	r3, [pc, #344]	; (8007978 <HAL_RCC_GetSysClockFreq+0x160>)
 8007820:	f107 0414 	add.w	r4, r7, #20
 8007824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007826:	c407      	stmia	r4!, {r0, r1, r2}
 8007828:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800782a:	4b54      	ldr	r3, [pc, #336]	; (800797c <HAL_RCC_GetSysClockFreq+0x164>)
 800782c:	1d3c      	adds	r4, r7, #4
 800782e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	637b      	str	r3, [r7, #52]	; 0x34
 8007838:	2300      	movs	r3, #0
 800783a:	633b      	str	r3, [r7, #48]	; 0x30
 800783c:	2300      	movs	r3, #0
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007840:	2300      	movs	r3, #0
 8007842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	62bb      	str	r3, [r7, #40]	; 0x28
 800784c:	2300      	movs	r3, #0
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007850:	4b4b      	ldr	r3, [pc, #300]	; (8007980 <HAL_RCC_GetSysClockFreq+0x168>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007858:	f003 030c 	and.w	r3, r3, #12
 800785c:	2b04      	cmp	r3, #4
 800785e:	d002      	beq.n	8007866 <HAL_RCC_GetSysClockFreq+0x4e>
 8007860:	2b08      	cmp	r3, #8
 8007862:	d003      	beq.n	800786c <HAL_RCC_GetSysClockFreq+0x54>
 8007864:	e080      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007866:	4b47      	ldr	r3, [pc, #284]	; (8007984 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800786a:	e080      	b.n	800796e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800786c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786e:	0c9b      	lsrs	r3, r3, #18
 8007870:	f003 030f 	and.w	r3, r3, #15
 8007874:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007878:	4413      	add	r3, r2
 800787a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d066      	beq.n	8007958 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800788a:	4b3d      	ldr	r3, [pc, #244]	; (8007980 <HAL_RCC_GetSysClockFreq+0x168>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007896:	4413      	add	r3, r2
 8007898:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800789c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800789e:	4b38      	ldr	r3, [pc, #224]	; (8007980 <HAL_RCC_GetSysClockFreq+0x168>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d044      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80078aa:	4b35      	ldr	r3, [pc, #212]	; (8007980 <HAL_RCC_GetSysClockFreq+0x168>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	3301      	adds	r3, #1
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80078b8:	4b31      	ldr	r3, [pc, #196]	; (8007980 <HAL_RCC_GetSysClockFreq+0x168>)
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	0a1b      	lsrs	r3, r3, #8
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	3302      	adds	r3, #2
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	4618      	mov	r0, r3
 80078ca:	f04f 0100 	mov.w	r1, #0
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	461a      	mov	r2, r3
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	fb02 f501 	mul.w	r5, r2, r1
 80078da:	fb00 f403 	mul.w	r4, r0, r3
 80078de:	442c      	add	r4, r5
 80078e0:	fba0 2302 	umull	r2, r3, r0, r2
 80078e4:	18e1      	adds	r1, r4, r3
 80078e6:	460b      	mov	r3, r1
 80078e8:	4926      	ldr	r1, [pc, #152]	; (8007984 <HAL_RCC_GetSysClockFreq+0x16c>)
 80078ea:	fb01 f003 	mul.w	r0, r1, r3
 80078ee:	2100      	movs	r1, #0
 80078f0:	fb01 f102 	mul.w	r1, r1, r2
 80078f4:	4401      	add	r1, r0
 80078f6:	4823      	ldr	r0, [pc, #140]	; (8007984 <HAL_RCC_GetSysClockFreq+0x16c>)
 80078f8:	fba2 4500 	umull	r4, r5, r2, r0
 80078fc:	194b      	adds	r3, r1, r5
 80078fe:	461d      	mov	r5, r3
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	4618      	mov	r0, r3
 8007904:	f04f 0100 	mov.w	r1, #0
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	461a      	mov	r2, r3
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	fb02 fc01 	mul.w	ip, r2, r1
 8007914:	fb00 f603 	mul.w	r6, r0, r3
 8007918:	4466      	add	r6, ip
 800791a:	fba0 2302 	umull	r2, r3, r0, r2
 800791e:	18f1      	adds	r1, r6, r3
 8007920:	460b      	mov	r3, r1
 8007922:	4620      	mov	r0, r4
 8007924:	4629      	mov	r1, r5
 8007926:	f7f8 fc7d 	bl	8000224 <__aeabi_uldivmod>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4613      	mov	r3, r2
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007932:	e007      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	4a13      	ldr	r2, [pc, #76]	; (8007984 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007938:	fb02 f203 	mul.w	r2, r2, r3
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8007944:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007948:	461a      	mov	r2, r3
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	4293      	cmp	r3, r2
 800794e:	d108      	bne.n	8007962 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8007950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007956:	e004      	b.n	8007962 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	4a0b      	ldr	r2, [pc, #44]	; (8007988 <HAL_RCC_GetSysClockFreq+0x170>)
 800795c:	fb02 f303 	mul.w	r3, r2, r3
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8007962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007964:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007966:	e002      	b.n	800796e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007968:	4b08      	ldr	r3, [pc, #32]	; (800798c <HAL_RCC_GetSysClockFreq+0x174>)
 800796a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800796c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007970:	4618      	mov	r0, r3
 8007972:	3744      	adds	r7, #68	; 0x44
 8007974:	46bd      	mov	sp, r7
 8007976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007978:	08009368 	.word	0x08009368
 800797c:	08009378 	.word	0x08009378
 8007980:	40021000 	.word	0x40021000
 8007984:	017d7840 	.word	0x017d7840
 8007988:	003d0900 	.word	0x003d0900
 800798c:	007a1200 	.word	0x007a1200

08007990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007994:	4b02      	ldr	r3, [pc, #8]	; (80079a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007996:	681b      	ldr	r3, [r3, #0]
}
 8007998:	4618      	mov	r0, r3
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr
 80079a0:	2000000c 	.word	0x2000000c

080079a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079a8:	f7ff fff2 	bl	8007990 <HAL_RCC_GetHCLKFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	4903      	ldr	r1, [pc, #12]	; (80079c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ba:	5ccb      	ldrb	r3, [r1, r3]
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40021000 	.word	0x40021000
 80079c8:	08009398 	.word	0x08009398

080079cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <RCC_Delay+0x34>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a0a      	ldr	r2, [pc, #40]	; (8007a04 <RCC_Delay+0x38>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	0a5b      	lsrs	r3, r3, #9
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
 80079e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80079e8:	bf00      	nop
  }
  while (Delay --);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1e5a      	subs	r2, r3, #1
 80079ee:	60fa      	str	r2, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f9      	bne.n	80079e8 <RCC_Delay+0x1c>
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr
 8007a00:	2000000c 	.word	0x2000000c
 8007a04:	10624dd3 	.word	0x10624dd3

08007a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d07d      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a2c:	4b8b      	ldr	r3, [pc, #556]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10d      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a38:	4b88      	ldr	r3, [pc, #544]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	4a87      	ldr	r2, [pc, #540]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a42:	61d3      	str	r3, [r2, #28]
 8007a44:	4b85      	ldr	r3, [pc, #532]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007a50:	2301      	movs	r3, #1
 8007a52:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a54:	4b82      	ldr	r3, [pc, #520]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d118      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a60:	4b7f      	ldr	r3, [pc, #508]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a7e      	ldr	r2, [pc, #504]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a6c:	f7fc f99a 	bl	8003da4 <HAL_GetTick>
 8007a70:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a72:	e008      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a74:	f7fc f996 	bl	8003da4 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b64      	cmp	r3, #100	; 0x64
 8007a80:	d901      	bls.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e0e5      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a86:	4b76      	ldr	r3, [pc, #472]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f0      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a92:	4b72      	ldr	r3, [pc, #456]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a9a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d02e      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d027      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ab0:	4b6a      	ldr	r3, [pc, #424]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aba:	4b6a      	ldr	r3, [pc, #424]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007abc:	2201      	movs	r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ac0:	4b68      	ldr	r3, [pc, #416]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007ac6:	4a65      	ldr	r2, [pc, #404]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d014      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad6:	f7fc f965 	bl	8003da4 <HAL_GetTick>
 8007ada:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007adc:	e00a      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ade:	f7fc f961 	bl	8003da4 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d901      	bls.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e0ae      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007af4:	4b59      	ldr	r3, [pc, #356]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0ee      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b00:	4b56      	ldr	r3, [pc, #344]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4953      	ldr	r1, [pc, #332]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007b12:	7efb      	ldrb	r3, [r7, #27]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d105      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b18:	4b50      	ldr	r3, [pc, #320]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	4a4f      	ldr	r2, [pc, #316]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d008      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b30:	4b4a      	ldr	r3, [pc, #296]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	4947      	ldr	r1, [pc, #284]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d008      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007b4e:	4b43      	ldr	r3, [pc, #268]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	4940      	ldr	r1, [pc, #256]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8007b6c:	4b3b      	ldr	r3, [pc, #236]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	4938      	ldr	r1, [pc, #224]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8007b7e:	4b37      	ldr	r3, [pc, #220]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d105      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8007b8a:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8007b96:	2301      	movs	r3, #1
 8007b98:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d148      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8007ba0:	4b2e      	ldr	r3, [pc, #184]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d138      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8007bac:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d009      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8007bb8:	4b28      	ldr	r3, [pc, #160]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d001      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e042      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8007bcc:	4b23      	ldr	r3, [pc, #140]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	4920      	ldr	r1, [pc, #128]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8007bde:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	491c      	ldr	r1, [pc, #112]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8007bf0:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf6:	f7fc f8d5 	bl	8003da4 <HAL_GetTick>
 8007bfa:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bfc:	e008      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007bfe:	f7fc f8d1 	bl	8003da4 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b64      	cmp	r3, #100	; 0x64
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e020      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c10:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0f0      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007c1c:	e009      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8007c1e:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d001      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e00f      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	4904      	ldr	r1, [pc, #16]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	40007000 	.word	0x40007000
 8007c64:	42420440 	.word	0x42420440
 8007c68:	42420070 	.word	0x42420070

08007c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e076      	b.n	8007d6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d108      	bne.n	8007c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c8e:	d009      	beq.n	8007ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	61da      	str	r2, [r3, #28]
 8007c96:	e005      	b.n	8007ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f880 	bl	8007dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d28:	ea42 0103 	orr.w	r1, r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	0c1a      	lsrs	r2, r3, #16
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f002 0204 	and.w	r2, r2, #4
 8007d4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	69da      	ldr	r2, [r3, #28]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e01a      	b.n	8007dbc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f819 	bl	8007dd6 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08c      	sub	sp, #48	; 0x30
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007df6:	2301      	movs	r3, #1
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <HAL_SPI_TransmitReceive+0x26>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e18a      	b.n	8008124 <HAL_SPI_TransmitReceive+0x33c>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e16:	f7fb ffc5 	bl	8003da4 <HAL_GetTick>
 8007e1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e2c:	887b      	ldrh	r3, [r7, #2]
 8007e2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d00f      	beq.n	8007e58 <HAL_SPI_TransmitReceive+0x70>
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e3e:	d107      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d103      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x68>
 8007e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d003      	beq.n	8007e58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e50:	2302      	movs	r3, #2
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e56:	e15b      	b.n	8008110 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_SPI_TransmitReceive+0x82>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_SPI_TransmitReceive+0x82>
 8007e64:	887b      	ldrh	r3, [r7, #2]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e70:	e14e      	b.n	8008110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d003      	beq.n	8007e86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2205      	movs	r2, #5
 8007e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	887a      	ldrh	r2, [r7, #2]
 8007e96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	887a      	ldrh	r2, [r7, #2]
 8007e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	887a      	ldrh	r2, [r7, #2]
 8007ea8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	887a      	ldrh	r2, [r7, #2]
 8007eae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec6:	2b40      	cmp	r3, #64	; 0x40
 8007ec8:	d007      	beq.n	8007eda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ed8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee2:	d178      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <HAL_SPI_TransmitReceive+0x10a>
 8007eec:	8b7b      	ldrh	r3, [r7, #26]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d166      	bne.n	8007fc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	881a      	ldrh	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f02:	1c9a      	adds	r2, r3, #2
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f16:	e053      	b.n	8007fc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d11b      	bne.n	8007f5e <HAL_SPI_TransmitReceive+0x176>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d016      	beq.n	8007f5e <HAL_SPI_TransmitReceive+0x176>
 8007f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d113      	bne.n	8007f5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	881a      	ldrh	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	1c9a      	adds	r2, r3, #2
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d119      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x1b8>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d014      	beq.n	8007fa0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	b292      	uxth	r2, r2
 8007f82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	1c9a      	adds	r2, r3, #2
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007fa0:	f7fb ff00 	bl	8003da4 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d807      	bhi.n	8007fc0 <HAL_SPI_TransmitReceive+0x1d8>
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb6:	d003      	beq.n	8007fc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fbe:	e0a7      	b.n	8008110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1a6      	bne.n	8007f18 <HAL_SPI_TransmitReceive+0x130>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1a1      	bne.n	8007f18 <HAL_SPI_TransmitReceive+0x130>
 8007fd4:	e07c      	b.n	80080d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <HAL_SPI_TransmitReceive+0x1fc>
 8007fde:	8b7b      	ldrh	r3, [r7, #26]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d16b      	bne.n	80080bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	330c      	adds	r3, #12
 8007fee:	7812      	ldrb	r2, [r2, #0]
 8007ff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800800a:	e057      	b.n	80080bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b02      	cmp	r3, #2
 8008018:	d11c      	bne.n	8008054 <HAL_SPI_TransmitReceive+0x26c>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800801e:	b29b      	uxth	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	d017      	beq.n	8008054 <HAL_SPI_TransmitReceive+0x26c>
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	2b01      	cmp	r3, #1
 8008028:	d114      	bne.n	8008054 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	330c      	adds	r3, #12
 8008034:	7812      	ldrb	r2, [r2, #0]
 8008036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b01      	cmp	r3, #1
 8008060:	d119      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x2ae>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d014      	beq.n	8008096 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008092:	2301      	movs	r3, #1
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008096:	f7fb fe85 	bl	8003da4 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d803      	bhi.n	80080ae <HAL_SPI_TransmitReceive+0x2c6>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d102      	bne.n	80080b4 <HAL_SPI_TransmitReceive+0x2cc>
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d103      	bne.n	80080bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080ba:	e029      	b.n	8008110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1a2      	bne.n	800800c <HAL_SPI_TransmitReceive+0x224>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d19d      	bne.n	800800c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f8b1 	bl	800823c <SPI_EndRxTxTransaction>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d006      	beq.n	80080ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2220      	movs	r2, #32
 80080ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80080ec:	e010      	b.n	8008110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	617b      	str	r3, [r7, #20]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	e000      	b.n	8008110 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800810e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008124:	4618      	mov	r0, r3
 8008126:	3730      	adds	r7, #48	; 0x30
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800813c:	f7fb fe32 	bl	8003da4 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4413      	add	r3, r2
 800814a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800814c:	f7fb fe2a 	bl	8003da4 <HAL_GetTick>
 8008150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008152:	4b39      	ldr	r3, [pc, #228]	; (8008238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	015b      	lsls	r3, r3, #5
 8008158:	0d1b      	lsrs	r3, r3, #20
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	fb02 f303 	mul.w	r3, r2, r3
 8008160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008162:	e054      	b.n	800820e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d050      	beq.n	800820e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800816c:	f7fb fe1a 	bl	8003da4 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	429a      	cmp	r2, r3
 800817a:	d902      	bls.n	8008182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d13d      	bne.n	80081fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800819a:	d111      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a4:	d004      	beq.n	80081b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ae:	d107      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c8:	d10f      	bne.n	80081ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e017      	b.n	800822e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	3b01      	subs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4013      	ands	r3, r2
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	429a      	cmp	r2, r3
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	429a      	cmp	r2, r3
 800822a:	d19b      	bne.n	8008164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	2000000c 	.word	0x2000000c

0800823c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af02      	add	r7, sp, #8
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2200      	movs	r2, #0
 8008250:	2180      	movs	r1, #128	; 0x80
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff ff6a 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008262:	f043 0220 	orr.w	r2, r3, #32
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e000      	b.n	8008270 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f043 0201 	orr.w	r2, r3, #1
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr

08008298 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f023 0201 	bic.w	r2, r3, #1
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr

080082b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	019b      	lsls	r3, r3, #6
 80082ca:	f043 0220 	orr.w	r2, r3, #32
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3301      	adds	r3, #1
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4a08      	ldr	r2, [pc, #32]	; (80082fc <USB_FlushTxFifo+0x44>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d901      	bls.n	80082e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e006      	b.n	80082f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d0f0      	beq.n	80082d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr
 80082fc:	00030d40 	.word	0x00030d40

08008300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2210      	movs	r2, #16
 8008310:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4a08      	ldr	r2, [pc, #32]	; (800833c <USB_FlushRxFifo+0x3c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d901      	bls.n	8008324 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e006      	b.n	8008332 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f003 0310 	and.w	r3, r3, #16
 800832c:	2b10      	cmp	r3, #16
 800832e:	d0f0      	beq.n	8008312 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr
 800833c:	00030d40 	.word	0x00030d40

08008340 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008340:	b480      	push	{r7}
 8008342:	b089      	sub	sp, #36	; 0x24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008356:	88fb      	ldrh	r3, [r7, #6]
 8008358:	3303      	adds	r3, #3
 800835a:	089b      	lsrs	r3, r3, #2
 800835c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800835e:	2300      	movs	r3, #0
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	e00b      	b.n	800837c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	3304      	adds	r3, #4
 8008374:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	3301      	adds	r3, #1
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	429a      	cmp	r2, r3
 8008382:	d3ef      	bcc.n	8008364 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008384:	69fb      	ldr	r3, [r7, #28]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3724      	adds	r7, #36	; 0x24
 800838a:	46bd      	mov	sp, r7
 800838c:	bc80      	pop	{r7}
 800838e:	4770      	bx	lr

08008390 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4013      	ands	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083a8:	68fb      	ldr	r3, [r7, #12]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bc80      	pop	{r7}
 80083b2:	4770      	bx	lr

080083b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f003 0301 	and.w	r3, r3, #1
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr

080083ce <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b085      	sub	sp, #20
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	460b      	mov	r3, r1
 80083d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083ec:	f023 0303 	bic.w	r3, r3, #3
 80083f0:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	68f9      	ldr	r1, [r7, #12]
 8008402:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008406:	4313      	orrs	r3, r2
 8008408:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d107      	bne.n	8008420 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008416:	461a      	mov	r2, r3
 8008418:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800841c:	6053      	str	r3, [r2, #4]
 800841e:	e009      	b.n	8008434 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d106      	bne.n	8008434 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800842c:	461a      	mov	r2, r3
 800842e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008432:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	bc80      	pop	{r7}
 800843e:	4770      	bx	lr

08008440 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	b29b      	uxth	r3, r3
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	4413      	add	r3, r2
 8008480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	0c9b      	lsrs	r3, r3, #18
 8008488:	f003 0303 	and.w	r3, r3, #3
 800848c:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <USB_HC_Halt+0x3a>
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d16c      	bne.n	8008574 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084b8:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d143      	bne.n	800854e <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008504:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	440a      	add	r2, r1
 800851c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008524:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	3301      	adds	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008532:	d81d      	bhi.n	8008570 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800854a:	d0ec      	beq.n	8008526 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800854c:	e080      	b.n	8008650 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	4413      	add	r3, r2
 8008556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	440a      	add	r2, r1
 8008564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800856c:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800856e:	e06f      	b.n	8008650 <USB_HC_Halt+0x1f0>
          break;
 8008570:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008572:	e06d      	b.n	8008650 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	4413      	add	r3, r2
 800857c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	0151      	lsls	r1, r2, #5
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	440a      	add	r2, r1
 800858a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800858e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008592:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d143      	bne.n	800862c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	0151      	lsls	r1, r2, #5
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	440a      	add	r2, r1
 80085da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	0151      	lsls	r1, r2, #5
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	440a      	add	r2, r1
 80085fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008602:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	3301      	adds	r3, #1
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008610:	d81d      	bhi.n	800864e <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	4413      	add	r3, r2
 800861a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008628:	d0ec      	beq.n	8008604 <USB_HC_Halt+0x1a4>
 800862a:	e011      	b.n	8008650 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4413      	add	r3, r2
 8008634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	440a      	add	r2, r1
 8008642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	e000      	b.n	8008650 <USB_HC_Halt+0x1f0>
          break;
 800864e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff fe13 	bl	8008298 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008672:	2110      	movs	r1, #16
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff fe1f 	bl	80082b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7ff fe40 	bl	8008300 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008680:	2300      	movs	r3, #0
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	e01f      	b.n	80086c6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800869c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ba:	461a      	mov	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	3301      	adds	r3, #1
 80086c4:	613b      	str	r3, [r7, #16]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b0f      	cmp	r3, #15
 80086ca:	d9dc      	bls.n	8008686 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	e034      	b.n	800873c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008706:	461a      	mov	r2, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	3301      	adds	r3, #1
 8008710:	617b      	str	r3, [r7, #20]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008718:	d80c      	bhi.n	8008734 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4413      	add	r3, r2
 8008722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800872c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008730:	d0ec      	beq.n	800870c <USB_StopHost+0xb0>
 8008732:	e000      	b.n	8008736 <USB_StopHost+0xda>
        break;
 8008734:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b0f      	cmp	r3, #15
 8008740:	d9c7      	bls.n	80086d2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008748:	461a      	mov	r2, r3
 800874a:	f04f 33ff 	mov.w	r3, #4294967295
 800874e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f04f 32ff 	mov.w	r2, #4294967295
 8008756:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff fd8d 	bl	8008278 <USB_EnableGlobalInt>

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f804 	bl	800878c <USBH_HandleSof>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b0b      	cmp	r3, #11
 800879c:	d10a      	bne.n	80087b4 <USBH_HandleSof+0x28>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	4798      	blx	r3
  }
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80087cc:	bf00      	nop
}
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr

080087d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 80087e6:	bf00      	nop
}
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr

080087f0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	bc80      	pop	{r7}
 800881a:	4770      	bx	lr

0800881c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f87f 	bl	8008940 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	791b      	ldrb	r3, [r3, #4]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f80b 	bl	8008864 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	795b      	ldrb	r3, [r3, #5]
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f805 	bl	8008864 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	2b0a      	cmp	r3, #10
 8008874:	d80b      	bhi.n	800888e <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	32e0      	adds	r2, #224	; 0xe0
 800887c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	32e0      	adds	r2, #224	; 0xe0
 800888a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr

0800889a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff ff5d 	bl	8008768 <USBH_LL_IncTimer>
}
 80088ae:	bf00      	nop
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff ff93 	bl	80087f0 <USBH_LL_Connect>
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff ff9b 	bl	800881c <USBH_LL_Disconnect>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
 80088fa:	4613      	mov	r3, r2
 80088fc:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008916:	4618      	mov	r0, r3
 8008918:	f7ff ff50 	bl	80087bc <USBH_LL_PortEnabled>
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008932:	4618      	mov	r0, r3
 8008934:	f7ff ff4f 	bl	80087d6 <USBH_LL_PortDisabled>
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008956:	4618      	mov	r0, r3
 8008958:	f7fc fa68 	bl	8004e2c <HAL_HCD_Stop>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f808 	bl	8008978 <USBH_Get_USB_Status>
 8008968:	4603      	mov	r3, r0
 800896a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896c:	7bbb      	ldrb	r3, [r7, #14]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	2b03      	cmp	r3, #3
 800898a:	d817      	bhi.n	80089bc <USBH_Get_USB_Status+0x44>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <USBH_Get_USB_Status+0x1c>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089a5 	.word	0x080089a5
 8008998:	080089ab 	.word	0x080089ab
 800899c:	080089b1 	.word	0x080089b1
 80089a0:	080089b7 	.word	0x080089b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
    break;
 80089a8:	e00b      	b.n	80089c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80089aa:	2302      	movs	r3, #2
 80089ac:	73fb      	strb	r3, [r7, #15]
    break;
 80089ae:	e008      	b.n	80089c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80089b0:	2301      	movs	r3, #1
 80089b2:	73fb      	strb	r3, [r7, #15]
    break;
 80089b4:	e005      	b.n	80089c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80089b6:	2302      	movs	r3, #2
 80089b8:	73fb      	strb	r3, [r7, #15]
    break;
 80089ba:	e002      	b.n	80089c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089bc:	2302      	movs	r3, #2
 80089be:	73fb      	strb	r3, [r7, #15]
    break;
 80089c0:	bf00      	nop
  }
  return usb_status;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop

080089d0 <__errno>:
 80089d0:	4b01      	ldr	r3, [pc, #4]	; (80089d8 <__errno+0x8>)
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	200000dc 	.word	0x200000dc

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	2600      	movs	r6, #0
 80089e0:	4d0c      	ldr	r5, [pc, #48]	; (8008a14 <__libc_init_array+0x38>)
 80089e2:	4c0d      	ldr	r4, [pc, #52]	; (8008a18 <__libc_init_array+0x3c>)
 80089e4:	1b64      	subs	r4, r4, r5
 80089e6:	10a4      	asrs	r4, r4, #2
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	f000 fc5c 	bl	80092a8 <_init>
 80089f0:	2600      	movs	r6, #0
 80089f2:	4d0a      	ldr	r5, [pc, #40]	; (8008a1c <__libc_init_array+0x40>)
 80089f4:	4c0a      	ldr	r4, [pc, #40]	; (8008a20 <__libc_init_array+0x44>)
 80089f6:	1b64      	subs	r4, r4, r5
 80089f8:	10a4      	asrs	r4, r4, #2
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	4798      	blx	r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	4798      	blx	r3
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	0800b370 	.word	0x0800b370
 8008a18:	0800b370 	.word	0x0800b370
 8008a1c:	0800b370 	.word	0x0800b370
 8008a20:	0800b374 	.word	0x0800b374

08008a24 <memset>:
 8008a24:	4603      	mov	r3, r0
 8008a26:	4402      	add	r2, r0
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d100      	bne.n	8008a2e <memset+0xa>
 8008a2c:	4770      	bx	lr
 8008a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a32:	e7f9      	b.n	8008a28 <memset+0x4>

08008a34 <_free_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4605      	mov	r5, r0
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	d043      	beq.n	8008ac4 <_free_r+0x90>
 8008a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a40:	1f0c      	subs	r4, r1, #4
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bfb8      	it	lt
 8008a46:	18e4      	addlt	r4, r4, r3
 8008a48:	f000 f8cc 	bl	8008be4 <__malloc_lock>
 8008a4c:	4a1e      	ldr	r2, [pc, #120]	; (8008ac8 <_free_r+0x94>)
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	4610      	mov	r0, r2
 8008a52:	b933      	cbnz	r3, 8008a62 <_free_r+0x2e>
 8008a54:	6063      	str	r3, [r4, #4]
 8008a56:	6014      	str	r4, [r2, #0]
 8008a58:	4628      	mov	r0, r5
 8008a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a5e:	f000 b8c7 	b.w	8008bf0 <__malloc_unlock>
 8008a62:	42a3      	cmp	r3, r4
 8008a64:	d90a      	bls.n	8008a7c <_free_r+0x48>
 8008a66:	6821      	ldr	r1, [r4, #0]
 8008a68:	1862      	adds	r2, r4, r1
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	bf01      	itttt	eq
 8008a6e:	681a      	ldreq	r2, [r3, #0]
 8008a70:	685b      	ldreq	r3, [r3, #4]
 8008a72:	1852      	addeq	r2, r2, r1
 8008a74:	6022      	streq	r2, [r4, #0]
 8008a76:	6063      	str	r3, [r4, #4]
 8008a78:	6004      	str	r4, [r0, #0]
 8008a7a:	e7ed      	b.n	8008a58 <_free_r+0x24>
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	b10b      	cbz	r3, 8008a86 <_free_r+0x52>
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	d9fa      	bls.n	8008a7c <_free_r+0x48>
 8008a86:	6811      	ldr	r1, [r2, #0]
 8008a88:	1850      	adds	r0, r2, r1
 8008a8a:	42a0      	cmp	r0, r4
 8008a8c:	d10b      	bne.n	8008aa6 <_free_r+0x72>
 8008a8e:	6820      	ldr	r0, [r4, #0]
 8008a90:	4401      	add	r1, r0
 8008a92:	1850      	adds	r0, r2, r1
 8008a94:	4283      	cmp	r3, r0
 8008a96:	6011      	str	r1, [r2, #0]
 8008a98:	d1de      	bne.n	8008a58 <_free_r+0x24>
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	4401      	add	r1, r0
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	6053      	str	r3, [r2, #4]
 8008aa4:	e7d8      	b.n	8008a58 <_free_r+0x24>
 8008aa6:	d902      	bls.n	8008aae <_free_r+0x7a>
 8008aa8:	230c      	movs	r3, #12
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	e7d4      	b.n	8008a58 <_free_r+0x24>
 8008aae:	6820      	ldr	r0, [r4, #0]
 8008ab0:	1821      	adds	r1, r4, r0
 8008ab2:	428b      	cmp	r3, r1
 8008ab4:	bf01      	itttt	eq
 8008ab6:	6819      	ldreq	r1, [r3, #0]
 8008ab8:	685b      	ldreq	r3, [r3, #4]
 8008aba:	1809      	addeq	r1, r1, r0
 8008abc:	6021      	streq	r1, [r4, #0]
 8008abe:	6063      	str	r3, [r4, #4]
 8008ac0:	6054      	str	r4, [r2, #4]
 8008ac2:	e7c9      	b.n	8008a58 <_free_r+0x24>
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20000b04 	.word	0x20000b04

08008acc <_malloc_r>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	1ccd      	adds	r5, r1, #3
 8008ad0:	f025 0503 	bic.w	r5, r5, #3
 8008ad4:	3508      	adds	r5, #8
 8008ad6:	2d0c      	cmp	r5, #12
 8008ad8:	bf38      	it	cc
 8008ada:	250c      	movcc	r5, #12
 8008adc:	2d00      	cmp	r5, #0
 8008ade:	4606      	mov	r6, r0
 8008ae0:	db01      	blt.n	8008ae6 <_malloc_r+0x1a>
 8008ae2:	42a9      	cmp	r1, r5
 8008ae4:	d903      	bls.n	8008aee <_malloc_r+0x22>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	2000      	movs	r0, #0
 8008aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aee:	f000 f879 	bl	8008be4 <__malloc_lock>
 8008af2:	4921      	ldr	r1, [pc, #132]	; (8008b78 <_malloc_r+0xac>)
 8008af4:	680a      	ldr	r2, [r1, #0]
 8008af6:	4614      	mov	r4, r2
 8008af8:	b99c      	cbnz	r4, 8008b22 <_malloc_r+0x56>
 8008afa:	4f20      	ldr	r7, [pc, #128]	; (8008b7c <_malloc_r+0xb0>)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	b923      	cbnz	r3, 8008b0a <_malloc_r+0x3e>
 8008b00:	4621      	mov	r1, r4
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 f83c 	bl	8008b80 <_sbrk_r>
 8008b08:	6038      	str	r0, [r7, #0]
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 f837 	bl	8008b80 <_sbrk_r>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	d123      	bne.n	8008b5e <_malloc_r+0x92>
 8008b16:	230c      	movs	r3, #12
 8008b18:	4630      	mov	r0, r6
 8008b1a:	6033      	str	r3, [r6, #0]
 8008b1c:	f000 f868 	bl	8008bf0 <__malloc_unlock>
 8008b20:	e7e3      	b.n	8008aea <_malloc_r+0x1e>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	1b5b      	subs	r3, r3, r5
 8008b26:	d417      	bmi.n	8008b58 <_malloc_r+0x8c>
 8008b28:	2b0b      	cmp	r3, #11
 8008b2a:	d903      	bls.n	8008b34 <_malloc_r+0x68>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	441c      	add	r4, r3
 8008b30:	6025      	str	r5, [r4, #0]
 8008b32:	e004      	b.n	8008b3e <_malloc_r+0x72>
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	42a2      	cmp	r2, r4
 8008b38:	bf0c      	ite	eq
 8008b3a:	600b      	streq	r3, [r1, #0]
 8008b3c:	6053      	strne	r3, [r2, #4]
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f000 f856 	bl	8008bf0 <__malloc_unlock>
 8008b44:	f104 000b 	add.w	r0, r4, #11
 8008b48:	1d23      	adds	r3, r4, #4
 8008b4a:	f020 0007 	bic.w	r0, r0, #7
 8008b4e:	1ac2      	subs	r2, r0, r3
 8008b50:	d0cc      	beq.n	8008aec <_malloc_r+0x20>
 8008b52:	1a1b      	subs	r3, r3, r0
 8008b54:	50a3      	str	r3, [r4, r2]
 8008b56:	e7c9      	b.n	8008aec <_malloc_r+0x20>
 8008b58:	4622      	mov	r2, r4
 8008b5a:	6864      	ldr	r4, [r4, #4]
 8008b5c:	e7cc      	b.n	8008af8 <_malloc_r+0x2c>
 8008b5e:	1cc4      	adds	r4, r0, #3
 8008b60:	f024 0403 	bic.w	r4, r4, #3
 8008b64:	42a0      	cmp	r0, r4
 8008b66:	d0e3      	beq.n	8008b30 <_malloc_r+0x64>
 8008b68:	1a21      	subs	r1, r4, r0
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f000 f808 	bl	8008b80 <_sbrk_r>
 8008b70:	3001      	adds	r0, #1
 8008b72:	d1dd      	bne.n	8008b30 <_malloc_r+0x64>
 8008b74:	e7cf      	b.n	8008b16 <_malloc_r+0x4a>
 8008b76:	bf00      	nop
 8008b78:	20000b04 	.word	0x20000b04
 8008b7c:	20000b08 	.word	0x20000b08

08008b80 <_sbrk_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	2300      	movs	r3, #0
 8008b84:	4d05      	ldr	r5, [pc, #20]	; (8008b9c <_sbrk_r+0x1c>)
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	f7f8 fdac 	bl	80016e8 <_sbrk>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_sbrk_r+0x1a>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_sbrk_r+0x1a>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20000e7c 	.word	0x20000e7c

08008ba0 <siprintf>:
 8008ba0:	b40e      	push	{r1, r2, r3}
 8008ba2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ba6:	b500      	push	{lr}
 8008ba8:	b09c      	sub	sp, #112	; 0x70
 8008baa:	ab1d      	add	r3, sp, #116	; 0x74
 8008bac:	9002      	str	r0, [sp, #8]
 8008bae:	9006      	str	r0, [sp, #24]
 8008bb0:	9107      	str	r1, [sp, #28]
 8008bb2:	9104      	str	r1, [sp, #16]
 8008bb4:	4808      	ldr	r0, [pc, #32]	; (8008bd8 <siprintf+0x38>)
 8008bb6:	4909      	ldr	r1, [pc, #36]	; (8008bdc <siprintf+0x3c>)
 8008bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bbc:	9105      	str	r1, [sp, #20]
 8008bbe:	6800      	ldr	r0, [r0, #0]
 8008bc0:	a902      	add	r1, sp, #8
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	f000 f876 	bl	8008cb4 <_svfiprintf_r>
 8008bc8:	2200      	movs	r2, #0
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	b01c      	add	sp, #112	; 0x70
 8008bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd4:	b003      	add	sp, #12
 8008bd6:	4770      	bx	lr
 8008bd8:	200000dc 	.word	0x200000dc
 8008bdc:	ffff0208 	.word	0xffff0208

08008be0 <__retarget_lock_acquire_recursive>:
 8008be0:	4770      	bx	lr

08008be2 <__retarget_lock_release_recursive>:
 8008be2:	4770      	bx	lr

08008be4 <__malloc_lock>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__malloc_lock+0x8>)
 8008be6:	f7ff bffb 	b.w	8008be0 <__retarget_lock_acquire_recursive>
 8008bea:	bf00      	nop
 8008bec:	20000e74 	.word	0x20000e74

08008bf0 <__malloc_unlock>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__malloc_unlock+0x8>)
 8008bf2:	f7ff bff6 	b.w	8008be2 <__retarget_lock_release_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20000e74 	.word	0x20000e74

08008bfc <__ssputs_r>:
 8008bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c00:	688e      	ldr	r6, [r1, #8]
 8008c02:	4682      	mov	sl, r0
 8008c04:	429e      	cmp	r6, r3
 8008c06:	460c      	mov	r4, r1
 8008c08:	4690      	mov	r8, r2
 8008c0a:	461f      	mov	r7, r3
 8008c0c:	d838      	bhi.n	8008c80 <__ssputs_r+0x84>
 8008c0e:	898a      	ldrh	r2, [r1, #12]
 8008c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c14:	d032      	beq.n	8008c7c <__ssputs_r+0x80>
 8008c16:	6825      	ldr	r5, [r4, #0]
 8008c18:	6909      	ldr	r1, [r1, #16]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	eba5 0901 	sub.w	r9, r5, r1
 8008c20:	6965      	ldr	r5, [r4, #20]
 8008c22:	444b      	add	r3, r9
 8008c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c2c:	106d      	asrs	r5, r5, #1
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	bf38      	it	cc
 8008c32:	461d      	movcc	r5, r3
 8008c34:	0553      	lsls	r3, r2, #21
 8008c36:	d531      	bpl.n	8008c9c <__ssputs_r+0xa0>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f7ff ff47 	bl	8008acc <_malloc_r>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	b950      	cbnz	r0, 8008c58 <__ssputs_r+0x5c>
 8008c42:	230c      	movs	r3, #12
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	f8ca 3000 	str.w	r3, [sl]
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c58:	464a      	mov	r2, r9
 8008c5a:	6921      	ldr	r1, [r4, #16]
 8008c5c:	f000 face 	bl	80091fc <memcpy>
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	6126      	str	r6, [r4, #16]
 8008c6e:	444e      	add	r6, r9
 8008c70:	6026      	str	r6, [r4, #0]
 8008c72:	463e      	mov	r6, r7
 8008c74:	6165      	str	r5, [r4, #20]
 8008c76:	eba5 0509 	sub.w	r5, r5, r9
 8008c7a:	60a5      	str	r5, [r4, #8]
 8008c7c:	42be      	cmp	r6, r7
 8008c7e:	d900      	bls.n	8008c82 <__ssputs_r+0x86>
 8008c80:	463e      	mov	r6, r7
 8008c82:	4632      	mov	r2, r6
 8008c84:	4641      	mov	r1, r8
 8008c86:	6820      	ldr	r0, [r4, #0]
 8008c88:	f000 fac6 	bl	8009218 <memmove>
 8008c8c:	68a3      	ldr	r3, [r4, #8]
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	1b9b      	subs	r3, r3, r6
 8008c92:	4432      	add	r2, r6
 8008c94:	2000      	movs	r0, #0
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	e7db      	b.n	8008c54 <__ssputs_r+0x58>
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	f000 fad5 	bl	800924c <_realloc_r>
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d1e1      	bne.n	8008c6c <__ssputs_r+0x70>
 8008ca8:	4650      	mov	r0, sl
 8008caa:	6921      	ldr	r1, [r4, #16]
 8008cac:	f7ff fec2 	bl	8008a34 <_free_r>
 8008cb0:	e7c7      	b.n	8008c42 <__ssputs_r+0x46>
	...

08008cb4 <_svfiprintf_r>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	4698      	mov	r8, r3
 8008cba:	898b      	ldrh	r3, [r1, #12]
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	b09d      	sub	sp, #116	; 0x74
 8008cc6:	d50e      	bpl.n	8008ce6 <_svfiprintf_r+0x32>
 8008cc8:	690b      	ldr	r3, [r1, #16]
 8008cca:	b963      	cbnz	r3, 8008ce6 <_svfiprintf_r+0x32>
 8008ccc:	2140      	movs	r1, #64	; 0x40
 8008cce:	f7ff fefd 	bl	8008acc <_malloc_r>
 8008cd2:	6028      	str	r0, [r5, #0]
 8008cd4:	6128      	str	r0, [r5, #16]
 8008cd6:	b920      	cbnz	r0, 8008ce2 <_svfiprintf_r+0x2e>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	e0d1      	b.n	8008e86 <_svfiprintf_r+0x1d2>
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	616b      	str	r3, [r5, #20]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cea:	2320      	movs	r3, #32
 8008cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cf0:	2330      	movs	r3, #48	; 0x30
 8008cf2:	f04f 0901 	mov.w	r9, #1
 8008cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ea0 <_svfiprintf_r+0x1ec>
 8008cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d02:	4623      	mov	r3, r4
 8008d04:	469a      	mov	sl, r3
 8008d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0a:	b10a      	cbz	r2, 8008d10 <_svfiprintf_r+0x5c>
 8008d0c:	2a25      	cmp	r2, #37	; 0x25
 8008d0e:	d1f9      	bne.n	8008d04 <_svfiprintf_r+0x50>
 8008d10:	ebba 0b04 	subs.w	fp, sl, r4
 8008d14:	d00b      	beq.n	8008d2e <_svfiprintf_r+0x7a>
 8008d16:	465b      	mov	r3, fp
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff ff6d 	bl	8008bfc <__ssputs_r>
 8008d22:	3001      	adds	r0, #1
 8008d24:	f000 80aa 	beq.w	8008e7c <_svfiprintf_r+0x1c8>
 8008d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d2a:	445a      	add	r2, fp
 8008d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80a2 	beq.w	8008e7c <_svfiprintf_r+0x1c8>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d42:	f10a 0a01 	add.w	sl, sl, #1
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d50:	4654      	mov	r4, sl
 8008d52:	2205      	movs	r2, #5
 8008d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d58:	4851      	ldr	r0, [pc, #324]	; (8008ea0 <_svfiprintf_r+0x1ec>)
 8008d5a:	f000 fa41 	bl	80091e0 <memchr>
 8008d5e:	9a04      	ldr	r2, [sp, #16]
 8008d60:	b9d8      	cbnz	r0, 8008d9a <_svfiprintf_r+0xe6>
 8008d62:	06d0      	lsls	r0, r2, #27
 8008d64:	bf44      	itt	mi
 8008d66:	2320      	movmi	r3, #32
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6c:	0711      	lsls	r1, r2, #28
 8008d6e:	bf44      	itt	mi
 8008d70:	232b      	movmi	r3, #43	; 0x2b
 8008d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d7c:	d015      	beq.n	8008daa <_svfiprintf_r+0xf6>
 8008d7e:	4654      	mov	r4, sl
 8008d80:	2000      	movs	r0, #0
 8008d82:	f04f 0c0a 	mov.w	ip, #10
 8008d86:	9a07      	ldr	r2, [sp, #28]
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8e:	3b30      	subs	r3, #48	; 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d94e      	bls.n	8008e32 <_svfiprintf_r+0x17e>
 8008d94:	b1b0      	cbz	r0, 8008dc4 <_svfiprintf_r+0x110>
 8008d96:	9207      	str	r2, [sp, #28]
 8008d98:	e014      	b.n	8008dc4 <_svfiprintf_r+0x110>
 8008d9a:	eba0 0308 	sub.w	r3, r0, r8
 8008d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	46a2      	mov	sl, r4
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	e7d2      	b.n	8008d50 <_svfiprintf_r+0x9c>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfbb      	ittet	lt
 8008db6:	425b      	neglt	r3, r3
 8008db8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dbc:	9307      	strge	r3, [sp, #28]
 8008dbe:	9307      	strlt	r3, [sp, #28]
 8008dc0:	bfb8      	it	lt
 8008dc2:	9204      	strlt	r2, [sp, #16]
 8008dc4:	7823      	ldrb	r3, [r4, #0]
 8008dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc8:	d10c      	bne.n	8008de4 <_svfiprintf_r+0x130>
 8008dca:	7863      	ldrb	r3, [r4, #1]
 8008dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dce:	d135      	bne.n	8008e3c <_svfiprintf_r+0x188>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	3402      	adds	r4, #2
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	9203      	str	r2, [sp, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfb8      	it	lt
 8008dde:	f04f 33ff 	movlt.w	r3, #4294967295
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008eb0 <_svfiprintf_r+0x1fc>
 8008de8:	2203      	movs	r2, #3
 8008dea:	4650      	mov	r0, sl
 8008dec:	7821      	ldrb	r1, [r4, #0]
 8008dee:	f000 f9f7 	bl	80091e0 <memchr>
 8008df2:	b140      	cbz	r0, 8008e06 <_svfiprintf_r+0x152>
 8008df4:	2340      	movs	r3, #64	; 0x40
 8008df6:	eba0 000a 	sub.w	r0, r0, sl
 8008dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	3401      	adds	r4, #1
 8008e02:	4303      	orrs	r3, r0
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	2206      	movs	r2, #6
 8008e0c:	4825      	ldr	r0, [pc, #148]	; (8008ea4 <_svfiprintf_r+0x1f0>)
 8008e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e12:	f000 f9e5 	bl	80091e0 <memchr>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d038      	beq.n	8008e8c <_svfiprintf_r+0x1d8>
 8008e1a:	4b23      	ldr	r3, [pc, #140]	; (8008ea8 <_svfiprintf_r+0x1f4>)
 8008e1c:	bb1b      	cbnz	r3, 8008e66 <_svfiprintf_r+0x1b2>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	3307      	adds	r3, #7
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	3308      	adds	r3, #8
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2c:	4433      	add	r3, r6
 8008e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e30:	e767      	b.n	8008d02 <_svfiprintf_r+0x4e>
 8008e32:	460c      	mov	r4, r1
 8008e34:	2001      	movs	r0, #1
 8008e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e3a:	e7a5      	b.n	8008d88 <_svfiprintf_r+0xd4>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	4619      	mov	r1, r3
 8008e44:	3401      	adds	r4, #1
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4e:	3a30      	subs	r2, #48	; 0x30
 8008e50:	2a09      	cmp	r2, #9
 8008e52:	d903      	bls.n	8008e5c <_svfiprintf_r+0x1a8>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0c5      	beq.n	8008de4 <_svfiprintf_r+0x130>
 8008e58:	9105      	str	r1, [sp, #20]
 8008e5a:	e7c3      	b.n	8008de4 <_svfiprintf_r+0x130>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	2301      	movs	r3, #1
 8008e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e64:	e7f0      	b.n	8008e48 <_svfiprintf_r+0x194>
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <_svfiprintf_r+0x1f8>)
 8008e70:	a904      	add	r1, sp, #16
 8008e72:	f3af 8000 	nop.w
 8008e76:	1c42      	adds	r2, r0, #1
 8008e78:	4606      	mov	r6, r0
 8008e7a:	d1d6      	bne.n	8008e2a <_svfiprintf_r+0x176>
 8008e7c:	89ab      	ldrh	r3, [r5, #12]
 8008e7e:	065b      	lsls	r3, r3, #25
 8008e80:	f53f af2c 	bmi.w	8008cdc <_svfiprintf_r+0x28>
 8008e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e86:	b01d      	add	sp, #116	; 0x74
 8008e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8c:	ab03      	add	r3, sp, #12
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	462a      	mov	r2, r5
 8008e92:	4638      	mov	r0, r7
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <_svfiprintf_r+0x1f8>)
 8008e96:	a904      	add	r1, sp, #16
 8008e98:	f000 f87c 	bl	8008f94 <_printf_i>
 8008e9c:	e7eb      	b.n	8008e76 <_svfiprintf_r+0x1c2>
 8008e9e:	bf00      	nop
 8008ea0:	0800b334 	.word	0x0800b334
 8008ea4:	0800b33e 	.word	0x0800b33e
 8008ea8:	00000000 	.word	0x00000000
 8008eac:	08008bfd 	.word	0x08008bfd
 8008eb0:	0800b33a 	.word	0x0800b33a

08008eb4 <_printf_common>:
 8008eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb8:	4616      	mov	r6, r2
 8008eba:	4699      	mov	r9, r3
 8008ebc:	688a      	ldr	r2, [r1, #8]
 8008ebe:	690b      	ldr	r3, [r1, #16]
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	bfb8      	it	lt
 8008ec6:	4613      	movlt	r3, r2
 8008ec8:	6033      	str	r3, [r6, #0]
 8008eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ece:	460c      	mov	r4, r1
 8008ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ed4:	b10a      	cbz	r2, 8008eda <_printf_common+0x26>
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	6033      	str	r3, [r6, #0]
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	0699      	lsls	r1, r3, #26
 8008ede:	bf42      	ittt	mi
 8008ee0:	6833      	ldrmi	r3, [r6, #0]
 8008ee2:	3302      	addmi	r3, #2
 8008ee4:	6033      	strmi	r3, [r6, #0]
 8008ee6:	6825      	ldr	r5, [r4, #0]
 8008ee8:	f015 0506 	ands.w	r5, r5, #6
 8008eec:	d106      	bne.n	8008efc <_printf_common+0x48>
 8008eee:	f104 0a19 	add.w	sl, r4, #25
 8008ef2:	68e3      	ldr	r3, [r4, #12]
 8008ef4:	6832      	ldr	r2, [r6, #0]
 8008ef6:	1a9b      	subs	r3, r3, r2
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dc28      	bgt.n	8008f4e <_printf_common+0x9a>
 8008efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f00:	1e13      	subs	r3, r2, #0
 8008f02:	6822      	ldr	r2, [r4, #0]
 8008f04:	bf18      	it	ne
 8008f06:	2301      	movne	r3, #1
 8008f08:	0692      	lsls	r2, r2, #26
 8008f0a:	d42d      	bmi.n	8008f68 <_printf_common+0xb4>
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	4638      	mov	r0, r7
 8008f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f14:	47c0      	blx	r8
 8008f16:	3001      	adds	r0, #1
 8008f18:	d020      	beq.n	8008f5c <_printf_common+0xa8>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	68e5      	ldr	r5, [r4, #12]
 8008f1e:	f003 0306 	and.w	r3, r3, #6
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	bf18      	it	ne
 8008f26:	2500      	movne	r5, #0
 8008f28:	6832      	ldr	r2, [r6, #0]
 8008f2a:	f04f 0600 	mov.w	r6, #0
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	bf08      	it	eq
 8008f32:	1aad      	subeq	r5, r5, r2
 8008f34:	6922      	ldr	r2, [r4, #16]
 8008f36:	bf08      	it	eq
 8008f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	bfc4      	itt	gt
 8008f40:	1a9b      	subgt	r3, r3, r2
 8008f42:	18ed      	addgt	r5, r5, r3
 8008f44:	341a      	adds	r4, #26
 8008f46:	42b5      	cmp	r5, r6
 8008f48:	d11a      	bne.n	8008f80 <_printf_common+0xcc>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e008      	b.n	8008f60 <_printf_common+0xac>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4652      	mov	r2, sl
 8008f52:	4649      	mov	r1, r9
 8008f54:	4638      	mov	r0, r7
 8008f56:	47c0      	blx	r8
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d103      	bne.n	8008f64 <_printf_common+0xb0>
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f64:	3501      	adds	r5, #1
 8008f66:	e7c4      	b.n	8008ef2 <_printf_common+0x3e>
 8008f68:	2030      	movs	r0, #48	; 0x30
 8008f6a:	18e1      	adds	r1, r4, r3
 8008f6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f76:	4422      	add	r2, r4
 8008f78:	3302      	adds	r3, #2
 8008f7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f7e:	e7c5      	b.n	8008f0c <_printf_common+0x58>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4622      	mov	r2, r4
 8008f84:	4649      	mov	r1, r9
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c0      	blx	r8
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d0e6      	beq.n	8008f5c <_printf_common+0xa8>
 8008f8e:	3601      	adds	r6, #1
 8008f90:	e7d9      	b.n	8008f46 <_printf_common+0x92>
	...

08008f94 <_printf_i>:
 8008f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	460c      	mov	r4, r1
 8008f9a:	7e27      	ldrb	r7, [r4, #24]
 8008f9c:	4691      	mov	r9, r2
 8008f9e:	2f78      	cmp	r7, #120	; 0x78
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	469a      	mov	sl, r3
 8008fa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008faa:	d807      	bhi.n	8008fbc <_printf_i+0x28>
 8008fac:	2f62      	cmp	r7, #98	; 0x62
 8008fae:	d80a      	bhi.n	8008fc6 <_printf_i+0x32>
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	f000 80d9 	beq.w	8009168 <_printf_i+0x1d4>
 8008fb6:	2f58      	cmp	r7, #88	; 0x58
 8008fb8:	f000 80a4 	beq.w	8009104 <_printf_i+0x170>
 8008fbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fc4:	e03a      	b.n	800903c <_printf_i+0xa8>
 8008fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fca:	2b15      	cmp	r3, #21
 8008fcc:	d8f6      	bhi.n	8008fbc <_printf_i+0x28>
 8008fce:	a001      	add	r0, pc, #4	; (adr r0, 8008fd4 <_printf_i+0x40>)
 8008fd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fd4:	0800902d 	.word	0x0800902d
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08008fbd 	.word	0x08008fbd
 8008fe0:	08008fbd 	.word	0x08008fbd
 8008fe4:	08008fbd 	.word	0x08008fbd
 8008fe8:	08008fbd 	.word	0x08008fbd
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08008fbd 	.word	0x08008fbd
 8008ff4:	08008fbd 	.word	0x08008fbd
 8008ff8:	08008fbd 	.word	0x08008fbd
 8008ffc:	08008fbd 	.word	0x08008fbd
 8009000:	0800914f 	.word	0x0800914f
 8009004:	08009071 	.word	0x08009071
 8009008:	08009131 	.word	0x08009131
 800900c:	08008fbd 	.word	0x08008fbd
 8009010:	08008fbd 	.word	0x08008fbd
 8009014:	08009171 	.word	0x08009171
 8009018:	08008fbd 	.word	0x08008fbd
 800901c:	08009071 	.word	0x08009071
 8009020:	08008fbd 	.word	0x08008fbd
 8009024:	08008fbd 	.word	0x08008fbd
 8009028:	08009139 	.word	0x08009139
 800902c:	680b      	ldr	r3, [r1, #0]
 800902e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009032:	1d1a      	adds	r2, r3, #4
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	600a      	str	r2, [r1, #0]
 8009038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800903c:	2301      	movs	r3, #1
 800903e:	e0a4      	b.n	800918a <_printf_i+0x1f6>
 8009040:	6825      	ldr	r5, [r4, #0]
 8009042:	6808      	ldr	r0, [r1, #0]
 8009044:	062e      	lsls	r6, r5, #24
 8009046:	f100 0304 	add.w	r3, r0, #4
 800904a:	d50a      	bpl.n	8009062 <_printf_i+0xce>
 800904c:	6805      	ldr	r5, [r0, #0]
 800904e:	600b      	str	r3, [r1, #0]
 8009050:	2d00      	cmp	r5, #0
 8009052:	da03      	bge.n	800905c <_printf_i+0xc8>
 8009054:	232d      	movs	r3, #45	; 0x2d
 8009056:	426d      	negs	r5, r5
 8009058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800905c:	230a      	movs	r3, #10
 800905e:	485e      	ldr	r0, [pc, #376]	; (80091d8 <_printf_i+0x244>)
 8009060:	e019      	b.n	8009096 <_printf_i+0x102>
 8009062:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009066:	6805      	ldr	r5, [r0, #0]
 8009068:	600b      	str	r3, [r1, #0]
 800906a:	bf18      	it	ne
 800906c:	b22d      	sxthne	r5, r5
 800906e:	e7ef      	b.n	8009050 <_printf_i+0xbc>
 8009070:	680b      	ldr	r3, [r1, #0]
 8009072:	6825      	ldr	r5, [r4, #0]
 8009074:	1d18      	adds	r0, r3, #4
 8009076:	6008      	str	r0, [r1, #0]
 8009078:	0628      	lsls	r0, r5, #24
 800907a:	d501      	bpl.n	8009080 <_printf_i+0xec>
 800907c:	681d      	ldr	r5, [r3, #0]
 800907e:	e002      	b.n	8009086 <_printf_i+0xf2>
 8009080:	0669      	lsls	r1, r5, #25
 8009082:	d5fb      	bpl.n	800907c <_printf_i+0xe8>
 8009084:	881d      	ldrh	r5, [r3, #0]
 8009086:	2f6f      	cmp	r7, #111	; 0x6f
 8009088:	bf0c      	ite	eq
 800908a:	2308      	moveq	r3, #8
 800908c:	230a      	movne	r3, #10
 800908e:	4852      	ldr	r0, [pc, #328]	; (80091d8 <_printf_i+0x244>)
 8009090:	2100      	movs	r1, #0
 8009092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009096:	6866      	ldr	r6, [r4, #4]
 8009098:	2e00      	cmp	r6, #0
 800909a:	bfa8      	it	ge
 800909c:	6821      	ldrge	r1, [r4, #0]
 800909e:	60a6      	str	r6, [r4, #8]
 80090a0:	bfa4      	itt	ge
 80090a2:	f021 0104 	bicge.w	r1, r1, #4
 80090a6:	6021      	strge	r1, [r4, #0]
 80090a8:	b90d      	cbnz	r5, 80090ae <_printf_i+0x11a>
 80090aa:	2e00      	cmp	r6, #0
 80090ac:	d04d      	beq.n	800914a <_printf_i+0x1b6>
 80090ae:	4616      	mov	r6, r2
 80090b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80090b4:	fb03 5711 	mls	r7, r3, r1, r5
 80090b8:	5dc7      	ldrb	r7, [r0, r7]
 80090ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090be:	462f      	mov	r7, r5
 80090c0:	42bb      	cmp	r3, r7
 80090c2:	460d      	mov	r5, r1
 80090c4:	d9f4      	bls.n	80090b0 <_printf_i+0x11c>
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d10b      	bne.n	80090e2 <_printf_i+0x14e>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	07df      	lsls	r7, r3, #31
 80090ce:	d508      	bpl.n	80090e2 <_printf_i+0x14e>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	6861      	ldr	r1, [r4, #4]
 80090d4:	4299      	cmp	r1, r3
 80090d6:	bfde      	ittt	le
 80090d8:	2330      	movle	r3, #48	; 0x30
 80090da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090e2:	1b92      	subs	r2, r2, r6
 80090e4:	6122      	str	r2, [r4, #16]
 80090e6:	464b      	mov	r3, r9
 80090e8:	4621      	mov	r1, r4
 80090ea:	4640      	mov	r0, r8
 80090ec:	f8cd a000 	str.w	sl, [sp]
 80090f0:	aa03      	add	r2, sp, #12
 80090f2:	f7ff fedf 	bl	8008eb4 <_printf_common>
 80090f6:	3001      	adds	r0, #1
 80090f8:	d14c      	bne.n	8009194 <_printf_i+0x200>
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	b004      	add	sp, #16
 8009100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009104:	4834      	ldr	r0, [pc, #208]	; (80091d8 <_printf_i+0x244>)
 8009106:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800910a:	680e      	ldr	r6, [r1, #0]
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009112:	061f      	lsls	r7, r3, #24
 8009114:	600e      	str	r6, [r1, #0]
 8009116:	d514      	bpl.n	8009142 <_printf_i+0x1ae>
 8009118:	07d9      	lsls	r1, r3, #31
 800911a:	bf44      	itt	mi
 800911c:	f043 0320 	orrmi.w	r3, r3, #32
 8009120:	6023      	strmi	r3, [r4, #0]
 8009122:	b91d      	cbnz	r5, 800912c <_printf_i+0x198>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	f023 0320 	bic.w	r3, r3, #32
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	2310      	movs	r3, #16
 800912e:	e7af      	b.n	8009090 <_printf_i+0xfc>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	f043 0320 	orr.w	r3, r3, #32
 8009136:	6023      	str	r3, [r4, #0]
 8009138:	2378      	movs	r3, #120	; 0x78
 800913a:	4828      	ldr	r0, [pc, #160]	; (80091dc <_printf_i+0x248>)
 800913c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009140:	e7e3      	b.n	800910a <_printf_i+0x176>
 8009142:	065e      	lsls	r6, r3, #25
 8009144:	bf48      	it	mi
 8009146:	b2ad      	uxthmi	r5, r5
 8009148:	e7e6      	b.n	8009118 <_printf_i+0x184>
 800914a:	4616      	mov	r6, r2
 800914c:	e7bb      	b.n	80090c6 <_printf_i+0x132>
 800914e:	680b      	ldr	r3, [r1, #0]
 8009150:	6826      	ldr	r6, [r4, #0]
 8009152:	1d1d      	adds	r5, r3, #4
 8009154:	6960      	ldr	r0, [r4, #20]
 8009156:	600d      	str	r5, [r1, #0]
 8009158:	0635      	lsls	r5, r6, #24
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	d501      	bpl.n	8009162 <_printf_i+0x1ce>
 800915e:	6018      	str	r0, [r3, #0]
 8009160:	e002      	b.n	8009168 <_printf_i+0x1d4>
 8009162:	0671      	lsls	r1, r6, #25
 8009164:	d5fb      	bpl.n	800915e <_printf_i+0x1ca>
 8009166:	8018      	strh	r0, [r3, #0]
 8009168:	2300      	movs	r3, #0
 800916a:	4616      	mov	r6, r2
 800916c:	6123      	str	r3, [r4, #16]
 800916e:	e7ba      	b.n	80090e6 <_printf_i+0x152>
 8009170:	680b      	ldr	r3, [r1, #0]
 8009172:	1d1a      	adds	r2, r3, #4
 8009174:	600a      	str	r2, [r1, #0]
 8009176:	681e      	ldr	r6, [r3, #0]
 8009178:	2100      	movs	r1, #0
 800917a:	4630      	mov	r0, r6
 800917c:	6862      	ldr	r2, [r4, #4]
 800917e:	f000 f82f 	bl	80091e0 <memchr>
 8009182:	b108      	cbz	r0, 8009188 <_printf_i+0x1f4>
 8009184:	1b80      	subs	r0, r0, r6
 8009186:	6060      	str	r0, [r4, #4]
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	6123      	str	r3, [r4, #16]
 800918c:	2300      	movs	r3, #0
 800918e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009192:	e7a8      	b.n	80090e6 <_printf_i+0x152>
 8009194:	4632      	mov	r2, r6
 8009196:	4649      	mov	r1, r9
 8009198:	4640      	mov	r0, r8
 800919a:	6923      	ldr	r3, [r4, #16]
 800919c:	47d0      	blx	sl
 800919e:	3001      	adds	r0, #1
 80091a0:	d0ab      	beq.n	80090fa <_printf_i+0x166>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	079b      	lsls	r3, r3, #30
 80091a6:	d413      	bmi.n	80091d0 <_printf_i+0x23c>
 80091a8:	68e0      	ldr	r0, [r4, #12]
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	4298      	cmp	r0, r3
 80091ae:	bfb8      	it	lt
 80091b0:	4618      	movlt	r0, r3
 80091b2:	e7a4      	b.n	80090fe <_printf_i+0x16a>
 80091b4:	2301      	movs	r3, #1
 80091b6:	4632      	mov	r2, r6
 80091b8:	4649      	mov	r1, r9
 80091ba:	4640      	mov	r0, r8
 80091bc:	47d0      	blx	sl
 80091be:	3001      	adds	r0, #1
 80091c0:	d09b      	beq.n	80090fa <_printf_i+0x166>
 80091c2:	3501      	adds	r5, #1
 80091c4:	68e3      	ldr	r3, [r4, #12]
 80091c6:	9903      	ldr	r1, [sp, #12]
 80091c8:	1a5b      	subs	r3, r3, r1
 80091ca:	42ab      	cmp	r3, r5
 80091cc:	dcf2      	bgt.n	80091b4 <_printf_i+0x220>
 80091ce:	e7eb      	b.n	80091a8 <_printf_i+0x214>
 80091d0:	2500      	movs	r5, #0
 80091d2:	f104 0619 	add.w	r6, r4, #25
 80091d6:	e7f5      	b.n	80091c4 <_printf_i+0x230>
 80091d8:	0800b345 	.word	0x0800b345
 80091dc:	0800b356 	.word	0x0800b356

080091e0 <memchr>:
 80091e0:	4603      	mov	r3, r0
 80091e2:	b510      	push	{r4, lr}
 80091e4:	b2c9      	uxtb	r1, r1
 80091e6:	4402      	add	r2, r0
 80091e8:	4293      	cmp	r3, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	d101      	bne.n	80091f2 <memchr+0x12>
 80091ee:	2000      	movs	r0, #0
 80091f0:	e003      	b.n	80091fa <memchr+0x1a>
 80091f2:	7804      	ldrb	r4, [r0, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	428c      	cmp	r4, r1
 80091f8:	d1f6      	bne.n	80091e8 <memchr+0x8>
 80091fa:	bd10      	pop	{r4, pc}

080091fc <memcpy>:
 80091fc:	440a      	add	r2, r1
 80091fe:	4291      	cmp	r1, r2
 8009200:	f100 33ff 	add.w	r3, r0, #4294967295
 8009204:	d100      	bne.n	8009208 <memcpy+0xc>
 8009206:	4770      	bx	lr
 8009208:	b510      	push	{r4, lr}
 800920a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920e:	4291      	cmp	r1, r2
 8009210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009214:	d1f9      	bne.n	800920a <memcpy+0xe>
 8009216:	bd10      	pop	{r4, pc}

08009218 <memmove>:
 8009218:	4288      	cmp	r0, r1
 800921a:	b510      	push	{r4, lr}
 800921c:	eb01 0402 	add.w	r4, r1, r2
 8009220:	d902      	bls.n	8009228 <memmove+0x10>
 8009222:	4284      	cmp	r4, r0
 8009224:	4623      	mov	r3, r4
 8009226:	d807      	bhi.n	8009238 <memmove+0x20>
 8009228:	1e43      	subs	r3, r0, #1
 800922a:	42a1      	cmp	r1, r4
 800922c:	d008      	beq.n	8009240 <memmove+0x28>
 800922e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009232:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009236:	e7f8      	b.n	800922a <memmove+0x12>
 8009238:	4601      	mov	r1, r0
 800923a:	4402      	add	r2, r0
 800923c:	428a      	cmp	r2, r1
 800923e:	d100      	bne.n	8009242 <memmove+0x2a>
 8009240:	bd10      	pop	{r4, pc}
 8009242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800924a:	e7f7      	b.n	800923c <memmove+0x24>

0800924c <_realloc_r>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	4607      	mov	r7, r0
 8009250:	4614      	mov	r4, r2
 8009252:	460e      	mov	r6, r1
 8009254:	b921      	cbnz	r1, 8009260 <_realloc_r+0x14>
 8009256:	4611      	mov	r1, r2
 8009258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800925c:	f7ff bc36 	b.w	8008acc <_malloc_r>
 8009260:	b922      	cbnz	r2, 800926c <_realloc_r+0x20>
 8009262:	f7ff fbe7 	bl	8008a34 <_free_r>
 8009266:	4625      	mov	r5, r4
 8009268:	4628      	mov	r0, r5
 800926a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800926c:	f000 f814 	bl	8009298 <_malloc_usable_size_r>
 8009270:	42a0      	cmp	r0, r4
 8009272:	d20f      	bcs.n	8009294 <_realloc_r+0x48>
 8009274:	4621      	mov	r1, r4
 8009276:	4638      	mov	r0, r7
 8009278:	f7ff fc28 	bl	8008acc <_malloc_r>
 800927c:	4605      	mov	r5, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	d0f2      	beq.n	8009268 <_realloc_r+0x1c>
 8009282:	4631      	mov	r1, r6
 8009284:	4622      	mov	r2, r4
 8009286:	f7ff ffb9 	bl	80091fc <memcpy>
 800928a:	4631      	mov	r1, r6
 800928c:	4638      	mov	r0, r7
 800928e:	f7ff fbd1 	bl	8008a34 <_free_r>
 8009292:	e7e9      	b.n	8009268 <_realloc_r+0x1c>
 8009294:	4635      	mov	r5, r6
 8009296:	e7e7      	b.n	8009268 <_realloc_r+0x1c>

08009298 <_malloc_usable_size_r>:
 8009298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800929c:	1f18      	subs	r0, r3, #4
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bfbc      	itt	lt
 80092a2:	580b      	ldrlt	r3, [r1, r0]
 80092a4:	18c0      	addlt	r0, r0, r3
 80092a6:	4770      	bx	lr

080092a8 <_init>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr

080092b4 <_fini>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr
